<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>My Secret</title>
    <url>/2023/08/22/My-Secret/</url>
    <content><![CDATA[<h1 id="一、Brief-Introduction"><a href="#一、Brief-Introduction" class="headerlink" title="一、Brief Introduction"></a>一、Brief Introduction</h1><p>个人像感情又不像感情的经历~</p>
<h2 id="二、Start"><a href="#二、Start" class="headerlink" title="二、Start"></a>二、Start</h2><h2 id="2-1-小学"><a href="#2-1-小学" class="headerlink" title="2.1 小学"></a>2.1 小学</h2><p>​	都知道，小学是个人比较懵懂的阶段，但是我好像跟其他同龄人不太一样，对比起来真的不要太懵懂。那个时候的我跟其他人一样，该吃吃该玩玩儿，没有任何烦恼简直不要太开心)。但是好像有点开心过头了，没注意到有桃花会开在我身上，丝毫没意识到事情的严重性。那个给我种桃花的女生(这里称她为A吧)，从一年级开始跟我同班，一年级的小孩能有什么坏心思呢~，事实证明确实没啥坏心思。</p>
<p>​	一直过渡到三年级，从现在想起来确实觉得自己咋那么蠢没看出来。那个时候在学校全日制，中午就趴桌子上睡觉嘛，我调皮睡不着，就跟老师申请说中午管管纪律（当时每个班都有这样的班干，中午管睡觉的）。好巧不巧，有次中午出现了反骨仔，不服从管教的，顶撞班干的那种，我气不打一处来，骂又骂不过，打又打不过，然后就有个女生站出来替我说话了，那个女的就是A。当初我以为这是一种正义嘛，也没注意到其他人都在看着那个A和我在笑，也不知道他们在笑什么….</p>
<p>​	转眼一年过去，到了四年级了，令我红温的一个年级。。。因为那个A一直跟我作对，服了。基本每天都看她不顺眼。。。有次偶然的机会，我从一个女生口中得知A喜欢我，而且不止说了一两次，我一直当做玩笑看待，顺便有时候回了句“我不喜欢她”。有次闹得更凶，课间不止为何闹起来矛盾，她把我三四本书都扔出教室了，当时我也在想哦，我肯定不能吃这个闷亏啦，所以我把她的书连带书包扔出了教室。。。（现在的我看以前的我用现在的话来说简直是“吾辈楷模&#x2F;西格玛男人”)，之后A甚至还咬我手，或者用爪子爪我，我就挺无语。</p>
<p>​	到了五年级了，父母眼看我成绩要到斩杀线了，于是就把我送到了一个公立学校（学校名誉&#x2F;实力挺不错的），那个时候就特别怀念之前一起玩的朋友嘛，然后我又从朋友口中得知，A时不时的问我那些玩的好的“我转到哪个学校去了，想来我这个学校”，后来A知道了我那个学校的名字后也彻底打消了想法。从那之后，我的世界一片安宁~</p>
<h2 id="2-2-初中"><a href="#2-2-初中" class="headerlink" title="2.2 初中"></a>2.2 初中</h2><p>​	中学开始了，都知道中学生青春期嘛，容易对异性产生幻想当然我就没有对异性产生幻想了，因为一切都还是那么的纯洁（至少当时的我感觉是这样的）。那个时候班级里的座位还是可以男女一起坐的，我们班的话就是每个男女人数平均，基本每个男生的同桌都是个女生嘛。我印象中我有三个女同桌吧。前两个都没什么，正常交流，就是非常普通的学习互助。之后到了初二上学期我的同桌，就暂且称她为B吧。平时学习没展现出很多的异常，课后也没有，平时也没有一起出来玩儿。。。忽然有一天，我的舍友躺床上跟我说B喜欢我。。。当然也就只有我听见了，其他人不知道（当时一个宿舍8个人，我和那个舍友是挨着的），当然我也很聪明，没去揭穿。要是一个女生想和你在一起的话应该会向你表白吧（当时我是这么认为的，到今天我觉得一个女生要是喜欢你，可能会表现出不在意，比如从你身边路过甚至不和你大招乎；或者说不会主动找你聊天；反正就咱男生怎么想的女就怎么反的来的那种)。</p>
<p>就这样初二上学期结束了。然后，我又又转学了。。。这次转回到了家乡。等好像开学过了一两个星期吧。收到了老师送的礼物和一个女生的礼物，然而这个那个给我送礼物的女生并不是B，而是另一个暂且称为C吧。那些礼物是我爸回来的时候顺道送回来的，说是C送的。最初我还不信，我还特点登了QQ问她，她一直否认，看她不承认我也就没问下去了（当时我在想你不说就不说喽，gift我就先收下了哈哈哈）。</p>
<p>​	到了初三，初二下就没发生什么，毕竟刚回来吧没适应多久。当时是分班嘛，初三一上去遇到的都是不认识的。然而就是这些不认识的，命运的齿轮开始转动了。。。我很清楚的记得当时教室分为三部分，左边两排，中间六排，右边三排。我在中间从左往右第四行第二排。。。而下一个女生暂且称为D在面向黑板的右边第三行。。。同样的没怎么互相说过话，也没怎么聊过天。。。我也就只是跟前排的女生玩得很好嘛，而D就只是坐在自己的座位上看小说（哇塞，现在想起来D应该巨难受吧。。。。眼睁睁看着我和别的女生玩儿自己却没法子插手，毕竟D和我前排的女生也不熟。。。，）几乎相同的事件在我脑海闪过。到了国庆放假，大家都在QQ班群里吹牛。。。。。然后当我出现聊天的时候那个D就开始“欺负”我了。。。。当然不像那个A那么欺负人。。。D的那个“欺负”就像是开玩笑的，没有让我感到任何不是，反正就像朋友那样吧。然后有个路人甲，也是女的，就问D“为啥这么喜欢欺负我嘞？“，只见D淡淡的说了一句“因为他可爱呀”，顿时群里就很多人都发“哇哦~”，然而我却回了一句——我哪可爱了，一点都不可爱。。。然后热闹群里不知为何变成了“图书馆”。。。。国庆过后就恢复学习生活了嘛。记得和D一起出去活动是一次去敬老院捐东西，结束后来个集体合照嘛。也就仅此而已了。。。</p>
<h2 id="2-3-高中"><a href="#2-3-高中" class="headerlink" title="2.3 高中"></a>2.3 高中</h2><p>​	对于D来说，比较幸运的是跟我考进来同一所高中，只不过区别在于我在实验班她在普通班而已。高一的话还是那样，该学学该玩儿玩儿。</p>
<p>​	后来到高二了，我出到了普通班，可惜了，当时年纪排名是51好像，但是物理实验班只招50好像。。。就在高二上学期接近期末的开始，我一个同我实验班出来的同学说D喜欢我（这个同学巧了跟D同班）。。。。。我问我同学“她喜欢了我多久了”，他说从初中到现在。。。。我当时就一整个的震惊+懵。。初三到高二上。。到那个时候已经喜欢了整整两年半（我不是小黑子啊。。。时间正好是两年半我能有什么办法。。。）同样的，我也没去骚扰她，既然她喜欢就让她喜欢下去吧。。。那么久了不来找也是没有理由的。。。其实在我同学告诉我这件事情的时候就有些发觉。那个时候早在国庆结束后一两个星期嘛，D得知我的班主任是某某之后，QQ立马私信我说那个班主任有多恶心，后面确实证明了确实恶心。。。。在我参加校运会的时候还特地来我班的根据地为我加油啥的，当时我留意到当时我累的跟dog一样的时候想来扶我，奈何我同学就在身边她也不好意思。还有就是当时校运会开幕式当天早上嘛，我们班是买了班服的（男生是白衬衫加西裤嘛)，她也跑上来找我（之前她问过我是哪个班的有没有买班服啥的) 唠嗑。。。就这样然后就是毕业，毕业之后她也没找过我，到现在一直没了联系。现在我才意识到了些啥。。</p>
<h1 id="三、Summary"><a href="#三、Summary" class="headerlink" title="三、Summary"></a>三、Summary</h1><p>害，只能说。。。。嗯嗯，这就是个人秘密了。。。很少有人知道的。。。一个手可以算出来的那种~</p>
]]></content>
      <categories>
        <category>Secret</category>
      </categories>
      <tags>
        <tag>秘密</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/2023/08/20/MyBatis/</url>
    <content><![CDATA[<h1 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h1><h2 id="MyBatis历史"><a href="#MyBatis历史" class="headerlink" title="MyBatis历史"></a>MyBatis历史</h2><ul>
<li>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下，iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github</li>
<li>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAO）</li>
</ul>
<h2 id="MyBatis特性"><a href="#MyBatis特性" class="headerlink" title="MyBatis特性"></a>MyBatis特性</h2><ol>
<li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li>
<li>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</li>
<li>MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</li>
</ol>
<h2 id="MyBatis下载"><a href="#MyBatis下载" class="headerlink" title="MyBatis下载"></a>MyBatis下载</h2><ul>
<li><a class="link" href="https://github.com/mybatis/mybatis-3">MyBatis下载地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><img lazyload src="/images/loading.svg" data-src="/../Resources/MyBatis%E4%B8%8B%E8%BD%BD.png"></li>
</ul>
<h2 id="和其它持久化层技术对比"><a href="#和其它持久化层技术对比" class="headerlink" title="和其它持久化层技术对比"></a>和其它持久化层技术对比</h2><ul>
<li>JDBC  </li>
<li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤  <ul>
<li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见  </li>
<li>代码冗长，开发效率低</li>
</ul>
</li>
<li>Hibernate 和 JPA</li>
<li>操作简便，开发效率高  <ul>
<li>程序中的长难复杂 SQL 需要绕过框架  </li>
<li>内部自动生产的 SQL，不容易做特殊优化  </li>
<li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。  </li>
<li>反射操作太多，导致数据库性能下降</li>
</ul>
</li>
<li>MyBatis</li>
<li>轻量级，性能出色  <ul>
<li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据  </li>
<li>开发效率稍逊于HIbernate，但是完全能够接受</li>
</ul>
</li>
</ul>
<h1 id="搭建MyBatis"><a href="#搭建MyBatis" class="headerlink" title="搭建MyBatis"></a>搭建MyBatis</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul>
<li>IDE：idea 2019.2  </li>
<li>构建工具：maven 3.5.4  </li>
<li>MySQL版本：MySQL 5.7  </li>
<li>MyBatis版本：MyBatis 3.5.7</li>
</ul>
<h2 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h2><ul>
<li><p>打包方式：jar</p>
</li>
<li><p>引入依赖</p>
  <div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="创建MyBatis的核心配置文件"><a href="#创建MyBatis的核心配置文件" class="headerlink" title="创建MyBatis的核心配置文件"></a>创建MyBatis的核心配置文件</h2><blockquote>
<p>习惯上命名为<code>mybatis-config.xml</code>，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。<br>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息<br>核心配置文件存放的位置是src&#x2F;main&#x2F;resources目录下</p>
</blockquote>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span>  </span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!--设置连接数据库的环境--&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/MyBatis&quot;</span>/&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!--引入映射文件--&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="创建mapper接口"><a href="#创建mapper接口" class="headerlink" title="创建mapper接口"></a>创建mapper接口</h2><blockquote>
<p>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要提供实现类</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mybatis.mapper;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;  </span><br><span class="line">	<span class="comment">/**  </span></span><br><span class="line"><span class="comment">	* 添加用户信息  </span></span><br><span class="line"><span class="comment">	*/</span>  </span><br><span class="line">	<span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="创建MyBatis的映射文件"><a href="#创建MyBatis的映射文件" class="headerlink" title="创建MyBatis的映射文件"></a>创建MyBatis的映射文件</h2><ul>
<li>相关概念：ORM（Object Relationship Mapping）对象关系映射。  </li>
<li>对象：Java的实体类对象  <ul>
<li>关系：关系型数据库  </li>
<li>映射：二者之间的对应关系</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>Java概念</th>
<th>数据库概念</th>
</tr>
</thead>
<tbody><tr>
<td>类</td>
<td>表</td>
</tr>
<tr>
<td>属性</td>
<td>字段&#x2F;列</td>
</tr>
<tr>
<td>对象</td>
<td>记录&#x2F;行</td>
</tr>
</tbody></table>
<ul>
<li>映射文件的命名规则</li>
<li>表所对应的实体类的类名+Mapper.xml<ul>
<li>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml </li>
<li>因此一个映射文件对应一个实体类，对应一张表的操作</li>
<li>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</li>
<li>MyBatis映射文件存放的位置是src&#x2F;main&#x2F;resources&#x2F;mappers目录下</li>
</ul>
</li>
<li>MyBatis中可以面向接口操作数据，要保证两个一致</li>
<li>mapper接口的全类名和映射文件的命名空间（namespace）保持一致<ul>
<li>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span>  </span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!--int insertUser();--&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span>  </span><br><span class="line">		insert into t_user values(null,&#x27;张三&#x27;,&#x27;123&#x27;,23,&#x27;女&#x27;)  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="通过junit测试功能"><a href="#通过junit测试功能" class="headerlink" title="通过junit测试功能"></a>通过junit测试功能</h2><ul>
<li>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）</li>
<li>SqlSessionFactory：是“生产”SqlSession的“工厂”</li>
<li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertUser</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//读取MyBatis的核心配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取SqlSessionFactoryBuilder对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">        <span class="comment">//获取sqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span></span><br><span class="line">        <span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession();</span></span><br><span class="line">	    <span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交  </span></span><br><span class="line">		<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>); <span class="comment">//true自动提交事务</span></span><br><span class="line">        <span class="comment">//通过代理模式创建UserMapper接口的代理实现类对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insertUser();</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        <span class="comment">//sqlSession.commit();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>此时需要手动提交事务，如果要自动提交事务，则在获取sqlSession对象时，使用<code>SqlSession sqlSession = sqlSessionFactory.openSession(true);</code>，传入一个Boolean类型的参数，值为true，这样就可以自动提交</li>
</ul>
<h2 id="加入log4j日志功能"><a href="#加入log4j日志功能" class="headerlink" title="加入log4j日志功能"></a>加入log4j日志功能</h2><ol>
<li><p>加入依赖</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>加入log4j的配置文件</p>
<ul>
<li>log4j的配置文件名为log4j.xml，存放的位置是src&#x2F;main&#x2F;resources目录下</li>
<li>日志的级别：FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试) 从左到右打印的内容越来越详细</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<h1 id="核心配置文件详解"><a href="#核心配置文件详解" class="headerlink" title="核心配置文件详解"></a>核心配置文件详解</h1><blockquote>
<p>核心配置文件中的标签必须按照固定的顺序(有的标签可以不写，但顺序一定不能乱)：<br>properties、settings、typeAliases、typeHandlers、objectFactory、objectWrapperFactory、reflectorFactory、plugins、environments、databaseIdProvider、mappers</p>
</blockquote>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//MyBatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://MyBatis.org/dtd/MyBatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入properties文件，此时就可以$&#123;属性名&#125;的方式访问属性值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将表中字段的下划线自动转换为驼峰--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        typeAlias：设置某个具体的类型的别名</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">        type：需要设置别名的类型的全类名</span></span><br><span class="line"><span class="comment">        alias：设置此类型的别名，且别名不区分大小写。若不设置此属性，该类型拥有默认的别名，即类名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot; alias=&quot;user&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.bean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    environments：设置多个连接数据库的环境</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">	    default：设置默认使用的环境的id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        environment：设置具体的连接数据库的环境信息</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">	        id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，表示默认使用的环境</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            transactionManager：设置事务管理方式</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">	            type：设置事务管理方式，type=&quot;JDBC|MANAGED&quot;</span></span><br><span class="line"><span class="comment">	            type=&quot;JDBC&quot;：设置当前环境的事务管理都必须手动处理</span></span><br><span class="line"><span class="comment">	            type=&quot;MANAGED&quot;：设置事务被管理，例如spring中的AOP</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            dataSource：设置数据源</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">	            type：设置数据源的类型，type=&quot;POOLED|UNPOOLED|JNDI&quot;</span></span><br><span class="line"><span class="comment">	            type=&quot;POOLED&quot;：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建</span></span><br><span class="line"><span class="comment">	            type=&quot;UNPOOLED&quot;：不使用数据库连接池，即每次使用连接都需要重新创建</span></span><br><span class="line"><span class="comment">	            type=&quot;JNDI&quot;：调用上下文中的数据源</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置驱动类的全类名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;mapper resource=&quot;UserMapper.xml&quot;/&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        以包为单位，将包下所有的映射文件引入核心配置文件</span></span><br><span class="line"><span class="comment">        注意：</span></span><br><span class="line"><span class="comment">			1. 此方式必须保证mapper接口和mapper映射文件必须在相同的包下</span></span><br><span class="line"><span class="comment">			2. mapper接口要和mapper映射文件的名字一致</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><img lazyload src="/images/loading.svg" data-src="/Resources/mapper%E6%8E%A5%E5%8F%A3%E5%92%8Cmapper%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E5%9C%A8%E5%90%8C%E4%B8%80%E5%8C%85%E4%B8%8B.png"></li>
</ul>
<h1 id="默认的类型别名"><a href="#默认的类型别名" class="headerlink" title="默认的类型别名"></a>默认的类型别名</h1><p><img lazyload src="/images/loading.svg" data-src="/Resources/%E9%BB%98%E8%AE%A4%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D1.png"><br><img lazyload src="/images/loading.svg" data-src="/Resources/%E9%BB%98%E8%AE%A4%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D2.png"></p>
<h1 id="MyBatis的增删改查"><a href="#MyBatis的增删改查" class="headerlink" title="MyBatis的增删改查"></a>MyBatis的增删改查</h1><ol>
<li><p>添加</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">	insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>删除</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteUser();--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">     delete from t_user where id = 6</span><br><span class="line"> <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int updateUser();--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">     update t_user set username = &#x27;张三&#x27; where id = 5</span><br><span class="line"> <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查询一个实体类对象</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById();--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span>  </span><br><span class="line">	select * from t_user where id = 2  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查询集合</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<ul>
<li><p>注意：</p>
<ol>
<li>查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射关系  <ul>
<li>resultType：自动映射，用于属性名和表中字段名一致的情况  </li>
<li>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</li>
</ul>
</li>
<li>当查询的数据为多条时，不能使用实体类作为返回值，只能使用集合，否则会抛出异常TooManyResultsException；但是若查询的数据只有一条，可以使用实体类或集合作为返回值</li>
</ol>
</li>
</ul>
<h1 id="MyBatis获取参数值的两种方式（重点）"><a href="#MyBatis获取参数值的两种方式（重点）" class="headerlink" title="MyBatis获取参数值的两种方式（重点）"></a>MyBatis获取参数值的两种方式（重点）</h1><ul>
<li>MyBatis获取参数值的两种方式：${}和#{}  </li>
<li>${}的本质就是字符串拼接，#{}的本质就是占位符赋值  </li>
<li>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号；但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</li>
</ul>
<h2 id="单个字面量类型的参数"><a href="#单个字面量类型的参数" class="headerlink" title="单个字面量类型的参数"></a>单个字面量类型的参数</h2><ul>
<li>若mapper接口中的方法参数为单个的字面量类型，此时可以使用${}和#{}以任意的名称（最好见名识意）获取参数的值，注意${}需要手动加单引号</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserByUsername(String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserByUsername(String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>  </span><br><span class="line">	select * from t_user where username = &#x27;$&#123;username&#125;&#x27;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="多个字面量类型的参数"><a href="#多个字面量类型的参数" class="headerlink" title="多个字面量类型的参数"></a>多个字面量类型的参数</h2><ul>
<li><p>若mapper接口中的方法参数为多个时，此时MyBatis会自动将这些参数放在一个map集合中</p>
<ol>
<li>以arg0,arg1…为键，以参数为值；</li>
<li>以param1,param2…为键，以参数为值；</li>
</ol>
</li>
<li><p>因此只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号。</p>
</li>
<li><p>使用arg或者param都行，要注意的是，arg是从arg0开始的，param是从param1开始的</p>
</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLogin(String username,String password);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>  </span><br><span class="line">	select * from t_user where username = #&#123;arg0&#125; and password = #&#123;arg1&#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLogin(String username,String password);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username = &#x27;$&#123;param1&#125;&#x27; and password = &#x27;$&#123;param2&#125;&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="map集合类型的参数"><a href="#map集合类型的参数" class="headerlink" title="map集合类型的参数"></a>map集合类型的参数</h2><ul>
<li>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在map中只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLoginByMap(Map&lt;String,Object&gt; map);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLoginByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkLoginByMap</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">	Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">	map.put(<span class="string">&quot;usermane&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">	map.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">	<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.checkLoginByMap(map);</span><br><span class="line">	System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="实体类类型的参数"><a href="#实体类类型的参数" class="headerlink" title="实体类类型的参数"></a>实体类类型的参数</h2><ul>
<li>若mapper接口中的方法参数为实体类对象时此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">	insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">	<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">12</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>);</span><br><span class="line">	mapper.insertUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="使用-Param标识参数"><a href="#使用-Param标识参数" class="headerlink" title="使用@Param标识参数"></a>使用@Param标识参数</h2><ul>
<li><p>可以通过@Param注解标识mapper接口中的方法参数，此时，会将这些参数放在map集合中 </p>
<ol>
<li>以@Param注解的value属性值为键，以参数为值；</li>
<li>以param1,param2…为键，以参数为值；</li>
</ol>
</li>
<li><p>只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p>
</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User CheckLoginByParam(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;) String password);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;CheckLoginByParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkLoginByParam</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">	mapper.CheckLoginByParam(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>建议分成两种情况进行处理</p>
<ol>
<li>实体类类型的参数</li>
<li>使用@Param标识参数</li>
</ol>
</li>
</ul>
<h1 id="MyBatis的各种查询功能"><a href="#MyBatis的各种查询功能" class="headerlink" title="MyBatis的各种查询功能"></a>MyBatis的各种查询功能</h1><ol>
<li>如果查询出的数据只有一条，可以通过<ol>
<li>实体类对象接收</li>
<li>List集合接收</li>
<li>Map集合接收，结果<code>&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;</code></li>
</ol>
</li>
<li>如果查询出的数据有多条，一定不能用实体类对象接收，会抛异常TooManyResultsException，可以通过<ol>
<li>实体类类型的LIst集合接收</li>
<li>Map类型的LIst集合接收</li>
<li>在mapper接口的方法上添加@MapKey注解</li>
</ol>
</li>
</ol>
<h2 id="查询一个实体类对象"><a href="#查询一个实体类对象" class="headerlink" title="查询一个实体类对象"></a>查询一个实体类对象</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户id查询用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="查询一个List集合"><a href="#查询一个List集合" class="headerlink" title="查询一个List集合"></a>查询一个List集合</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="查询单个数据"><a href="#查询单个数据" class="headerlink" title="查询单个数据"></a>查询单个数据</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 查询用户的总记录数  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> * 在MyBatis中，对于Java中常用的类型都设置了类型别名  </span></span><br><span class="line"><span class="comment"> * 例如：java.lang.Integer--&gt;int|integer  </span></span><br><span class="line"><span class="comment"> * 例如：int--&gt;_int|_integer  </span></span><br><span class="line"><span class="comment"> * 例如：Map--&gt;map,List--&gt;list  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int getCount();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;_integer&quot;</span>&gt;</span></span><br><span class="line">	select count(id) from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="查询一条数据为map集合"><a href="#查询一条数据为map集合" class="headerlink" title="查询一条数据为map集合"></a>查询一条数据为map集合</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 根据用户id查询用户信息为map集合  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getUserToMap</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getUserToMap(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--结果：&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;--&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="查询多条数据为map集合"><a href="#查询多条数据为map集合" class="headerlink" title="查询多条数据为map集合"></a>查询多条数据为map集合</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 查询所有用户信息为map集合  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此时可以将这些map放在一个list集合中获取  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span>  </span><br><span class="line">	select * from t_user  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	结果：</span></span><br><span class="line"><span class="comment">	[&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">	&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">	&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;]</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并且最终要以一个map的方式返回数据，此时需要通过<span class="doctag">@MapKey</span>注解设置map集合的键，值是每条数据所对应的map集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	结果：</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">	1=&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">	2=&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">	3=&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="特殊SQL的执行"><a href="#特殊SQL的执行" class="headerlink" title="特殊SQL的执行"></a>特殊SQL的执行</h1><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户名进行模糊查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.User&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/26 21:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByLike</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username)</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByLike(@Param(&quot;username&quot;) String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;--&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!--select * from t_user where username like concat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)--&gt;</span>  </span><br><span class="line">	select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>其中<code>select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</code>是最常用的</li>
</ul>
<h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><ul>
<li>只能使用${}，如果使用#{}，则解析后的sql语句为<code>delete from t_user where id in (&#39;1,2,3&#39;)</code>，这样是将<code>1,2,3</code>看做是一个整体，只有id为<code>1,2,3</code>的数据会被删除。正确的语句应该是<code>delete from t_user where id in (1,2,3)</code>，或者<code>delete from t_user where id in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;)</code></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id批量删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/26 22:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteMore</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> String ids)</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMore&quot;</span>&gt;</span></span><br><span class="line">	delete from t_user where id in ($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteMore</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">SQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SQLMapper.class);</span><br><span class="line">	<span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.deleteMore(<span class="string">&quot;1,2,3,8&quot;</span>);</span><br><span class="line">	System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="动态设置表名"><a href="#动态设置表名" class="headerlink" title="动态设置表名"></a>动态设置表名</h2><ul>
<li>只能使用${}，因为表名不能加单引号</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询指定表中的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tableName </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.User&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 14:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByTable</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByTable(@Param(&quot;tableName&quot;) String tableName);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByTable&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from $&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="添加功能获取自增的主键"><a href="#添加功能获取自增的主键" class="headerlink" title="添加功能获取自增的主键"></a>添加功能获取自增的主键</h2><ul>
<li><p>使用场景(一对多)</p>
</li>
<li><p>t_clazz(clazz_id,clazz_name)  </p>
<ul>
<li>t_student(student_id,student_name,clazz_id)</li>
</ul>
<ol>
<li>添加班级信息  </li>
<li>获取新添加的班级的id  </li>
<li>为班级分配学生，即将某学的班级id修改为新添加的班级的id</li>
</ol>
</li>
<li><p>在mapper.xml中设置两个属性</p>
</li>
<li><p>useGeneratedKeys：设置使用自增的主键  </p>
<ul>
<li>keyProperty：因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参数user对象的某个属性中</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 15:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--void insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">	insert into t_user values (null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">SQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SQLMapper.class);</span><br><span class="line">	<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>, <span class="string">&quot;ton&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;123@321.com&quot;</span>);</span><br><span class="line">	mapper.insertUser(user);</span><br><span class="line">	System.out.println(user);</span><br><span class="line">	<span class="comment">//输出：user&#123;id=10, username=&#x27;ton&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@321.com&#x27;&#125;，自增主键存放到了user的id属性中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="自定义映射resultMap"><a href="#自定义映射resultMap" class="headerlink" title="自定义映射resultMap"></a>自定义映射resultMap</h1><h2 id="resultMap处理字段和属性的映射关系"><a href="#resultMap处理字段和属性的映射关系" class="headerlink" title="resultMap处理字段和属性的映射关系"></a>resultMap处理字段和属性的映射关系</h2><ul>
<li>resultMap：设置自定义映射  </li>
<li>属性：  <ul>
<li>id：表示自定义映射的唯一标识，不能重复，主键的</li>
<li>type：查询的数据要映射的实体类的类型  </li>
<li>子标签：  </li>
<li>id：设置主键的映射关系  <ul>
<li>result：设置普通字段的映射关系  </li>
<li>子标签属性：  </li>
<li>property：设置映射关系中实体类中的属性名  <ul>
<li>column：设置映射关系中表中的字段名</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射，即使字段名和属性名一致的属性也要映射，也就是全部属性都要列出来</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getAllEmp();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用_），实体类中的属性名符合Java的规则（使用驼峰）。此时也可通过以下两种方式处理字段名和实体类中的属性的映射关系  </p>
<ol>
<li>可以通过为字段起别名的方式，保证和实体类中的属性名保持一致   <div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getAllEmp();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select eid,emp_name empName,age,sex,email from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li>可以在MyBatis的核心配置文件中的<code>setting</code>标签中，设置一个全局配置信息mapUnderscoreToCamelCase，可以在查询表中数据时，自动将_类型的字段名转换为驼峰，例如：字段名user_name，设置了mapUnderscoreToCamelCase，此时字段名就会转换为userName。<a href="#%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3">核心配置文件详解</a> <div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
</ul>
<h2 id="多对一映射处理"><a href="#多对一映射处理" class="headerlink" title="多对一映射处理"></a>多对一映射处理</h2><blockquote>
<p>查询员工信息以及员工所对应的部门信息</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;  </span><br><span class="line">	<span class="keyword">private</span> Integer eid;  </span><br><span class="line">	<span class="keyword">private</span> String empName;  </span><br><span class="line">	<span class="keyword">private</span> Integer age;  </span><br><span class="line">	<span class="keyword">private</span> String sex;  </span><br><span class="line">	<span class="keyword">private</span> String email;  </span><br><span class="line">	<span class="keyword">private</span> Dept dept;</span><br><span class="line">	<span class="comment">//...构造器、get、set方法等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="级联方式处理映射关系"><a href="#级联方式处理映射关系" class="headerlink" title="级联方式处理映射关系"></a>级联方式处理映射关系</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;)Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="使用association处理映射关系"><a href="#使用association处理映射关系" class="headerlink" title="使用association处理映射关系"></a>使用association处理映射关系</h3><ul>
<li>association：处理多对一的映射关系</li>
<li>property：需要处理多对的映射关系的属性名</li>
<li>javaType：该属性的类型</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;)Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="分步查询"><a href="#分步查询" class="headerlink" title="分步查询"></a>分步查询</h3><h4 id="1-查询员工信息"><a href="#1-查询员工信息" class="headerlink" title="1. 查询员工信息"></a>1. 查询员工信息</h4><ul>
<li>select：设置分布查询的sql的唯一标识（namespace.SQLId或mapper接口的全类名.方法名）</li>
<li>column：设置分步查询的条件</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//EmpMapper里的方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，员工及所对应的部门信息</span></span><br><span class="line"><span class="comment"> * 分步查询第一步：查询员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.atguigu.mybatis.pojo.Emp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 20:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Emp <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">(<span class="meta">@Param(&quot;eid&quot;)</span> Integer eid)</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">				 <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">				 <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDeptByStepOne(@Param(&quot;eid&quot;) Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp where eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="2-查询部门信息"><a href="#2-查询部门信息" class="headerlink" title="2. 查询部门信息"></a>2. 查询部门信息</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DeptMapper里的方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，员工及所对应的部门信息</span></span><br><span class="line"><span class="comment"> * 分步查询第二步：通过did查询员工对应的部门信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.atguigu.mybatis.pojo.Emp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 20:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Dept <span class="title function_">getEmpAndDeptByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--此处的resultMap仅是处理字段和属性的映射关系--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getEmpAndDeptByStepTwo(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepTwo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="一对多映射处理"><a href="#一对多映射处理" class="headerlink" title="一对多映射处理"></a>一对多映射处理</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer did;</span><br><span class="line">    <span class="keyword">private</span> String deptName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Emp&gt; emps;</span><br><span class="line">	<span class="comment">//...构造器、get、set方法等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h3><ul>
<li>collection：用来处理一对多的映射关系</li>
<li>ofType：表示该属性对饮的集合中存储的数据的类型</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmp(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_dept left join t_emp on t_dept.did = t_emp.did where t_dept.did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="分步查询-1"><a href="#分步查询-1" class="headerlink" title="分步查询"></a>分步查询</h3><h4 id="1-查询部门信息"><a href="#1-查询部门信息" class="headerlink" title="1. 查询部门信息"></a>1. 查询部门信息</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，查询部门及对应的所有员工信息</span></span><br><span class="line"><span class="comment"> * 分步查询第一步：查询部门信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> did </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.atguigu.mybatis.pojo.Dept</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 22:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Dept <span class="title function_">getDeptAndEmpByStepOne</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpByStepOneResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span></span></span><br><span class="line"><span class="tag">				<span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">				<span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmpByStepOne(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpByStepOneResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="2-根据部门id查询部门中的所有员工"><a href="#2-根据部门id查询部门中的所有员工" class="headerlink" title="2. 根据部门id查询部门中的所有员工"></a>2. 根据部门id查询部门中的所有员工</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，查询部门及对应的所有员工信息</span></span><br><span class="line"><span class="comment"> * 分步查询第二步：根据部门id查询部门中的所有员工</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> did</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.Emp&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 22:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getDeptAndEmpByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getDeptAndEmpByStepTwo(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><ul>
<li>分步查询的优点：可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息：</li>
<li>lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载  <ul>
<li>aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载</li>
</ul>
</li>
<li>此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。此时可通过association和collection中的fetchType属性设置当前的分步查询是否使用延迟加载，fetchType&#x3D;”lazy(延迟加载)|eager(立即加载)”</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">	<span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> mapper.getEmpAndDeptByStepOne(<span class="number">1</span>);</span><br><span class="line">	System.out.println(emp.getEmpName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>关闭延迟加载，两条SQL语句都运行了<img lazyload src="/images/loading.svg" data-src="/Resources/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E6%B5%8B%E8%AF%951.png"></li>
<li>开启延迟加载，只运行获取emp的SQL语句<br><img lazyload src="/images/loading.svg" data-src="/Resources/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E6%B5%8B%E8%AF%952.png"></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">	<span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> mapper.getEmpAndDeptByStepOne(<span class="number">1</span>);</span><br><span class="line">	System.out.println(emp.getEmpName());</span><br><span class="line">	System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">	System.out.println(emp.getDept());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>开启后，需要用到查询dept的时候才会调用相应的SQL语句<img lazyload src="/images/loading.svg" data-src="/Resources/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E6%B5%8B%E8%AF%953.png"></p>
</li>
<li><p>fetchType：当开启了全局的延迟加载之后，可以通过该属性手动控制延迟加载的效果，fetchType&#x3D;”lazy(延迟加载)|eager(立即加载)”</p>
  <div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">				 <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">				 <span class="attr">column</span>=<span class="string">&quot;did&quot;</span></span></span><br><span class="line"><span class="tag">				 <span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><ul>
<li>Mybatis框架的动态SQL技术是一种根据特定条件动态拼装SQL语句的功能，它存在的意义是为了解决拼接SQL语句字符串时的痛点问题</li>
</ul>
<h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><ul>
<li>if标签可通过test属性（即传递过来的数据）的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中的内容不会执行</li>
<li>在where后面添加一个恒成立条件<code>1=1</code></li>
<li>这个恒成立条件并不会影响查询的结果<ul>
<li>这个<code>1=1</code>可以用来拼接<code>and</code>语句，例如：当empName为null时</li>
<li>如果不加上恒成立条件，则SQL语句为<code>select * from t_emp where and age = ? and sex = ? and email = ?</code>，此时<code>where</code>会与<code>and</code>连用，SQL语句会报错<ul>
<li>如果加上一个恒成立条件，则SQL语句为<code>select * from t_emp where 1= 1 and age = ? and sex = ? and email = ?</code>，此时不报错</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp where 1=1</span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">		and emp_name = #&#123;empName&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">		and age = #&#123;age&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">		and sex = #&#123;sex&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">		and email = #&#123;email&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><ul>
<li>where和if一般结合使用：</li>
<li>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字  <ul>
<li>若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的and&#x2F;or去掉</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp</span><br><span class="line">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			emp_name = #&#123;empName&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			and age = #&#123;age&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			and sex = #&#123;sex&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			and email = #&#123;email&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>注意：where标签不能去掉条件后多余的and&#x2F;or</p>
  <div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--这种用法是错误的，只能去掉条件前面的and/or，条件后面的不行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp_name = #&#123;empName&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">	age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><ul>
<li>trim用于去掉或添加标签中的内容  </li>
<li>常用属性</li>
<li>prefix：在trim标签中的内容的前面添加某些内容  <ul>
<li>suffix：在trim标签中的内容的后面添加某些内容 </li>
<li>prefixOverrides：在trim标签中的内容的前面去掉某些内容  </li>
<li>suffixOverrides：在trim标签中的内容的后面去掉某些内容</li>
</ul>
</li>
<li>若trim中的标签都不满足条件，则trim标签没有任何效果，也就是只剩下<code>select * from t_emp</code></li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp</span><br><span class="line">	<span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			emp_name = #&#123;empName&#125; and</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			age = #&#123;age&#125; and</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			sex = #&#123;sex&#125; or</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			email = #&#123;email&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpByCondition</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">	List&lt;Emp&gt; emps= mapper.getEmpByCondition(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>));</span><br><span class="line">	System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/Resources/trim%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png"></p>
<h2 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h2><ul>
<li><code>choose、when、otherwise</code>相当于<code>if...else if..else</code></li>
<li>when至少要有一个，otherwise至多只有一个</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp</span><br><span class="line">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">				emp_name = #&#123;empName&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">				age = #&#123;age&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">				sex = #&#123;sex&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">				email = #&#123;email&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">				did = 1</span><br><span class="line">			<span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpByChoose</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">	List&lt;Emp&gt; emps = mapper.getEmpByChoose(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;123@qq.com&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">	System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/Resources/choose%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png"></p>
<ul>
<li>相当于<code>if a else if b else if c else d</code>，只会执行其中一个</li>
</ul>
<h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><ul>
<li><p>属性：  </p>
</li>
<li><p>collection：设置要循环的数组或集合  </p>
<ul>
<li>item：表示集合或数组中的每一个数据  </li>
<li>separator：设置循环体之间的分隔符，分隔符前后默认有一个空格，如<code>,</code></li>
<li>open：设置foreach标签中的内容的开始符  </li>
<li>close：设置foreach标签中的内容的结束符</li>
</ul>
</li>
<li><p>批量删除</p>
  <div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteMoreByArray(Integer[] eids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByArray&quot;</span>&gt;</span></span><br><span class="line">	delete from t_emp where eid in</span><br><span class="line">	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">		#&#123;eid&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
  <div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteMoreByArray</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">	<span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.deleteMoreByArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;);</span><br><span class="line">	System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="/Resources/foreach%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C1.png"></p>
<ul>
<li><p>批量添加</p>
  <div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertMoreByList(@Param(&quot;emps&quot;) List&lt;Emp&gt; emps);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreByList&quot;</span>&gt;</span></span><br><span class="line">	insert into t_emp values</span><br><span class="line">	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">		(null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
  <div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertMoreByList</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">		<span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">		<span class="type">Emp</span> <span class="variable">emp1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">		<span class="type">Emp</span> <span class="variable">emp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;b&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">		<span class="type">Emp</span> <span class="variable">emp3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;c&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">		List&lt;Emp&gt; emps = Arrays.asList(emp1, emp2, emp3);</span><br><span class="line">		<span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.insertMoreByList(emps);</span><br><span class="line">		System.out.println(result);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">![](Resources/foreach测试结果<span class="number">2.</span>png)</span><br><span class="line"></span><br><span class="line">## SQL片段</span><br><span class="line"></span><br><span class="line">- sql片段，可以记录一段公共sql片段，在使用的地方通过include标签进行引入</span><br><span class="line">- 声明sql片段：`&lt;sql&gt;`标签</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;sql id=<span class="string">&quot;empColumns&quot;</span>&gt;eid,emp_name,age,sex,email&lt;/sql&gt;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>引用sql片段：<code>&lt;include&gt;</code>标签</p>
</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="MyBatis的缓存"><a href="#MyBatis的缓存" class="headerlink" title="MyBatis的缓存"></a>MyBatis的缓存</h1><h2 id="MyBatis的一级缓存"><a href="#MyBatis的一级缓存" class="headerlink" title="MyBatis的一级缓存"></a>MyBatis的一级缓存</h2><ul>
<li><p>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问  </p>
</li>
<li><p>使一级缓存失效的四种情况：  </p>
<ol>
<li>不同的SqlSession对应不同的一级缓存  </li>
<li>同一个SqlSession但是查询条件不同</li>
<li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li>
<li>同一个SqlSession两次查询期间手动清空了缓存</li>
</ol>
</li>
</ul>
<h2 id="MyBatis的二级缓存"><a href="#MyBatis的二级缓存" class="headerlink" title="MyBatis的二级缓存"></a>MyBatis的二级缓存</h2><ul>
<li><p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取  </p>
</li>
<li><p>二级缓存开启的条件</p>
<ol>
<li>在核心配置文件中，设置全局配置属性cacheEnabled&#x3D;”true”，默认为true，不需要设置</li>
<li>在映射文件中设置标签<cache></cache></li>
<li>二级缓存必须在SqlSession关闭或提交之后有效</li>
<li>查询的数据所转换的实体类类型必须实现序列化的接口</li>
</ol>
</li>
<li><p>使二级缓存失效的情况：两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p>
</li>
</ul>
<h2 id="二级缓存的相关配置"><a href="#二级缓存的相关配置" class="headerlink" title="二级缓存的相关配置"></a>二级缓存的相关配置</h2><ul>
<li>在mapper配置文件中添加的cache标签可以设置一些属性</li>
<li>eviction属性：缓存回收策略  </li>
<li>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。  <ul>
<li>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。  </li>
<li>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。  </li>
<li>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</li>
<li>默认的是 LRU</li>
</ul>
</li>
<li>flushInterval属性：刷新间隔，单位毫秒</li>
<li>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句（增删改）时刷新</li>
<li>size属性：引用数目，正整数</li>
<li>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li>
<li>readOnly属性：只读，true&#x2F;false</li>
<li>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。  <ul>
<li>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false</li>
</ul>
</li>
</ul>
<h2 id="MyBatis缓存查询的顺序"><a href="#MyBatis缓存查询的顺序" class="headerlink" title="MyBatis缓存查询的顺序"></a>MyBatis缓存查询的顺序</h2><ul>
<li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用  </li>
<li>如果二级缓存没有命中，再查询一级缓存  </li>
<li>如果一级缓存也没有命中，则查询数据库  </li>
<li>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</li>
</ul>
<h2 id="整合第三方缓存EHCache（了解）"><a href="#整合第三方缓存EHCache（了解）" class="headerlink" title="整合第三方缓存EHCache（了解）"></a>整合第三方缓存EHCache（了解）</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="各个jar包的功能"><a href="#各个jar包的功能" class="headerlink" title="各个jar包的功能"></a>各个jar包的功能</h3><table>
<thead>
<tr>
<th>jar包名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>mybatis-ehcache</td>
<td>Mybatis和EHCache的整合包</td>
</tr>
<tr>
<td>ehcache</td>
<td>EHCache核心包</td>
</tr>
<tr>
<td>slf4j-api</td>
<td>SLF4J日志门面包</td>
</tr>
<tr>
<td>logback-classic</td>
<td>支持SLF4J门面接口的一个具体实现</td>
</tr>
</tbody></table>
<h3 id="创建EHCache的配置文件ehcache-xml"><a href="#创建EHCache的配置文件ehcache-xml" class="headerlink" title="创建EHCache的配置文件ehcache.xml"></a>创建EHCache的配置文件ehcache.xml</h3><ul>
<li>名字必须叫<code>ehcache.xml</code></li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 磁盘保存路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\atguigu\ehcache&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="设置二级缓存的类型"><a href="#设置二级缓存的类型" class="headerlink" title="设置二级缓存的类型"></a>设置二级缓存的类型</h3><ul>
<li>在xxxMapper.xml文件中设置二级缓存类型</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="加入logback日志"><a href="#加入logback日志" class="headerlink" title="加入logback日志"></a>加入logback日志</h3><ul>
<li>存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。创建logback的配置文件<code>logback.xml</code>，名字固定，不可改变</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="EHCache配置文件说明"><a href="#EHCache配置文件说明" class="headerlink" title="EHCache配置文件说明"></a>EHCache配置文件说明</h3><table>
<thead>
<tr>
<th>属性名</th>
<th>是否必须</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>maxElementsInMemory</td>
<td>是</td>
<td>在内存中缓存的element的最大数目</td>
</tr>
<tr>
<td>maxElementsOnDisk</td>
<td>是</td>
<td>在磁盘上缓存的element的最大数目，若是0表示无穷大</td>
</tr>
<tr>
<td>eternal</td>
<td>是</td>
<td>设定缓存的elements是否永远不过期。 如果为true，则缓存的数据始终有效， 如果为false那么还要根据timeToIdleSeconds、timeToLiveSeconds判断</td>
</tr>
<tr>
<td>overflowToDisk</td>
<td>是</td>
<td>设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</td>
</tr>
<tr>
<td>timeToIdleSeconds</td>
<td>否</td>
<td>当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时， 这些数据便会删除，默认值是0,也就是可闲置时间无穷大</td>
</tr>
<tr>
<td>timeToLiveSeconds</td>
<td>否</td>
<td>缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</td>
</tr>
<tr>
<td>diskSpoolBufferSizeMB</td>
<td>否</td>
<td>DiskStore(磁盘缓存)的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区</td>
</tr>
<tr>
<td>diskPersistent</td>
<td>否</td>
<td>在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false</td>
</tr>
<tr>
<td>diskExpiryThreadIntervalSeconds</td>
<td>否</td>
<td>磁盘缓存的清理线程运行间隔，默认是120秒。每个120s， 相应的线程会进行一次EhCache中数据的清理工作</td>
</tr>
<tr>
<td>memoryStoreEvictionPolicy</td>
<td>否</td>
<td>当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。 默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出</td>
</tr>
</tbody></table>
<h1 id="MyBatis的逆向工程"><a href="#MyBatis的逆向工程" class="headerlink" title="MyBatis的逆向工程"></a>MyBatis的逆向工程</h1><ul>
<li>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的</li>
<li>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：  </li>
<li>Java实体类  <ul>
<li>Mapper接口  </li>
<li>Mapper映射文件</li>
</ul>
</li>
</ul>
<h2 id="创建逆向工程的步骤"><a href="#创建逆向工程的步骤" class="headerlink" title="创建逆向工程的步骤"></a>创建逆向工程的步骤</h2><h3 id="添加依赖和插件"><a href="#添加依赖和插件" class="headerlink" title="添加依赖和插件"></a>添加依赖和插件</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- MyBatis核心依赖包 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 构建过程中用到的插件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="创建MyBatis的核心配置文件-1"><a href="#创建MyBatis的核心配置文件-1" class="headerlink" title="创建MyBatis的核心配置文件"></a>创建MyBatis的核心配置文件</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="创建逆向工程的配置文件"><a href="#创建逆向工程的配置文件" class="headerlink" title="创建逆向工程的配置文件"></a>创建逆向工程的配置文件</h3><ul>
<li>文件名必须是：<code>generatorConfig.xml</code></li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">    MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span></span><br><span class="line"><span class="comment">    MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- javaBean的生成策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.pojo&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Emp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Dept&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="执行MBG插件的generate目标"><a href="#执行MBG插件的generate目标" class="headerlink" title="执行MBG插件的generate目标"></a>执行MBG插件的generate目标</h3><ul>
<li><img lazyload src="/images/loading.svg" data-src="/Resources/%E6%89%A7%E8%A1%8CMBG%E6%8F%92%E4%BB%B6%E7%9A%84generate%E7%9B%AE%E6%A0%87.png"></li>
<li>如果出现报错：<code>Exception getting JDBC Driver</code>，可能是pom.xml中，数据库驱动配置错误</li>
<li>dependency中的驱动<img lazyload src="/images/loading.svg" data-src="/Resources/dependency%E4%B8%AD%E7%9A%84%E9%A9%B1%E5%8A%A8.png"><ul>
<li>mybatis-generator-maven-plugin插件中的驱动<img lazyload src="/images/loading.svg" data-src="/Resources/%E6%8F%92%E4%BB%B6%E4%B8%AD%E7%9A%84%E9%A9%B1%E5%8A%A8.png"></li>
<li>两者的驱动版本应该相同</li>
</ul>
</li>
<li>执行结果<img lazyload src="/images/loading.svg" data-src="/Resources/%E9%80%86%E5%90%91%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></li>
</ul>
<h2 id="QBC"><a href="#QBC" class="headerlink" title="QBC"></a>QBC</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul>
<li><code>selectByExample</code>：按条件查询，需要传入一个example对象或者null；如果传入一个null，则表示没有条件，也就是查询所有数据</li>
<li><code>example.createCriteria().xxx</code>：创建条件对象，通过andXXX方法为SQL添加查询添加，每个条件之间是and关系</li>
<li><code>example.or().xxx</code>：将之前添加的条件通过or拼接其他条件<br><img lazyload src="/images/loading.svg" data-src="/Resources/example%E7%9A%84%E6%96%B9%E6%B3%95.png"></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMBG</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">	<span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">	<span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">	<span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">	<span class="type">EmpExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpExample</span>();</span><br><span class="line">	<span class="comment">//名字为张三，且年龄大于等于20</span></span><br><span class="line">	example.createCriteria().andEmpNameEqualTo(<span class="string">&quot;张三&quot;</span>).andAgeGreaterThanOrEqualTo(<span class="number">20</span>);</span><br><span class="line">	<span class="comment">//或者did不为空</span></span><br><span class="line">	example.or().andDidIsNotNull();</span><br><span class="line">	List&lt;Emp&gt; emps = mapper.selectByExample(example);</span><br><span class="line">	emps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/Resources/example%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png"></p>
<h3 id="增改"><a href="#增改" class="headerlink" title="增改"></a>增改</h3><ul>
<li><code>updateByPrimaryKey</code>：通过主键进行数据修改，如果某一个值为null，也会将对应的字段改为null</li>
<li><code>mapper.updateByPrimaryKey(new Emp(1,&quot;admin&quot;,22,null,&quot;456@qq.com&quot;,3));</code><ul>
<li><img lazyload src="/images/loading.svg" data-src="/Resources/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C1.png"></li>
</ul>
</li>
<li><code>updateByPrimaryKeySelective()</code>：通过主键进行选择性数据修改，如果某个值为null，则不修改这个字段</li>
<li><code>mapper.updateByPrimaryKeySelective(new Emp(2,&quot;admin2&quot;,22,null,&quot;456@qq.com&quot;,3));</code><ul>
<li><img lazyload src="/images/loading.svg" data-src="/Resources/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C2.png"></li>
</ul>
</li>
</ul>
<h1 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h1><h2 id="分页插件使用步骤"><a href="#分页插件使用步骤" class="headerlink" title="分页插件使用步骤"></a>分页插件使用步骤</h2><h3 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="配置分页插件"><a href="#配置分页插件" class="headerlink" title="配置分页插件"></a>配置分页插件</h3><ul>
<li>在MyBatis的核心配置文件（mybatis-config.xml）中配置插件</li>
<li><img lazyload src="/images/loading.svg" data-src="/Resources/%E9%85%8D%E7%BD%AE%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6.png"></li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--设置分页插件--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="分页插件的使用"><a href="#分页插件的使用" class="headerlink" title="分页插件的使用"></a>分页插件的使用</h2><h3 id="开启分页功能"><a href="#开启分页功能" class="headerlink" title="开启分页功能"></a>开启分页功能</h3><ul>
<li>在查询功能之前使用<code>PageHelper.startPage(int pageNum, int pageSize)</code>开启分页功能</li>
<li>pageNum：当前页的页码  <ul>
<li>pageSize：每页显示的条数</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">	<span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">	<span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">	<span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">	<span class="comment">//访问第一页，每页四条数据</span></span><br><span class="line">	PageHelper.startPage(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">	List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">	emps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/Resources/%E5%88%86%E9%A1%B5%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png"></p>
<h3 id="分页相关数据"><a href="#分页相关数据" class="headerlink" title="分页相关数据"></a>分页相关数据</h3><h4 id="方法一：直接输出"><a href="#方法一：直接输出" class="headerlink" title="方法一：直接输出"></a>方法一：直接输出</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">	<span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">	<span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">	<span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">	<span class="comment">//访问第一页，每页四条数据</span></span><br><span class="line">	Page&lt;Object&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">	List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">	<span class="comment">//在查询到List集合后，打印分页数据</span></span><br><span class="line">	System.out.println(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>分页相关数据：</p>
  <div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Page&#123;count=true, pageNum=1, pageSize=4, startRow=0, endRow=4, total=8, pages=2, reasonable=false, pageSizeZero=false&#125;[Emp&#123;eid=1, empName=&#x27;admin&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=2, empName=&#x27;admin2&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=3, empName=&#x27;王五&#x27;, age=12, sex=&#x27;女&#x27;, email=&#x27;123@qq.com&#x27;, did=3&#125;, Emp&#123;eid=4, empName=&#x27;赵六&#x27;, age=32, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;, did=1&#125;]</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="方法二使用PageInfo"><a href="#方法二使用PageInfo" class="headerlink" title="方法二使用PageInfo"></a>方法二使用PageInfo</h4><ul>
<li>在查询获取list集合之后，使用<code>PageInfo&lt;T&gt; pageInfo = new PageInfo&lt;&gt;(List&lt;T&gt; list, intnavigatePages)</code>获取分页相关数据</li>
<li>list：分页之后的数据  <ul>
<li>navigatePages：导航分页的页码数</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">	<span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">	<span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">	<span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">	PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">	List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">	PageInfo&lt;Emp&gt; page = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(emps,<span class="number">5</span>);</span><br><span class="line">	System.out.println(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>分页相关数据：</p>
  <div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">PageInfo&#123;</span><br><span class="line">pageNum=1, pageSize=4, size=4, startRow=1, endRow=4, total=8, pages=2, </span><br><span class="line">list=Page&#123;count=true, pageNum=1, pageSize=4, startRow=0, endRow=4, total=8, pages=2, reasonable=false, pageSizeZero=false&#125;[Emp&#123;eid=1, empName=&#x27;admin&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=2, empName=&#x27;admin2&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=3, empName=&#x27;王五&#x27;, age=12, sex=&#x27;女&#x27;, email=&#x27;123@qq.com&#x27;, did=3&#125;, Emp&#123;eid=4, empName=&#x27;赵六&#x27;, age=32, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;, did=1&#125;], </span><br><span class="line">prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=5, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>其中list中的数据等同于方法一中直接输出的page数据</p>
</li>
</ul>
<h4 id="常用数据："><a href="#常用数据：" class="headerlink" title="常用数据："></a>常用数据：</h4><ul>
<li>pageNum：当前页的页码  </li>
<li>pageSize：每页显示的条数  </li>
<li>size：当前页显示的真实条数  </li>
<li>total：总记录数  </li>
<li>pages：总页数  </li>
<li>prePage：上一页的页码  </li>
<li>nextPage：下一页的页码</li>
<li>isFirstPage&#x2F;isLastPage：是否为第一页&#x2F;最后一页  </li>
<li>hasPreviousPage&#x2F;hasNextPage：是否存在上一页&#x2F;下一页  </li>
<li>navigatePages：导航分页的页码数  </li>
<li>navigatepageNums：导航分页的页码，[1,2,3,4,5]</li>
</ul>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-vue全栈开发之Axios篇</title>
    <url>/2023/08/17/SpringBoot-vue%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B9%8BAxios%E7%AF%87/</url>
    <content><![CDATA[<h1 id="一、Axios的使用"><a href="#一、Axios的使用" class="headerlink" title="一、Axios的使用"></a>一、Axios的使用</h1><h2 id="1-1-Axios简介"><a href="#1-1-Axios简介" class="headerlink" title="1.1 Axios简介"></a>1.1 Axios简介</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/axios%E7%AE%80%E4%BB%8B.png"></p>
<h2 id="1-2-发送网络请求"><a href="#1-2-发送网络请求" class="headerlink" title="1.2 发送网络请求"></a>1.2 发送网络请求</h2><h3 id="1-2-1-发送Get请求"><a href="#1-2-1-发送Get请求" class="headerlink" title="1.2.1 发送Get请求"></a>1.2.1 发送Get请求</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E5%8F%91%E9%80%81%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82.png"></p>
<h3 id="1-2-2-发送Post请求"><a href="#1-2-2-发送Post请求" class="headerlink" title="1.2.2 发送Post请求"></a>1.2.2 发送Post请求</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E5%8F%91%E9%80%81post%E8%AF%B7%E6%B1%82.png"></p>
<h3 id="1-2-3-异步回调问题"><a href="#1-2-3-异步回调问题" class="headerlink" title="1.2.3 异步回调问题"></a>1.2.3 异步回调问题</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83%E9%97%AE%E9%A2%98.png"></p>
<h3 id="1-2-4-其他请求方式"><a href="#1-2-4-其他请求方式" class="headerlink" title="1.2.4 其他请求方式"></a>1.2.4 其他请求方式</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E5%85%B6%E4%BB%96%E8%AF%B7%E6%B1%82.png"></p>
<h2 id="1-3-跨域问题：前后端相连"><a href="#1-3-跨域问题：前后端相连" class="headerlink" title="1.3 跨域问题：前后端相连"></a>1.3 跨域问题：前后端相连</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user/findAll&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">find</span><span class="params">()</span>&#123; <span class="keyword">return</span> userMapper.selectAllUserAndOrders(); &#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">created:function()&#123;</span><br><span class="line">	axios.get(&quot;http://localhost:8088/user/findAll&quot;).then(function(reponse)&#123;</span><br><span class="line">		console.log(reponse)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong>注意</strong>：后端端口不能与前端端口一致！！！</p>
</blockquote>
<h3 id="1-3-1-为什么出现跨域问题"><a href="#1-3-1-为什么出现跨域问题" class="headerlink" title="1.3.1 为什么出现跨域问题"></a>1.3.1 为什么出现跨域问题</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%87%BA%E7%8E%B0%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98.png"></p>
<h3 id="1-3-2-跨域的解决"><a href="#1-3-2-跨域的解决" class="headerlink" title="1.3.2 跨域的解决"></a>1.3.2 跨域的解决</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E8%B7%A8%E5%9F%9F%E7%9A%84%E8%A7%A3%E5%86%B3.png"></p>
<h3 id="1-3-3-简单请求的服务器处理"><a href="#1-3-3-简单请求的服务器处理" class="headerlink" title="1.3.3 简单请求的服务器处理"></a>1.3.3 简单请求的服务器处理</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A4%84%E7%90%86.png"></p>
<h3 id="1-3-4-非简单请求"><a href="#1-3-4-非简单请求" class="headerlink" title="1.3.4 非简单请求"></a>1.3.4 非简单请求</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E9%9D%9E%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82.png"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../pic/%E9%9D%9E%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%822.png"></p>
<h3 id="1-3-5-SpringBoot的中配置CORS"><a href="#1-3-5-SpringBoot的中配置CORS" class="headerlink" title="1.3.5 SpringBoot的中配置CORS"></a>1.3.5 SpringBoot的中配置CORS</h3><p>在传统的Java EE开发中，可以通过过滤器统一配置，而SpringBoot中对此则提供了更加简便的方案。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)    <span class="comment">//允许跨域访问的路径</span></span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>)        <span class="comment">// 允许跨域访问的源</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;PUT&quot;</span>,<span class="string">&quot;OPTIONS&quot;</span>,<span class="string">&quot;DELETE&quot;</span>)  <span class="comment">//运行请求方法</span></span><br><span class="line">                .maxAge(<span class="number">168000</span>)           <span class="comment">//预检间隔时间</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)      <span class="comment">//允许头部设置</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>);   <span class="comment">//是否发送cookie</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在一个类前加上注解**@CrossOrigin<strong>，可以使这个类的所有方法</strong>都允许跨域**</p>
<h3 id="1-3-6-后端数据显示在表格（打通前后端连接）"><a href="#1-3-6-后端数据显示在表格（打通前后端连接）" class="headerlink" title="1.3.6 后端数据显示在表格（打通前后端连接）"></a>1.3.6 后端数据显示在表格（打通前后端连接）</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span> <span class="attr">:row-class-name</span>=<span class="string">&quot;tableRowClassName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&gt;&lt;/el-table-column&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">    &lt;el-table-column prop=&quot;</span><span class="attr">name</span>&quot; <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">label</span>=<span class="string">&quot;生日&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//作用域继承父集</span></span></span><br><span class="line"><span class="language-javascript">	axios.<span class="title function_">get</span>(<span class="string">&quot;http://localhost:8088/user/findAll&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">reponse</span>)=&gt;</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="variable language_">this</span>.<span class="property">tableData</span> = reponse.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">tableData</span>:[]</span></span><br><span class="line"><span class="language-javascript">	&#125;	</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="二、与Vue整合"><a href="#二、与Vue整合" class="headerlink" title="二、与Vue整合"></a>二、与Vue整合</h1><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E4%B8%8Evue%E6%95%B4%E5%90%88.png"></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&quot;http://localhost:8080&quot;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$http</span> = axios</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	axios.<span class="title function_">get</span>(<span class="string">&quot;http://localhost:8088/user/findAll&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">reponse</span>)=&gt;</span><br><span class="line">    &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">tableData</span> = reponse.<span class="property">data</span></span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//经过上述配置可以将上述代码写成如下形式</span></span><br><span class="line"><span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	axios.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&quot;/user/findAll&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">reponse</span>)=&gt;</span><br><span class="line">    &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">tableData</span> = reponse.<span class="property">data</span></span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>前后端数据交互</category>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>Axios</tag>
        <tag>全栈开发</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot+Vue前后端分离实践二(完结撒花)</title>
    <url>/2023/09/01/SpringBoot-Vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%AE%9E%E8%B7%B5%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="1-JWT整合"><a href="#1-JWT整合" class="headerlink" title="1.JWT整合"></a>1.JWT整合</h1><h2 id="1-1-JWT依赖"><a href="#1-1-JWT依赖" class="headerlink" title="1.1 JWT依赖"></a>1.1 JWT依赖</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="1-2-JWTUtil"><a href="#1-2-JWTUtil" class="headerlink" title="1.2 JWTUtil"></a>1.2 JWTUtil</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="comment">//有效期</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">JWT_EXPIRE</span> <span class="operator">=</span> <span class="number">30</span>*<span class="number">60</span>*<span class="number">1000L</span>; <span class="comment">//半小时</span></span><br><span class="line">    <span class="comment">//令牌密钥</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JWT_KEY</span> <span class="operator">=</span> <span class="string">&quot;sdfsafsa324123&quot;</span>;</span><br><span class="line">    <span class="comment">//创建token</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createToken</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">        <span class="comment">//当前时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//过期时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">expTime</span> <span class="operator">=</span> currentTime + JWT_EXPIRE;</span><br><span class="line">        <span class="comment">//构建JWT</span></span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .setId(UUID.randomUUID()+<span class="string">&quot;&quot;</span>).setSubject(JSON.toJSONString(data))</span><br><span class="line">                .setIssuer(<span class="string">&quot;system&quot;</span>).setIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>(currentTime))</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256,encodeSecret(JWT_KEY))</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(expTime));</span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SecretKey <span class="title function_">encodeSecret</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] encode = Base64.getEncoder().encode(key.getBytes());</span><br><span class="line">        <span class="type">SecretKeySpec</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(encode,<span class="number">0</span>, encode.length, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> aes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Claims <span class="title function_">parseToken</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">body</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(encodeSecret(JWT_KEY))</span><br><span class="line">                .parseClaimsJws(token)</span><br><span class="line">                .getBody();</span><br><span class="line">        <span class="keyword">return</span> body;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">parseToken</span><span class="params">(String token,Class&lt;T&gt; clazz)</span>&#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">body</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(encodeSecret(JWT_KEY))</span><br><span class="line">                .parseClaimsJws(token)</span><br><span class="line">                .getBody();</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(body.getSubject(),clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-2-1-junit测试token"><a href="#1-2-1-junit测试token" class="headerlink" title="1.2.1 junit测试token"></a>1.2.1 junit测试token</h3><p>在porm.xml中加入依赖</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Junit依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>编写测试类：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtilsTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtil jwtUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreateJwt</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;1242312&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> jwtUtil.createToken(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;token = &gt;&quot;</span> + token);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * token = &gt;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI2Y2IzNTBhNi1iN</span></span><br><span class="line"><span class="comment">    * mVjLTRmYTMtOWQ3NC1hMGJjNGE3YTJiNWMiLCJzdWIiOiJ7XCJwYXNzd29yZFwiOlwiMTI0MjMxMlwiLFwidXN</span></span><br><span class="line"><span class="comment">    * lcm5hbWVcIjpcInpoYW5nc2FuXCJ9IiwiaXNzIjoic3lzdGVtIiwiaWF0IjoxNjkzNTU2OTI5LCJleHA</span></span><br><span class="line"><span class="comment">    * iOjE2OTM1NTg3Mjl9.iTJXnFs4w3TWBMDufz-xACtc5BzAMl9WEfZfkee4cqo</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testParseJwt</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI2Y2IzNTBhNi1iNmVjLTRmYTMtOWQ3NC1hMGJjNGE3YTJiNWMiLCJzdWIiOiJ7XCJwYXNzd29yZFwiOlwiMTI0MjMxMlwiLFwidXNlcm5hbWVcIjpcInpoYW5nc2FuXCJ9IiwiaXNzIjoic3lzdGVtIiwiaWF0IjoxNjkzNTU2OTI5LCJleHAiOjE2OTM1NTg3Mjl9.iTJXnFs4w3TWBMDufz-xACtc5BzAMl9WEfZfkee4cqo&quot;</span>;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> jwtUtil.parseToken(token);</span><br><span class="line">        System.out.println(<span class="string">&quot;claims = &quot;</span> + claims);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * claims = &#123;jti=6cb350a6-b6ec-4fa3-9d74-a0bc4a7a2b5c, sub=&#123;&quot;password&quot;:&quot;1242312&quot;,&quot;username&quot;:&quot;zhangsan&quot;&#125;, \</span></span><br><span class="line"><span class="comment">        * iss=system, iat=1693556929, exp=1693558729&#125;</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testParseJwt2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI2Y2IzNTBhNi1iNmVjLTRmYTMtOWQ3NC1hMGJjNGE3YTJiNWMiLCJzdWIiOiJ7XCJwYXNzd29yZFwiOlwiMTI0MjMxMlwiLFwidXNlcm5hbWVcIjpcInpoYW5nc2FuXCJ9IiwiaXNzIjoic3lzdGVtIiwiaWF0IjoxNjkzNTU2OTI5LCJleHAiOjE2OTM1NTg3Mjl9.iTJXnFs4w3TWBMDufz-xACtc5BzAMl9WEfZfkee4cqo&quot;</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> jwtUtil.parseToken(token,User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="1-2-2-UserServiceImpl整合JWT"><a href="#1-2-2-UserServiceImpl整合JWT" class="headerlink" title="1.2.2 UserServiceImpl整合JWT"></a>1.2.2 UserServiceImpl整合JWT</h3><p>①UserServiceImpl 登录接口</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line">       LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       wrapper.eq(User::getUsername,user.getUsername());</span><br><span class="line">       wrapper.eq(User::getPassword,user.getPassword());</span><br><span class="line">       <span class="type">User</span> <span class="variable">userLogin</span> <span class="operator">=</span> <span class="built_in">this</span>.baseMapper.selectOne(wrapper);</span><br><span class="line">       <span class="keyword">if</span>(userLogin!=<span class="literal">null</span> &amp;&amp; user.getPassword().equals(userLogin.getPassword())) &#123;</span><br><span class="line">           <span class="comment">//生成token，UUID；JWT</span></span><br><span class="line">           <span class="comment">//String key = &quot;user:&quot;+ UUID.randomUUID();</span></span><br><span class="line">           <span class="comment">//存入redis</span></span><br><span class="line">           userLogin.setPassword(<span class="literal">null</span>);</span><br><span class="line">           <span class="comment">//redisTemplate.opsForValue().set(key,userLogin,30, TimeUnit.MINUTES);</span></span><br><span class="line">           <span class="comment">//创建JWT</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> jwtUtil.createToken(userLogin);</span><br><span class="line">           <span class="comment">//返回数据</span></span><br><span class="line">           Map&lt;String,Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">           data.put(<span class="string">&quot;token&quot;</span>,token);</span><br><span class="line">           <span class="keyword">return</span> data;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>②UserServiceImpl 获取用户信息接口</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getUserInfo</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="comment">//根据token，获取redis信息</span></span><br><span class="line">        <span class="comment">//Object object = redisTemplate.opsForValue().get(token);</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">userLogin</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userLogin = jwtUtil.parseToken(token, User.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(userLogin != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//User userLogin = JSON.parseObject(JSON.toJSONString(object), User.class);</span></span><br><span class="line">            Map&lt;String,Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            data.put(<span class="string">&quot;name&quot;</span>,userLogin.getUsername());</span><br><span class="line">            data.put(<span class="string">&quot;avatar&quot;</span>,userLogin.getAvatar());</span><br><span class="line">            <span class="comment">//存入角色</span></span><br><span class="line">            List&lt;String&gt; roleList = <span class="built_in">this</span>.baseMapper.getRoleNameByUserId(userLogin.getId());</span><br><span class="line">            data.put(<span class="string">&quot;roles&quot;</span>,roleList);</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>③UserServiceImpl 注销接口</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="comment">//redisTemplate.delete(token);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-2-3-测试"><a href="#1-2-3-测试" class="headerlink" title="1.2.3 测试"></a>1.2.3 测试</h3><p><strong>①进入神盾局</strong>：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230901172949744.png" alt="image-20230901172949744"></p>
<p><strong>②点击进入产生的token</strong>：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230901173028079.png" alt="image-20230901173028079"></p>
<h2 id="1-3-登录后续请求如何验证JWT？"><a href="#1-3-登录后续请求如何验证JWT？" class="headerlink" title="1.3 登录后续请求如何验证JWT？"></a>1.3 登录后续请求如何验证JWT？</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230901173256886.png" alt="image-20230901173256886"></p>
<h2 id="1-4-JWT验证拦截器"><a href="#1-4-JWT验证拦截器" class="headerlink" title="1.4 JWT验证拦截器"></a>1.4 JWT验证拦截器</h2><h3 id="1-4-1-interceptor包下的拦截器"><a href="#1-4-1-interceptor包下的拦截器" class="headerlink" title="1.4.1 interceptor包下的拦截器"></a>1.4.1 interceptor包下的拦截器</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtValidateInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtil jwtUtil;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;X-Token&quot;</span>);</span><br><span class="line">        log.debug(request.getRequestURI()+ <span class="string">&quot;需要验证&quot;</span>+ token);</span><br><span class="line">        <span class="keyword">if</span>(token != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                jwtUtil.parseToken(token);</span><br><span class="line">                log.debug(request.getRequestURI()+ <span class="string">&quot;验证通过&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(request.getRequestURI()+ <span class="string">&quot;认证失败，禁止访问&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        Result&lt;Object&gt; fail = Result.fail(<span class="number">20003</span>, <span class="string">&quot;jwt无效，请重新登录&quot;</span>);</span><br><span class="line">        response.getWriter().write(JSON.toJSONString(fail));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 拦截</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-4-2-config包下的拦截器配置"><a href="#1-4-2-config包下的拦截器配置" class="headerlink" title="1.4.2 config包下的拦截器配置"></a>1.4.2 config包下的拦截器配置</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtValidateInterceptor jwtValidateInterceptor;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">InterceptorRegistration</span> <span class="variable">registration</span> <span class="operator">=</span> registry.addInterceptor(jwtValidateInterceptor);</span><br><span class="line">        registration.addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(</span><br><span class="line">                        <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/user/info&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;user/logout&quot;</span></span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-4-3-测试"><a href="#1-4-3-测试" class="headerlink" title="1.4.3 测试"></a>1.4.3 测试</h3><p>在token前面加上123</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230901180010317.png" alt="image-20230901180010317"></p>
<p>点击查询报错</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230901180027254.png" alt="image-20230901180027254"></p>
<p>拦截成功！！！！</p>
<h1 id="2-Swagger整合"><a href="#2-Swagger整合" class="headerlink" title="2.Swagger整合"></a>2.Swagger整合</h1><h2 id="2-1-Swagger依赖"><a href="#2-1-Swagger依赖" class="headerlink" title="2.1 Swagger依赖"></a>2.1 Swagger依赖</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Swagger文档工具--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="2-2-Swagger配置"><a href="#2-2-Swagger配置" class="headerlink" title="2.2 Swagger配置"></a>2.2 Swagger配置</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableOpenApi</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">api</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.OAS_30)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select().apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.example.springbootvue&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any()).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// http://localhost:8080/swagger-ui/index.html</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;神盾局特攻管理系统接口文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;欢迎来到神盾局&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;3.0&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;My Blog&quot;</span>,<span class="string">&quot;https://www.lynness.top&quot;</span>,<span class="string">&quot;1366606525@qq.com&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>拦截器修改</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtValidateInterceptor jwtValidateInterceptor;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">InterceptorRegistration</span> <span class="variable">registration</span> <span class="operator">=</span> registry.addInterceptor(jwtValidateInterceptor);</span><br><span class="line">        registration.addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(</span><br><span class="line">                        <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/user/info&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/user/logout&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/error&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/swagger-ui/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/swagger-resources/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/v3/**&quot;</span></span><br><span class="line"></span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="2-3-Swagger授权配置"><a href="#2-3-Swagger授权配置" class="headerlink" title="2.3 Swagger授权配置"></a>2.3 Swagger授权配置</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">api</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.OAS_30)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select().apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.example.springbootvue&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any()).build()</span><br><span class="line">                .securitySchemes(Collections.singletonList(securityScheme()))</span><br><span class="line">                .securityContexts(Collections.singletonList(securityContext()));</span><br><span class="line">    &#125; </span><br><span class="line"><span class="keyword">private</span> SecurityScheme <span class="title function_">securityScheme</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiKey</span>(<span class="string">&quot;X-Token&quot;</span>,<span class="string">&quot;X-Token&quot;</span>,<span class="string">&quot;header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SecurityContext <span class="title function_">securityContext</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SecurityContext.builder()</span><br><span class="line">                .securityReferences(defaultAuth())</span><br><span class="line">                .forPaths(PathSelectors.regex(<span class="string">&quot;^(?!auth).*$&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;SecurityReference&gt; <span class="title function_">defaultAuth</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">AuthorizationScope</span> <span class="variable">authorizationScope</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthorizationScope</span>(<span class="string">&quot;global&quot;</span>,<span class="string">&quot;accessEverything&quot;</span>);</span><br><span class="line">        AuthorizationScope[] authorizationScopes = <span class="keyword">new</span> <span class="title class_">AuthorizationScope</span>[<span class="number">1</span>];</span><br><span class="line">        authorizationScopes[<span class="number">0</span>] = authorizationScope;</span><br><span class="line">        <span class="keyword">return</span> Collections.singletonList(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">SecurityReference</span>(<span class="string">&quot;X-Token&quot;</span>,authorizationScopes));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>效果如下：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230901210004338.png" alt="image-20230901210004338"></p>
<h1 id="3-角色管理"><a href="#3-角色管理" class="headerlink" title="3.角色管理"></a>3.角色管理</h1><h2 id="3-1-基本功能"><a href="#3-1-基本功能" class="headerlink" title="3.1 基本功能"></a>3.1 基本功能</h2><h3 id="3-1-1-预览效果"><a href="#3-1-1-预览效果" class="headerlink" title="3.1.1 预览效果"></a>3.1.1 预览效果</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230901235041076.png" alt="image-20230901235041076"></p>
<h3 id="3-1-2-前端"><a href="#3-1-2-前端" class="headerlink" title="3.1.2 前端"></a>3.1.2 前端</h3><p>views的sys目录下的role.vue</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 搜索栏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">id</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;18&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;角色名&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;searchModel.roleName&quot;</span> <span class="attr">clearable</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;getRoleList&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-search&quot;</span> <span class="attr">round</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;6&quot;</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;openEditUI(null)&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-plus&quot;</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 结果列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-card</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;roleList&quot;</span> <span class="attr">stripe</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;#&quot;</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">              &#123;&#123;(searchModel.pageNo-1) * searchModel.pageSize + scope.$index + 1&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;roleId&quot;</span> <span class="attr">label</span>=<span class="string">&quot;角色编号&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;roleName&quot;</span> <span class="attr">label</span>=<span class="string">&quot;角色名称&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;roleDesc&quot;</span> <span class="attr">label</span>=<span class="string">&quot;角色描述&quot;</span> &gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-table-column</span>   <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;openEditUI(scope.row.roleId)&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-edit&quot;</span> <span class="attr">circle</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;deleteRole(scope.row)&quot;</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete&quot;</span> <span class="attr">circle</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span> </span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">size-change</span>=<span class="string">&quot;handleSizeChange&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:current-page</span>=<span class="string">&quot;searchModel.pageNo&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:page-sizes</span>=<span class="string">&quot;[5, 10, 20, 50]&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:page-size</span>=<span class="string">&quot;searchModel.pageSize&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:total</span>=<span class="string">&quot;total&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 对话框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dialog</span> @<span class="attr">close</span>=<span class="string">&quot;clearForm&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogFormVisible&quot;</span> <span class="attr">:close-on-click-modal</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;roleForm&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;roleFormRef&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">&quot;roleName&quot;</span> <span class="attr">label</span>=<span class="string">&quot;角色名称&quot;</span> <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;roleForm.roleName&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">&quot;roleDesc&quot;</span> <span class="attr">label</span>=<span class="string">&quot;角色描述&quot;</span> <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;roleForm.roleDesc&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;dialogFormVisible = false&quot;</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;saveRole&quot;</span>&gt;</span>确 定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> roleApi <span class="keyword">from</span> <span class="string">&#x27;@/api/roleManage&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">formLabelWidth</span>: <span class="string">&#x27;130px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">roleForm</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">dialogFormVisible</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">searchModel</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">pageNo</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">pageSize</span>: <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">roleList</span>: [],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">total</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">rules</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">roleName</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入角色名称&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">min</span>: <span class="number">3</span>, <span class="attr">max</span>: <span class="number">50</span>, <span class="attr">message</span>: <span class="string">&#x27;长度在 3 到 50 个字符&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">deleteRole</span>(<span class="params">role</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$confirm(<span class="string">`您确定删除角色 <span class="subst">$&#123;role.roleName&#125;</span> ？`</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        roleApi.<span class="title function_">deleteRoleById</span>(role.<span class="property">roleId</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.$message(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: response.<span class="property">message</span></span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="title function_">getRoleList</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">      &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.$message(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">type</span>: <span class="string">&#x27;info&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">message</span>: <span class="string">&#x27;已取消删除&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);          </span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">saveRole</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 触发表单验证</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">roleFormRef</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (valid) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 提交保存请求</span></span></span><br><span class="line"><span class="language-javascript">          roleApi.<span class="title function_">saveRole</span>(<span class="variable language_">this</span>.<span class="property">roleForm</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 成功提示</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$message(&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">message</span>: response.<span class="property">message</span>,</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 关闭对话框</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 刷新表格数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">getRoleList</span>();</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">          </span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error submit!!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">clearForm</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">roleForm</span> = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">roleFormRef</span>.<span class="title function_">clearValidate</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">openEditUI</span>(<span class="params">id</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span>(id == <span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;新增角色&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;修改角色&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        roleApi.<span class="title function_">getRoleById</span>(id).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">roleForm</span> = response.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handleSizeChange</span>(<span class="params">pageSize</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">searchModel</span>.<span class="property">pageSize</span> = pageSize;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">getRoleList</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handleCurrentChange</span>(<span class="params">pageNo</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">searchModel</span>.<span class="property">pageNo</span> = pageNo;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">getRoleList</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getRoleList</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      roleApi.<span class="title function_">getRoleList</span>(<span class="variable language_">this</span>.<span class="property">searchModel</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">roleList</span> = response.<span class="property">data</span>.<span class="property">rows</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">total</span> = response.<span class="property">data</span>.<span class="property">total</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">created</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="title function_">getRoleList</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#search</span> <span class="selector-class">.el-input</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.el-dialog</span> <span class="selector-class">.el-input</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">85%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>api目录下的roleManage.js</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  <span class="comment">// 分页查询角色列表</span></span><br><span class="line">  <span class="title function_">getRoleList</span>(<span class="params">searchModel</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/role/list&#x27;</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">roleName</span>: searchModel.<span class="property">roleName</span>,</span><br><span class="line">        <span class="attr">pageNo</span>: searchModel.<span class="property">pageNo</span>,</span><br><span class="line">        <span class="attr">pageSize</span>: searchModel.<span class="property">pageSize</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 新增</span></span><br><span class="line">  <span class="title function_">addRole</span>(<span class="params">role</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/role&#x27;</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: role</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 修改</span></span><br><span class="line">  <span class="title function_">updateRole</span>(<span class="params">role</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/role&#x27;</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: role</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 保存角色数据</span></span><br><span class="line">  <span class="title function_">saveRole</span>(<span class="params">role</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(role.<span class="property">roleId</span> == <span class="literal">null</span> || role.<span class="property">roleId</span> == <span class="literal">undefined</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">addRole</span>(role);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">updateRole</span>(role);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 根据id查询</span></span><br><span class="line">  <span class="title function_">getRoleById</span>(<span class="params">id</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">`/role/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 根据id删除</span></span><br><span class="line">  <span class="title function_">deleteRoleById</span>(<span class="params">id</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">`/role/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-1-3-后端"><a href="#3-1-3-后端" class="headerlink" title="3.1.3 后端"></a>3.1.3 后端</h3><p>RoleController</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/role&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IRoleService roleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取用户列表接口&quot;)</span></span><br><span class="line">    <span class="comment">//分页查询所有数据</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">getRoleList</span><span class="params">(<span class="meta">@RequestParam(value = &quot;roleName&quot;,required = false)</span>String roleName,</span></span><br><span class="line"><span class="params">                                                  <span class="meta">@RequestParam(value = &quot;pageNo&quot;)</span>Long pageNo,</span></span><br><span class="line"><span class="params">                                                  <span class="meta">@RequestParam(value = &quot;pageSize&quot;)</span>Long pageSize)</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Role&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(StringUtils.hasLength(roleName), Role::getRoleName,roleName);</span><br><span class="line">        <span class="comment">//按照用户ID排序</span></span><br><span class="line">        wrapper.orderByDesc(Role::getRoleId);</span><br><span class="line">        Page&lt;Role&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNo,pageSize);</span><br><span class="line">        roleService.page(page,wrapper);</span><br><span class="line">        Map&lt;String,Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;total&quot;</span>,page.getTotal());</span><br><span class="line">        data.put(<span class="string">&quot;rows&quot;</span>,page.getRecords());</span><br><span class="line">        <span class="keyword">return</span> Result.success(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;添加角色接口&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; addRole(<span class="meta">@RequestBody</span> Role role)&#123;</span><br><span class="line">        roleService.save(role);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;新增角色成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;修改角色接口&quot;)</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; updateRole(<span class="meta">@RequestBody</span> Role role)&#123;</span><br><span class="line">        roleService.updateById(role);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;修改角色成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据ID获取角色信息&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Role&gt; <span class="title function_">getRoleById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="type">Role</span> <span class="variable">role</span> <span class="operator">=</span> roleService.getById(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success(role);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据ID删除角色&quot;)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Role&gt; <span class="title function_">deleteRoleById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        roleService.removeById(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;删除角色成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="3-2-角色权限设置"><a href="#3-2-角色权限设置" class="headerlink" title="3.2 角色权限设置"></a>3.2 角色权限设置</h2><h3 id="3-2-1-前端"><a href="#3-2-1-前端" class="headerlink" title="3.2.1 前端"></a>3.2.1 前端</h3><p>menuMange.js</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  <span class="comment">// 查询所有菜单数据</span></span><br><span class="line">  <span class="title function_">getAllMenu</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/menu&#x27;</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>role.vue</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span></span></span><br><span class="line"><span class="tag">              <span class="attr">prop</span>=<span class="string">&quot;roleDesc&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">label</span>=<span class="string">&quot;权限设置&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span></span></span><br><span class="line"><span class="tag">              &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-tree</span></span></span><br><span class="line"><span class="tag">             <span class="attr">:data</span>=<span class="string">&quot;menuList&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">:props</span>=<span class="string">&quot;menuProps&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">node-key</span>=<span class="string">&quot;menuId&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">show-checkbox</span></span></span><br><span class="line"><span class="tag">             <span class="attr">style</span>=<span class="string">&quot;width:85%&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">default-expand-all</span></span></span><br><span class="line"><span class="tag">             &gt;</span><span class="tag">&lt;/<span class="name">el-tree</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902133855800.png" alt="image-20230902133855800"></p>
<h3 id="3-2-2-数据库"><a href="#3-2-2-数据库" class="headerlink" title="3.2.2 数据库"></a>3.2.2 数据库</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> x_menu;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `x_menu` (`menu_id`, `component`, `path`, `redirect`, `name`, `title`, `icon`, `parent_id`, `is_leaf`, `hidden`) <span class="keyword">values</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;Layout&#x27;</span>,<span class="string">&#x27;/sys&#x27;</span>,<span class="string">&#x27;/sys/user&#x27;</span>,<span class="string">&#x27;sysManage&#x27;</span>,<span class="string">&#x27;系统管理&#x27;</span>,<span class="string">&#x27;userManage&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `x_menu` (`menu_id`, `component`, `path`, `redirect`, `name`, `title`, `icon`, `parent_id`, `is_leaf`, `hidden`) <span class="keyword">values</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;sys/user&#x27;</span>,<span class="string">&#x27;user&#x27;</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;userList&#x27;</span>,<span class="string">&#x27;用户列表&#x27;</span>,<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `x_menu` (`menu_id`, `component`, `path`, `redirect`, `name`, `title`, `icon`, `parent_id`, `is_leaf`, `hidden`) <span class="keyword">values</span>(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;sys/role&#x27;</span>,<span class="string">&#x27;role&#x27;</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;roleList&#x27;</span>,<span class="string">&#x27;角色列表&#x27;</span>,<span class="string">&#x27;roleManage&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `x_menu` (`menu_id`, `component`, `path`, `redirect`, `name`, `title`, `icon`, `parent_id`, `is_leaf`, `hidden`) <span class="keyword">values</span>(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;Layout&#x27;</span>,<span class="string">&#x27;/test&#x27;</span>,<span class="string">&#x27;/test/test1&#x27;</span>,<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;功能测试&#x27;</span>,<span class="string">&#x27;form&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `x_menu` (`menu_id`, `component`, `path`, `redirect`, `name`, `title`, `icon`, `parent_id`, `is_leaf`, `hidden`) <span class="keyword">values</span>(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;test/test1&#x27;</span>,<span class="string">&#x27;test1&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;test1&#x27;</span>,<span class="string">&#x27;测试点一&#x27;</span>,<span class="string">&#x27;form&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `x_menu` (`menu_id`, `component`, `path`, `redirect`, `name`, `title`, `icon`, `parent_id`, `is_leaf`, `hidden`) <span class="keyword">values</span>(<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;test/test2&#x27;</span>,<span class="string">&#x27;test2&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;test2&#x27;</span>,<span class="string">&#x27;测试点二&#x27;</span>,<span class="string">&#x27;form&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `x_menu` (`menu_id`, `component`, `path`, `redirect`, `name`, `title`, `icon`, `parent_id`, `is_leaf`, `hidden`) <span class="keyword">values</span>(<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;test/test3&#x27;</span>,<span class="string">&#x27;test3&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;test3&#x27;</span>,<span class="string">&#x27;测试点三&#x27;</span>,<span class="string">&#x27;form&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<h3 id="3-2-3-后端"><a href="#3-2-3-后端" class="headerlink" title="3.2.3 后端"></a>3.2.3 后端</h3><p>Menu类新增</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_EMPTY)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Menu&gt; children;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String,Object&gt; meta = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">getMeta</span><span class="params">()</span>&#123;</span><br><span class="line">    meta.put(<span class="string">&quot;title&quot;</span>,<span class="built_in">this</span>.title);</span><br><span class="line">    meta.put(<span class="string">&quot;icon&quot;</span>,<span class="built_in">this</span>.icon);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.meta;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>MenuController</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/menu&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MenuController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IMenuService menuService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; getAllMenu()&#123;</span><br><span class="line">        List&lt;Menu&gt; menuList =  menuService.getAllMenu();</span><br><span class="line">        <span class="keyword">return</span> Result.success(menuList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>MenuSeviceImpl</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Menu&gt; <span class="title function_">getAllMenu</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 一级菜单</span></span><br><span class="line">    LambdaQueryWrapper&lt;Menu&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line">    wrapper.eq(Menu::getParentId,<span class="number">0</span>);</span><br><span class="line">    List&lt;Menu&gt; menuList = <span class="built_in">this</span>.list(wrapper);</span><br><span class="line">    <span class="comment">// 子菜单</span></span><br><span class="line">    setMenuChildren(menuList);</span><br><span class="line">    <span class="keyword">return</span> menuList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setMenuChildren</span><span class="params">(List&lt;Menu&gt; menuList)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(menuList != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Menu menu:menuList) &#123;</span><br><span class="line">            LambdaQueryWrapper&lt;Menu&gt; subWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line">            subWrapper.eq(Menu::getParentId, menu.getMenuId());</span><br><span class="line">            List&lt;Menu&gt; subMenuList = <span class="built_in">this</span>.list(subWrapper);</span><br><span class="line">            menu.setChildren(subMenuList);</span><br><span class="line">            <span class="comment">// 递归</span></span><br><span class="line">            setMenuChildren(subMenuList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="3-3-角色权限新增提交"><a href="#3-3-角色权限新增提交" class="headerlink" title="3.3 角色权限新增提交"></a>3.3 角色权限新增提交</h2><h3 id="3-3-1-前端"><a href="#3-3-1-前端" class="headerlink" title="3.3.1 前端"></a>3.3.1 前端</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902140912474.png" alt="image-20230902140912474"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902140949333.png" alt="image-20230902140949333"></p>
<h3 id="3-3-2-后端"><a href="#3-3-2-后端" class="headerlink" title="3.3.2 后端"></a>3.3.2 后端</h3><p>Role</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902141029574.png" alt="image-20230902141029574"></p>
<p>RoleServiceImpl</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902141116992.png" alt="image-20230902141116992"></p>
<h2 id="3-4-角色权限回显"><a href="#3-4-角色权限回显" class="headerlink" title="3.4 角色权限回显"></a>3.4 角色权限回显</h2><h3 id="3-4-1-前端"><a href="#3-4-1-前端" class="headerlink" title="3.4.1 前端"></a>3.4.1 前端</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902153733268.png" alt="image-20230902153733268"></p>
<h3 id="3-4-2-后端"><a href="#3-4-2-后端" class="headerlink" title="3.4.2 后端"></a>3.4.2 后端</h3><p>roleMenuMapper接口</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleMenuMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;RoleMenu&gt; &#123;</span><br><span class="line">    <span class="comment">//角色权限回写</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getMenuIdListByRoleId</span><span class="params">(Integer roleId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>RoleServiceImpl</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//角色权限回写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Role <span class="title function_">getRoleById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="type">Role</span> <span class="variable">role</span> <span class="operator">=</span> <span class="built_in">this</span>.baseMapper.selectById(id);</span><br><span class="line">        List&lt;Integer&gt; menuIdList = roleMenuMapper.getMenuIdListByRoleId(id);</span><br><span class="line">        role.setMenuIdList(menuIdList);</span><br><span class="line">        <span class="keyword">return</span> role;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>RoleMenuMapper.xml</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.springbootvue.sys.mapper.RoleMenuMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  角色权限回写   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getMenuIdListByRoleId&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Integer&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">        select  a.menu_id</span><br><span class="line">        from x_role_menu a, x_menu b</span><br><span class="line">        where a.menu_id = b.menu_id</span><br><span class="line">          and b.is_leaf = &#x27;Y&#x27;</span><br><span class="line">          and a.role_id = #&#123;roleId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="3-5-角色权限修改-删除"><a href="#3-5-角色权限修改-删除" class="headerlink" title="3.5 角色权限修改&amp;删除"></a>3.5 角色权限修改&amp;删除</h2><h3 id="3-5-1-后端"><a href="#3-5-1-后端" class="headerlink" title="3.5.1 后端"></a>3.5.1 后端</h3><p>RoleServiceImpl新增</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateRole</span><span class="params">(Role role)</span> &#123;</span><br><span class="line">        <span class="comment">//修改角色表</span></span><br><span class="line">        <span class="built_in">this</span>.baseMapper.updateById(role);</span><br><span class="line">        <span class="comment">//删除原有权限</span></span><br><span class="line">        LambdaQueryWrapper&lt;RoleMenu&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(RoleMenu::getRoleId,role.getRoleId());</span><br><span class="line">        roleMenuMapper.delete(wrapper);</span><br><span class="line">        <span class="comment">//新增权限</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != role.getMenuIdList())&#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer menuId : role.getMenuIdList()) &#123;</span><br><span class="line">                roleMenuMapper.insert(<span class="keyword">new</span> <span class="title class_">RoleMenu</span>(<span class="literal">null</span>,role.getRoleId(),menuId));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>RoleSeviceImpl 删除角色</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteRoleById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.baseMapper.deleteById(id);</span><br><span class="line">        <span class="comment">//删除原有权限</span></span><br><span class="line">        LambdaQueryWrapper&lt;RoleMenu&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(RoleMenu::getRoleId,id);</span><br><span class="line">        roleMenuMapper.delete(wrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>IRoleService新增</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">updateRole</span><span class="params">(Role role)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteRoleById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure></div>

<h1 id="4-用户角色设置"><a href="#4-用户角色设置" class="headerlink" title="4.用户角色设置"></a>4.用户角色设置</h1><h2 id="4-1-角色的显示"><a href="#4-1-角色的显示" class="headerlink" title="4.1 角色的显示"></a>4.1 角色的显示</h2><h3 id="4-1-1-前端"><a href="#4-1-1-前端" class="headerlink" title="4.1.1 前端"></a>4.1.1 前端</h3><p>roleManage.js</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询所有角色列表</span></span><br><span class="line"><span class="title function_">getAllRole</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/role/all&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>

<p>user.vue</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902161442821.png" alt="image-20230902161442821"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902161511985.png" alt="image-20230902161511985"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902161555868.png" alt="image-20230902161555868"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902161628464.png" alt="image-20230902161628464"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902161652936.png" alt="image-20230902161652936"></p>
<h3 id="4-1-2-后端"><a href="#4-1-2-后端" class="headerlink" title="4.1.2 后端"></a>4.1.2 后端</h3><p>RoleController</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;获取所有角色信息&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;Role&gt;&gt; <span class="title function_">getAllRole</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Role&gt; roleList = roleService.list();</span><br><span class="line">        <span class="keyword">return</span> Result.success(roleList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="4-2-用户角色提交"><a href="#4-2-用户角色提交" class="headerlink" title="4.2 用户角色提交"></a>4.2 用户角色提交</h2><h3 id="4-2-1-后端"><a href="#4-2-1-后端" class="headerlink" title="4.2.1 后端"></a>4.2.1 后端</h3><p>User新增</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; roleIdList;</span><br></pre></td></tr></table></figure></div>

<p>UserServiceImpl</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">//写入用户表</span></span><br><span class="line">        <span class="built_in">this</span>.baseMapper.insert(user);</span><br><span class="line">        <span class="comment">//写入用户角色表</span></span><br><span class="line">        List&lt;Integer&gt; roleIdList = user.getRoleIdList();</span><br><span class="line">        <span class="keyword">if</span>(roleIdList!= <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer roleId : roleIdList) &#123;</span><br><span class="line">                userRoleMapper.insert(<span class="keyword">new</span> <span class="title class_">UserRole</span>(<span class="literal">null</span>, user.getId(), roleId));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="4-3-角色回显"><a href="#4-3-角色回显" class="headerlink" title="4.3 角色回显"></a>4.3 角色回显</h2><h3 id="4-3-1-后端"><a href="#4-3-1-后端" class="headerlink" title="4.3.1 后端"></a>4.3.1 后端</h3><p>UserServiceImpl</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">geUsertById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.baseMapper.selectById(id);</span><br><span class="line">        LambdaQueryWrapper&lt;UserRole&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(UserRole::getUserId,id);</span><br><span class="line">        List&lt;UserRole&gt; userRoleList = userRoleMapper.selectList(wrapper);</span><br><span class="line">        List&lt;Integer&gt; roleIdList = userRoleList.stream().</span><br><span class="line">                map(userRole -&gt; &#123;</span><br><span class="line">                    <span class="keyword">return</span> userRole.getRoleId();</span><br><span class="line">                &#125;)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        user.setRoleIdList(roleIdList);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="4-4-用户角色的修改"><a href="#4-4-用户角色的修改" class="headerlink" title="4.4 用户角色的修改"></a>4.4 用户角色的修改</h2><h3 id="4-4-1-后端"><a href="#4-4-1-后端" class="headerlink" title="4.4.1 后端"></a>4.4.1 后端</h3><p>UserServiceImpl</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">//更新用户表</span></span><br><span class="line">        <span class="built_in">this</span>.baseMapper.updateById(user);</span><br><span class="line">        <span class="comment">//清除原有角色</span></span><br><span class="line">        LambdaQueryWrapper&lt;UserRole&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(UserRole::getUserId,user.getId());</span><br><span class="line">        userRoleMapper.delete(wrapper);</span><br><span class="line">        <span class="comment">//设置新的角色</span></span><br><span class="line">        List&lt;Integer&gt; roleIdList = user.getRoleIdList();</span><br><span class="line">        <span class="keyword">if</span>(roleIdList!= <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer roleId : roleIdList) &#123;</span><br><span class="line">                userRoleMapper.insert(<span class="keyword">new</span> <span class="title class_">UserRole</span>(<span class="literal">null</span>, user.getId(), roleId));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="4-5用户角色的删除"><a href="#4-5用户角色的删除" class="headerlink" title="4.5用户角色的删除"></a>4.5用户角色的删除</h2><h3 id="4-5-1-后端"><a href="#4-5-1-后端" class="headerlink" title="4.5.1 后端"></a>4.5.1 后端</h3><p>UserServiceImpl</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUserById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.baseMapper.deleteById(id);</span><br><span class="line">        <span class="comment">//清除原有角色</span></span><br><span class="line">        LambdaQueryWrapper&lt;UserRole&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(UserRole::getUserId,id);</span><br><span class="line">        userRoleMapper.delete(wrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="5-动态路由"><a href="#5-动态路由" class="headerlink" title="5.动态路由"></a>5.动态路由</h1><h2 id="5-1-动态路由上"><a href="#5-1-动态路由上" class="headerlink" title="5.1 动态路由上"></a>5.1 动态路由上</h2><h3 id="5-1-1-后端"><a href="#5-1-1-后端" class="headerlink" title="5.1.1 后端"></a>5.1.1 后端</h3><p>MenuMapper.xml</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getMenuListByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.springbootvue.sys.entity.Menu&quot;</span>&gt;</span></span><br><span class="line">       select</span><br><span class="line">           distinct a.*</span><br><span class="line">       from x_menu a,</span><br><span class="line">            x_role_menu b,</span><br><span class="line">            x_user_role c</span><br><span class="line">       where a.menu_id = b.menu_id</span><br><span class="line">       and b.role_id = c.role_id</span><br><span class="line">       and c.user_id = #&#123;userId&#125;</span><br><span class="line">       and a.parent_id = #&#123;pid&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>yml</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">type-aliases-package:</span> <span class="string">com.example.*.entity</span></span><br></pre></td></tr></table></figure></div>

<p>MenuMapper.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MenuMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Menu&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Menu&gt; <span class="title function_">getMenuListByUserId</span><span class="params">(<span class="meta">@Param(&quot;userId&quot;)</span> Integer userId, <span class="meta">@Param(&quot;pid&quot;)</span> Integer pid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>MenuServiceImpl</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Menu&gt; <span class="title function_">getMenuListByUserId</span><span class="params">(Integer userId)</span> &#123;</span><br><span class="line">        <span class="comment">//一级菜单</span></span><br><span class="line">        List&lt;Menu&gt; menuList = <span class="built_in">this</span>.baseMapper.getMenuListByUserId(userId, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//子菜单</span></span><br><span class="line">        setMenuChildrenByUserId(userId, menuList);</span><br><span class="line">        <span class="keyword">return</span> menuList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setMenuChildrenByUserId</span><span class="params">(Integer userId, List&lt;Menu&gt; menuList)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(menuList != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Menu menu : menuList) &#123;</span><br><span class="line">                List&lt;Menu&gt; subMenuList = <span class="built_in">this</span>.baseMapper.getMenuListByUserId(userId, menu.getMenuId());</span><br><span class="line">                menu.setChildren(subMenuList);</span><br><span class="line">                <span class="comment">//递归</span></span><br><span class="line">                setMenuChildrenByUserId(userId,subMenuList);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>通过user&#x2F;info接口返回数据</p>
<p>UserServiceImpl</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902173227289.png" alt="image-20230902173227289"></p>
<h2 id="5-2-动态路由下"><a href="#5-2-动态路由下" class="headerlink" title="5.2 动态路由下"></a>5.2 动态路由下</h2><h3 id="5-2-1-前端"><a href="#5-2-1-前端" class="headerlink" title="5.2.1 前端"></a>5.2.1 前端</h3><p>（1）修改前端路由配置 src&#x2F;router&#x2F;index.js，路由保留一下部分</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> constantRoutes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/login/index&#x27;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/404&#x27;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;dashboard&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Dashboard&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/dashboard/index&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;神盾局特攻管理系统&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;dashboard&#x27;</span> &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>

<p>（2）获取菜单数据保存到Vuex</p>
<p>src&#x2F;store&#x2F;modules&#x2F;user.js</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902174129641.png" alt="image-20230902174129641"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902174145473.png" alt="image-20230902174145473"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902174210421.png" alt="image-20230902174210421"></p>
<p>src&#x2F;store&#x2F;getters.js</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902174247337.png" alt="image-20230902174247337"></p>
<p>（3）路由转换</p>
<p>src&#x2F;permission.js</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902174444454.png" alt="image-20230902174444454"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902174612681.png" alt="image-20230902174612681"></p>
<p>将一下代码放到最后面</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902174716515.png" alt="image-20230902174716515"></p>
<p>（4）路由合并</p>
<p>src\layout\components\Sidebar\index.vue</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902175004795.png" alt="image-20230902175004795"></p>
<p>动态路由下添加的代码：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由转换</span></span><br><span class="line"><span class="keyword">let</span> myRoutes = <span class="title function_">myFilterAsyncRoutes</span>(store.<span class="property">getters</span>.<span class="property">menuList</span>);</span><br><span class="line"><span class="comment">// 404</span></span><br><span class="line">myRoutes.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 动态添加路由</span></span><br><span class="line">router.<span class="title function_">addRoutes</span>(myRoutes);</span><br><span class="line"><span class="comment">// 存至全局变量</span></span><br><span class="line"><span class="variable language_">global</span>.<span class="property">myRoutes</span> = myRoutes;</span><br><span class="line"><span class="title function_">next</span>(&#123;...to,<span class="attr">replace</span>:<span class="literal">true</span>&#125;)  <span class="comment">// 防止刷新后页面空白</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFilterAsyncRoutes</span>(<span class="params">menuList</span>) &#123;</span><br><span class="line">  menuList.<span class="title function_">filter</span>(<span class="function"><span class="params">menu</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (menu.<span class="property">component</span> === <span class="string">&#x27;Layout&#x27;</span>) &#123;</span><br><span class="line">      menu.<span class="property">component</span> = <span class="title class_">Layout</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(menu.<span class="property">component</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      menu.<span class="property">component</span> = <span class="built_in">require</span>(<span class="string">`@/views/<span class="subst">$&#123;menu.component&#125;</span>.vue`</span>).<span class="property">default</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归处理子菜单</span></span><br><span class="line">    <span class="keyword">if</span> (menu.<span class="property">children</span> &amp;&amp; menu.<span class="property">children</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      menu.<span class="property">children</span> = <span class="title function_">myFilterAsyncRoutes</span>(menu.<span class="property">children</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> menuList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>前后端分离</category>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Vue</tag>
        <tag>MyBatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-vue全栈开发之MyBatisPlus篇</title>
    <url>/2023/08/17/SpringBoot-vue%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B9%8BMyBatisPlus%E7%AF%87/</url>
    <content><![CDATA[<h1 id="一、MyBatisPlus介绍"><a href="#一、MyBatisPlus介绍" class="headerlink" title="一、MyBatisPlus介绍"></a>一、MyBatisPlus介绍</h1><h2 id="1-1-添加依赖"><a href="#1-1-添加依赖" class="headerlink" title="1.1 添加依赖"></a>1.1 添加依赖</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MyBatisPlus依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mysql驱动器依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据连接池druid--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="1-2-全局配置"><a href="#1-2-全局配置" class="headerlink" title="1.2 全局配置"></a>1.2 全局配置</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE.png"></p>
<h1 id="二、MyBatis-Plus-CRUD操作"><a href="#二、MyBatis-Plus-CRUD操作" class="headerlink" title="二、MyBatis-Plus CRUD操作"></a>二、MyBatis-Plus CRUD操作</h1><h2 id="2-1-Mybatis-CRUD注解"><a href="#2-1-Mybatis-CRUD注解" class="headerlink" title="2.1 Mybatis CRUD注解"></a>2.1 Mybatis CRUD注解</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/mybatis%20crud%E6%B3%A8%E8%A7%A3.png"></p>
<p>例子：</p>
<p>UserMapper接口：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot; select * from user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">find</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>UserController：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">query</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userMapper.find();</span><br><span class="line">        System.out.println(list)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;查询用户&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">query</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userMapper.find();</span><br><span class="line">        System.out.println(list)</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">        <span class="comment">//此时数据将自动转为JSON格式用于前端渲染！！！！！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="2-2-Mybatis-CRUD操作"><a href="#2-2-Mybatis-CRUD操作" class="headerlink" title="2.2 Mybatis CRUD操作"></a>2.2 Mybatis CRUD操作</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/crud%E6%93%8D%E4%BD%9C.png"></p>
<h1 id="三、多表查询及分页查询"><a href="#三、多表查询及分页查询" class="headerlink" title="三、多表查询及分页查询"></a>三、多表查询及分页查询</h1><h2 id="3-1-多表查询"><a href="#3-1-多表查询" class="headerlink" title="3.1 多表查询"></a>3.1 多表查询</h2><p>实现复杂关系映射，可以使用@Results注解，@Result注解，@One注解， @Many注解组合完成复杂关系的配置。</p>
<p><img lazyload src="/images/loading.svg" data-src="/../pic/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2.png"></p>
<h3 id="3-2-1-查询用户同时查询所有订单"><a href="#3-2-1-查询用户同时查询所有订单" class="headerlink" title="3.2.1 查询用户同时查询所有订单"></a>3.2.1 查询用户同时查询所有订单</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A22.png"></p>
<p><strong>many后面接的是某个方法的全类名，可以调用另一个mapper方法</strong>，<strong>可以将idd传递给selectByUid方法中的id参数</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="/../pic/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A23.png"></p>
<h3 id="3-2-2-查询订单同时查询所有用户"><a href="#3-2-2-查询订单同时查询所有用户" class="headerlink" title="3.2.2 查询订单同时查询所有用户"></a>3.2.2 查询订单同时查询所有用户</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A24.png"></p>
<p><strong>注意</strong>：uid对应的是user属性</p>
<h2 id="3-2-条件查询"><a href="#3-2-条件查询" class="headerlink" title="3.2 条件查询"></a>3.2 条件查询</h2><p>参考一下blog：</p>
<p><a class="link" href="https://lynn.demolynn.top/article/02b6cffb-4910-4d84-acb1-8e0908205bef#e5a2740a16034c31bdf576e58071553a">MyBatis-plus(基于SpringBoot版) | Demo Lynn <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="3-3-分页查询"><a href="#3-3-分页查询" class="headerlink" title="3.3 分页查询"></a>3.3 分页查询</h2><h3 id="3-3-1-编写配置文件"><a href="#3-3-1-编写配置文件" class="headerlink" title="3.3.1 编写配置文件"></a>3.3.1 编写配置文件</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.atguigu.mybatisplus.mapper&quot;)</span> <span class="comment">//可以将主类中的注解移到此处</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">				interceptor.addInnerInterceptor(<span class="keyword">new</span></span><br><span class="line">				<span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">				<span class="keyword">return</span> interceptor;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-3-2-测试"><a href="#3-3-2-测试" class="headerlink" title="3.3.2 测试"></a>3.3.2 测试</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2.png"></p>
]]></content>
      <categories>
        <category>后端开发</category>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>全栈开发</tag>
        <tag>MyBatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSSM框架</title>
    <url>/2023/08/20/JavaSSM%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="一、Spring简介"><a href="#一、Spring简介" class="headerlink" title="一、Spring简介"></a>一、Spring简介</h1><h2 id="1-1-Spring概述"><a href="#1-1-Spring概述" class="headerlink" title="1.1 Spring概述"></a><strong>1.1 Spring概述</strong></h2><blockquote>
<p>Spring 是最受欢迎的企业级 Java 应用程序开发框架，数以百万的来自世界各地的开发人员使用 Spring 框架来创建性能好、易于测试、可重用的代码。 </p>
<p>Spring 框架是一个开源的 Java 平台，它最初是由 Rod Johnson 编写的，并且于 2003 年 6 月首 次在 Apache 2.0 许可下发布。</p>
<p>Spring 是轻量级的框架，其基础版本只有 2 MB 左右的大小。</p>
<p>Spring 框架的核心特性是可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应 用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO 编程模型来促进良好的编程实践。</p>
</blockquote>
<h2 id="1-2-Spring家族"><a href="#1-2-Spring家族" class="headerlink" title="1.2 Spring家族"></a>1.2 Spring家族</h2><p>项目列表：<a class="link" href="https://spring.io/projects">https://spring.io/projects <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="1-3-Spring-Framework"><a href="#1-3-Spring-Framework" class="headerlink" title="1.3 Spring Framework"></a>1.3 Spring Framework</h2><p>Spring 基础框架，可以视为 Spring 基础设施，基本上任何其他 Spring 项目都是以 Spring Framework 为基础的。</p>
<h3 id="1-3-1-Spring-Framework的特性"><a href="#1-3-1-Spring-Framework的特性" class="headerlink" title="1.3.1 Spring Framework的特性"></a>1.3.1 Spring Framework的特性</h3><p><img lazyload src="/images/loading.svg" data-src="/../SSM/spring%20Framework%E7%9A%84%E7%89%B9%E6%80%A7.png"></p>
<h3 id="1-3-2-Spring-Framework的五个功能模块"><a href="#1-3-2-Spring-Framework的五个功能模块" class="headerlink" title="1.3.2 Spring Framework的五个功能模块"></a>1.3.2 Spring Framework的五个功能模块</h3><table>
<thead>
<tr>
<th>功能模块</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Core Container</td>
<td>核心容器，在 Spring 环境下使用任何功能都必须基于 IOC 容器。</td>
</tr>
<tr>
<td>AOP&amp;Aspects</td>
<td>面向切面编程</td>
</tr>
<tr>
<td>Testing</td>
<td>提供了对 junit 或 TestNG 测试框架的整合。</td>
</tr>
<tr>
<td>Data Access&#x2F;Integration</td>
<td>提供了对数据访问&#x2F;集成的功能。</td>
</tr>
<tr>
<td>Spring MVC</td>
<td>提供了面向Web应用程序的集成功能。</td>
</tr>
</tbody></table>
<h1 id="2-IOC"><a href="#2-IOC" class="headerlink" title="2.IOC"></a>2.IOC</h1><h2 id="2-1-IOC容器"><a href="#2-1-IOC容器" class="headerlink" title="2.1 IOC容器"></a>2.1 IOC容器</h2><h3 id="2-1-1-IOC思想"><a href="#2-1-1-IOC思想" class="headerlink" title="2.1.1 IOC思想"></a>2.1.1 IOC思想</h3><p>IOC：Inversion of Control，翻译过来是<strong>反转控制</strong>。</p>
<blockquote>
<p><strong>①获取资源的传统方式</strong> </p>
<p>自己做饭：买菜、洗菜、择菜、改刀、炒菜，全过程参与，费时费力，必须清楚了解资源创建整个过程 中的全部细节且熟练掌握。</p>
<p>在应用程序中的组件需要获取资源时，传统的方式是组件主动的从容器中获取所需要的资源，在这样的 模式下开发人员往往需要知道在具体容器中特定资源的获取方式，增加了学习成本，同时降低了开发效 率。</p>
<p><strong>②反转控制方式获取资源</strong> </p>
<p>点外卖：下单、等、吃，省时省力，不必关心资源创建过程的所有细节。 </p>
<p>反转控制的思想完全颠覆了应用程序组件获取资源的传统方式：反转了资源的获取方向——改由容器<strong>主动</strong>的将资源推送给需要的组件，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源 的方式即可，极大的降低了学习成本，提高了开发的效率。这种行为也称为查找的被动形式。 </p>
<p>**③DI **</p>
<p><strong>DI：Dependency Injection</strong>，翻译过来是依赖注入。 </p>
<p>DI 是 IOC 的另一种表述方式：即组件以一些预先定义好的方式（例如：setter 方法）接受来自于容器 的资源注入。相对于IOC而言，这种表述更直接。</p>
<p>所以结论是：IOC 就是一种<strong>反转控制</strong>的思想， 而 <strong>DI 是对 IOC 的一种具体实现</strong>。</p>
</blockquote>
<h3 id="2-1-2-IOC容器在Spring中的实现"><a href="#2-1-2-IOC容器在Spring中的实现" class="headerlink" title="2.1.2 IOC容器在Spring中的实现"></a>2.1.2 IOC容器在Spring中的实现</h3><p>Spring 的 IOC 容器就是 IOC 思想的一个落地的产品实现。IOC 容器中管理的组件也叫做 bean。在创建 bean 之前，首先需要创建 IOC 容器。Spring 提供了 IOC 容器的两种实现方式：</p>
<p><strong>①BeanFactory</strong> </p>
<p>这是 IOC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用。</p>
<p> <strong>②ApplicationContext</strong> </p>
<p>BeanFactory 的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory。</p>
<p><strong>③ApplicationContext的主要实现类</strong></p>
<table>
<thead>
<tr>
<th>类型名</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>ClassPathXmlApplicationContext</td>
<td>通过<strong>读取类路径</strong>下的 XML 格式的配置文件创建 IOC 容器 对象</td>
</tr>
<tr>
<td>FileSystemXmlApplicationContext</td>
<td>通过<strong>文件系统路径</strong>读取 XML 格式的配置文件创建 IOC 容 器对象</td>
</tr>
<tr>
<td>ConfigurableApplicationContext</td>
<td>ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、 关闭和刷新上下文的能力。</td>
</tr>
<tr>
<td>WebApplicationContext</td>
<td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对 象，并将对象引入存入 ServletContext 域中。</td>
</tr>
</tbody></table>
<h2 id="2-2-基于XML管理bean"><a href="#2-2-基于XML管理bean" class="headerlink" title="2.2 基于XML管理bean"></a>2.2 基于XML管理bean</h2><h3 id="2-2-1-实验一：入门案例"><a href="#2-2-1-实验一：入门案例" class="headerlink" title="2.2.1 实验一：入门案例"></a>2.2.1 实验一：入门案例</h3><p><strong>①Maven引入依赖</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--springframework依赖：导入spring-context依赖即可导入当前所需所有jar包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--junit测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>②创建类Hellword</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWord</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>③Spring的配置文件中中配置bean</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    配置HelloWorld所对应的bean，即将HelloWorld的对象交给Spring的IOC容器管理</span></span><br><span class="line"><span class="comment">    通过bean标签配置IOC容器所管理的bean</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">        id：设置bean的唯一标识</span></span><br><span class="line"><span class="comment">        class：设置bean所对应类型的全类名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloword&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.HelloWord&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>④创建测试类测试</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;test.xml&quot;);</span><br><span class="line">        HelloWord helloWord = (HelloWord) ac.getBean(&quot;helloword&quot;);</span><br><span class="line">        helloWord.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>⑤思路</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="/../SSM/spring%E6%80%9D%E8%B7%AF.png"></p>
<p><strong>⑥注意</strong></p>
<p>Spring 底层默认通过反射技术调用组件类的无参构造器来创建组件对象，这一点需要注意。如果在需要 无参构造器时，没有无参构造器，则会抛出下面的异常：</p>
<blockquote>
<p>org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘helloworld’ defined in class path resource [applicationContext.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.atguigu.spring.bean.HelloWorld]: No default constructor found; nested exception is java.lang.NoSuchMethodException: com.atguigu.spring.bean.HelloWorld. ()</p>
</blockquote>
<h3 id="2-2-2-实验二：获取bean"><a href="#2-2-2-实验二：获取bean" class="headerlink" title="2.2.2 实验二：获取bean"></a>2.2.2 实验二：获取bean</h3><p><strong>①方式一：根据id获取</strong></p>
<p>由于 id 属性指定了 bean 的唯一标识，所以根据 bean 标签的 id 属性可以精确获取到一个组件对象。 上个实验中我们使用的就是这种方式。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;test.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//xml配置文件中bena的id</span></span><br><span class="line">        <span class="type">HelloWord</span> <span class="variable">helloWord</span> <span class="operator">=</span> (HelloWord) ac.getBean(<span class="string">&quot;helloword&quot;</span>);  </span><br><span class="line">        helloWord.sayHello();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>②方式二：根据类型获取</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;test.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//类名.class</span></span><br><span class="line">        <span class="type">HelloWord</span> <span class="variable">helloWord</span> <span class="operator">=</span> (HelloWord) ac.getBean(HelloWord.class);</span><br><span class="line">        helloWord.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>③方式三：根据id和类型获取</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;test.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//id,类名.class</span></span><br><span class="line">        <span class="type">HelloWord</span> <span class="variable">helloWord</span> <span class="operator">=</span> (HelloWord) ac.getBean(<span class="string">&quot;helloword&quot;</span>, HelloWord.class);</span><br><span class="line">        helloWord.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>④注意</strong></p>
<p>当根据类型获取bean时，要求IOC容器中指定类型的bean有且只能有一个（一个类只能有一个bean）</p>
<p>否则会抛出异常：</p>
<blockquote>
<p>org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type ‘com.atguigu.spring.bean.HelloWorld’ available: expected single matching bean but found 2: helloworldOne,helloworldTwo</p>
</blockquote>
<p><strong>⑤扩展</strong></p>
<p>1.如果组件类实现了接口，根据接口类型可以获取 bean 吗？</p>
<blockquote>
<p>可以，前提是bean唯一</p>
</blockquote>
<p>2.如果一个接口有多个实现类，这些实现类都配置了 bean，根据接口类型可以获取 bean 吗？</p>
<blockquote>
<p>不行，因为bean不唯一</p>
</blockquote>
<p><strong>⑥结论</strong></p>
<p>根据类型来获取bean时，在满足bean唯一性的前提下，其实只是看：『对象 instanceof 指定的类 型』的返回结果，只要返回的是true就可以认定为和类型匹配，能够获取到。</p>
<h3 id="2-2-3-实验三：依赖注入之setter注入"><a href="#2-2-3-实验三：依赖注入之setter注入" class="headerlink" title="2.2.3 实验三：依赖注入之setter注入"></a>2.2.3 实验三：依赖注入之setter注入</h3><p><strong>①创建学生类</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String sex;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Getter和Setter方法省略</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>②在bean中为属性赋值</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    在bean中为属性赋值：</span></span><br><span class="line"><span class="comment">        property标签：通过组件类的setXxx()方法给组件对象设置属性；</span></span><br><span class="line"><span class="comment">        name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关；</span></span><br><span class="line"><span class="comment">        value：指定属性对应的值  </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小明&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>③测试类</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;test.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) ac.getBean(<span class="string">&quot;student&quot;</span>, Student.class);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/../SSM/setter%E6%B3%A8%E5%85%A5%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png"></p>
<h3 id="2-2-4-依赖注入之构造注入"><a href="#2-2-4-依赖注入之构造注入" class="headerlink" title="2.2.4 依赖注入之构造注入"></a><strong>2.2.4 依赖注入之构造注入</strong></h3><p><strong>①在Student类中添加有参构造方法</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String sex)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">      <span class="built_in">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>②配置bean</strong></p>
<p>使用<strong>constructor-arg</strong>标签</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.Student&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">           constructor-arg标签的另外两个属性：</span></span><br><span class="line"><span class="comment">               index：指定参数所在位置的索引（从0开始）</span></span><br><span class="line"><span class="comment">               name属性：指定参数名</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小男&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;19&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>③测试类</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;test.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) ac.getBean(<span class="string">&quot;studentTwo&quot;</span>,Student.class);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-6-实验六：为类类型属性赋值"><a href="#2-2-6-实验六：为类类型属性赋值" class="headerlink" title="2.2.6 实验六：为类类型属性赋值"></a>2.2.6 实验六：为类类型属性赋值</h3><p><strong>①创建班级类</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Clazz</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer clazzId;</span><br><span class="line">    <span class="keyword">private</span> String clazzName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Clazz&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;clazzId=&quot;</span> + clazzId +</span><br><span class="line">                <span class="string">&quot;, clazzName=&#x27;&quot;</span> + clazzName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Clazz</span><span class="params">(Integer clazzId, String clazzName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clazzId = clazzId;</span><br><span class="line">        <span class="built_in">this</span>.clazzName = clazzName;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//省略Getter和Setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>②在Student类中添加一下代码</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Clazz clazz;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> Clazz <span class="title function_">getClazz</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClazz</span><span class="params">(Clazz clazz)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clazz = clazz;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>③方式一：引入外部已声明的bean</strong></p>
<p>配置Clazz类型的bean</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.Clazz&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;猜猜班&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>为Student中的Clazz属性赋值：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentThree&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.Student&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小明&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>测试类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;test.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) ac.getBean(<span class="string">&quot;studentThree&quot;</span>,Student.class);</span><br><span class="line">        <span class="type">Clazz</span> <span class="variable">clazz</span> <span class="operator">=</span> (Clazz)ac.getBean(<span class="string">&quot;clazzOne&quot;</span>, Clazz.class);</span><br><span class="line">        System.out.println(clazz);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>④方式二：内部bean</strong></p>
<p>配置bean：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小明&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 在一个bean中再声明一个bean就是内部bean --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzInner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.Clazz&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;伟大前程&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;222&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>测试类：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;test.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) ac.getBean(<span class="string">&quot;studentFour&quot;</span>,Student.class);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>⑤方式三：级联属性赋值</p>
<p>配置bean</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFive&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.Student&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小明&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;122&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;冲冲冲&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>测试类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;test.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) ac.getBean(<span class="string">&quot;studentFive&quot;</span>,Student.class);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-7-实验七：为数组类型属性赋值"><a href="#2-2-7-实验七：为数组类型属性赋值" class="headerlink" title="2.2.7 实验七：为数组类型属性赋值"></a>2.2.7 实验七：为数组类型属性赋值</h3><p><strong>①修改Student类</strong></p>
<p>添加一下代码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] hobbies;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> Clazz <span class="title function_">getClazz</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> clazz;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> String[] getHobbies() &#123;</span><br><span class="line">     <span class="keyword">return</span> hobbies;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>

<p>②配置bean</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentThree&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小明&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>打麻将<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>③运行结果</p>
<p><img lazyload src="/images/loading.svg" data-src="/../SSM/list%E9%9B%86%E5%90%88%E9%85%8D%E7%BD%AEbean.png"></p>
<h3 id="2-2-8-实验八：为集合类型属性赋值"><a href="#2-2-8-实验八：为集合类型属性赋值" class="headerlink" title="2.2.8 实验八：为集合类型属性赋值"></a>2.2.8 实验八：为集合类型属性赋值</h3><p><strong>①为List集合类型属性赋值</strong></p>
<p>在Clazz添加一下代码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">getStudents</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> students;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudents</span><span class="params">(List&lt;Student&gt; students)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.students = students;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p>配置bean</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.Clazz&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">           为List集合属性赋值</span></span><br><span class="line"><span class="comment">               list标签</span></span><br><span class="line"><span class="comment">                   ref：属性为bean，bean的值为前面注册的bean的id</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3423&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3213&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentFive&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentFour&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentThree&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>若为Set集合类型属性赋值，只需要将其中的list标签改为set标签即可</p>
</blockquote>
<p><strong>②为Map集合类型属性赋值</strong></p>
<p>创建教师类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer teacherId;</span><br><span class="line">    <span class="keyword">private</span> String teacherName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(Integer teacherId, String teacherName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.teacherId = teacherId;</span><br><span class="line">        <span class="built_in">this</span>.teacherName = teacherName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Teacher&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;teacherId=&quot;</span> + teacherId +</span><br><span class="line">                <span class="string">&quot;, teacherName=&#x27;&quot;</span> + teacherName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//省略Getter和Setter方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>在Student类中添加一下代码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String,Teacher&gt; teacherMap;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Map&lt;String, Teacher&gt; <span class="title function_">getTeacherMap</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> teacherMap;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacherMap</span><span class="params">(Map&lt;String, Teacher&gt; teacherMap)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.teacherMap = teacherMap;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>配置bean</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentSix&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小明&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>打麻将<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherOne&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherTwo&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>③引用集合类型的bean</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--list集合类型的bean--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentThree&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentFour&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentFive&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--map集合类型的bean--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherOne&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherTwo&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.Clazz&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4444&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Javaee0222&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;students&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentSix&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.Student&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">           为Map集合配置bean</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小明&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>打麻将<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherMap&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;teacherMap&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>使用util:list、util:map标签必须引入相应的命名空间，可以通过idea的提示功能选择</p>
</blockquote>
<h3 id="2-2-9-实验九：p命名空间"><a href="#2-2-9-实验九：p命名空间" class="headerlink" title="2.2.9 实验九：p命名空间"></a>2.2.9 实验九：p命名空间</h3><p>引入p命名空间后，可以通过以下方式为bean的各个属性赋值</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentSeven&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.Student&quot;</span> <span class="attr">p:id</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;小明&quot;</span> <span class="attr">p:clazz-ref</span>=<span class="string">&quot;clazzOne&quot;</span> <span class="attr">p:teacherMap-ref</span>=<span class="string">&quot;teacherMap&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-10-实验十：引入外部属性文件"><a href="#2-2-10-实验十：引入外部属性文件" class="headerlink" title="2.2.10 实验十：引入外部属性文件"></a>2.2.10 实验十：引入外部属性文件</h3><p><strong>①加入依赖</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 阿里巴巴数据源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>②在resources文件夹下创建后缀名为“properties”</strong></p>
<p>此文件名为<strong>jdbc.properties</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">jdbc.user=root</span><br><span class="line">jdbc.password=ZyL68123</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/spring_test</span><br><span class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure></div>

<p><strong>③引入外部属性文件</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>④配置bean</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-11-实验十一：bean的作用域"><a href="#2-2-11-实验十一：bean的作用域" class="headerlink" title="2.2.11 实验十一：bean的作用域"></a><strong>2.2.11 实验十一：bean的作用域</strong></h3><p><strong>①概念</strong></p>
<p>在Spring中可以通过配置bean标签的scope属性来指定bean的作用域范围，各取值含义参加下表：</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>含义</th>
<th>创建对象的时机</th>
</tr>
</thead>
<tbody><tr>
<td>singleton(默认)</td>
<td>在IOC容器中，这个bean的对象始终为<strong>单实例</strong></td>
<td>IOC容器初始化时</td>
</tr>
<tr>
<td>prototype</td>
<td>这个bean在IOC容器中有<strong>多个实例</strong></td>
<td>获取bean时</td>
</tr>
</tbody></table>
<p>如果是在WebApplicationContext环境下还会有另外两个作用域（但不常用）：</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>request</td>
<td>在一个请求范围内有效</td>
</tr>
<tr>
<td>session</td>
<td>在一个会话范围内有效</td>
</tr>
</tbody></table>
<p><strong>②配置bean</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建</span></span><br><span class="line"><span class="comment">    对象 相当于单例模式</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.example.Student&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>③测试类</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-scope.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) ac.getBean(Student.class);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> (Student) ac.getBean(Student.class);</span><br><span class="line">        System.out.println(student1 == student);</span><br><span class="line">        <span class="comment">//运行结果为true，因为scope的值为prototype；若为singleton，置为false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-12-实验十二：bean的生命周期"><a href="#2-2-12-实验十二：bean的生命周期" class="headerlink" title="2.2.12 实验十二：bean的生命周期"></a>2.2.12 实验十二：bean的生命周期</h3><p><strong>①具体生命周期</strong></p>
<ul>
<li>bean对象创建（调用无参构造器） </li>
<li>给bean对象设置属性 </li>
<li>bean对象初始化之前操作（由bean的后置处理器负责） </li>
<li>bean对象初始化（需在配置bean时指定初始化方法） </li>
<li>bean对象初始化之后操作（由bean的后置处理器负责） </li>
<li>bean对象就绪可以使用 </li>
<li>bean对象销毁（需在配置bean时指定销毁方法）</li>
<li>IOC容器关闭</li>
</ul>
<p><strong>②创建User</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期：2.依赖注入&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期：1.创建对象&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期：3.初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destoryMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期：5.销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注意其中的initMethod()和destroyMethod()，可以通过配置bean指定为初始化和销毁的方法</p>
</blockquote>
<p><strong>③配置bean</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	使用init-method属性指定初始化方法 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	使用destroy-method属性指定销毁方法 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.example.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destoryMethod&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>④测试</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-scope.xml&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期：4、通过IOC容器获取bean并使用&quot;</span>);</span><br><span class="line">        ac.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>⑤bean的后置处理器</strong></p>
<p>bean的后置处理器会在生命周期的初始化前后添加额外的操作，需要实现BeanPostProcessor接口， 且配置到IOC容器中，需要注意的是，bean后置处理器不是单独针对某一个bean生效，而是针对IOC容 器中所有bean都会执行 </p>
<p>创建bean的后置处理器：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;☆☆☆&quot;</span> + beanName + <span class="string">&quot; = &quot;</span> + bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span></span><br><span class="line">            <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;★★★&quot;</span> + beanName + <span class="string">&quot; = &quot;</span> + bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在IOC容器中配置bean</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bean的后置处理器要放入IOC容器才能生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanProcessor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.MyBeanProcessor&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-13-实验十三：FactoryBean"><a href="#2-2-13-实验十三：FactoryBean" class="headerlink" title="2.2.13 实验十三：FactoryBean"></a>2.2.13 实验十三：FactoryBean</h3><p><strong>①简介</strong></p>
<p>FactoryBean是Spring提供的一种整合第三方框架的常用机制。和普通的bean不同，配置一个 FactoryBean类型的bean，在获取bean的时候得到的并不是class属性中配置的这个类的对象，而是 getObject()方法的返回值。通过这种机制，Spring可以帮我们把复杂组件创建的详细过程和繁琐细节都 屏蔽起来，只把最简洁的使用界面展示给我们。</p>
<p><strong>②创建UserFactoryBean</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> User.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>③配置bean</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.UserFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>④测试类</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-factorybean.xml&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) ac.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-14-实验十四：基于xml的自动装配"><a href="#2-2-14-实验十四：基于xml的自动装配" class="headerlink" title="2.2.14 实验十四：基于xml的自动装配"></a>2.2.14 实验十四：基于xml的自动装配</h3><blockquote>
<p>自动装配： </p>
<p>根据指定的策略，在IOC容器中匹配某一个bean，自动为指定的bean中所依赖的类类型或接口类型属性赋值</p>
</blockquote>
<p><strong>①场景模拟</strong></p>
<p>创建类UserController</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>&#123;</span><br><span class="line">        userService.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建接口UserService</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建UserServiceImpl实现接口UserService</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUserDao</span><span class="params">(UserDao userDao)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建接口UserDao</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建UserDaoImpl实现接口UserDAO</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>②配置bean</strong></p>
<blockquote>
<p>使用bean标签的autowire属性设置自动装配效果 </p>
<p>自动装配方式：byType </p>
<p>byType：根据类型匹配IOC容器中的某个兼容类型的bean，为属性自动赋值 </p>
<p>若在IOC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即值为默认值 null </p>
<p>若在IOC中，有多个兼容类型的bean能够为属性赋值，则抛出异常 NoUniqueBeanDefinitionException</p>
</blockquote>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userController&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.example.xml.UserController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.example.xml.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.xml.UserDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>自动装配方式：byName </p>
<p>byName：将自动装配的属性的属性名，作为bean的id在IOC容器中匹配相对应的bean进行赋值</p>
</blockquote>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userController&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.example.xml.UserController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.example.xml.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.example.xml.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.xml.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.xml.UserDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>③测试</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;autowire-xml.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserController</span> <span class="variable">userController</span> <span class="operator">=</span> ac.getBean(UserController.class);</span><br><span class="line">        userController.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="2-3-基于注解管理bean"><a href="#2-3-基于注解管理bean" class="headerlink" title="2.3 基于注解管理bean"></a>2.3 基于注解管理bean</h2><h3 id="2-3-1-实验一：标记与扫描"><a href="#2-3-1-实验一：标记与扫描" class="headerlink" title="2.3.1 实验一：标记与扫描"></a>2.3.1 实验一：标记与扫描</h3><p><strong>①注解</strong></p>
<p>注解本身并不能执行，注解本身仅仅只是做一个标记，具体的功能是框架检测到注解标记的位置，然后针对这个位置按照注解标记的功能来执行具体操作。</p>
<p>本质上：所有一切的操作都是Java代码来完成的，XML和注解只是告诉框架中的Java代码如何执行。</p>
<blockquote>
<p>@Component：将类表示为普通组件</p>
<p>@Controller：将类表示为控制层组件</p>
<p>@Service：将类表示为业务层组件</p>
<p>@Repository：将类表示为持久层组件</p>
</blockquote>
<p><strong>②扫描</strong></p>
<p>Spring 为了知道程序员在哪些地方标记了什么注解，就需要通过扫描的方式，来进行检测。然后根据注 解进行后续操作。</p>
<p><strong>③新建Maven Mdule</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>④创建配置文件：applicationContext.xml</strong></p>
<p><strong>⑤标识组件的常用注解</strong></p>
<blockquote>
<p>@Component：将类标识为普通组件 @Controller：将类标识为控制层组件 @Service：将类标 识为业务层组件 @Repository：将类标识为持久层组件</p>
</blockquote>
<p>问：以上四个注解有什么关系和区别？</p>
<p>通过查看源码我们得知，@Controller、@Service、@Repository这三个注解只是在@Component注解 的基础上起了三个新的名字。</p>
<p> 对于Spring使用IOC容器管理这些组件来说没有区别。所以@Controller、@Service、@Repository这 三个注解只是给开发人员看的，让我们能够便于分辨组件的作用。 </p>
<p>注意：虽然它们本质上一样，但是为了代码的可读性，为了程序结构严谨我们肯定不能随便胡乱标记。</p>
<p><strong>⑥创建组件</strong></p>
<p>创建控制层组件</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建接口UserService</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建业务层组件UserServiceImpl</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建接口UserDao</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建持久层组建UserDaoImpl</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>⑦扫描组件</strong></p>
<p>情况一：最基本的扫描方式</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.example&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>测试类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserController</span> <span class="variable">userController</span> <span class="operator">=</span> ac.getBean(UserController.class);</span><br><span class="line">        System.out.println(userController);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> ac.getBean(UserService.class);</span><br><span class="line">        System.out.println(userService);</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> ac.getBean(UserDao.class);</span><br><span class="line">        System.out.println(userDao);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输出：</span></span><br><span class="line"><span class="comment">         * org.example.UserController@2f490758</span></span><br><span class="line"><span class="comment">         * org.example.UserServiceImpl@101df177</span></span><br><span class="line"><span class="comment">         * org.example.UserDaoImpl@166fa74d</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>情况二：指定要排除的组件</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.example&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- context:exclude-filter标签：指定排除规则 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            type：设置排除或包含的依据</span></span><br><span class="line"><span class="comment">            type=&quot;annotation&quot;，根据注解排除，expression中设置要排除的注解的全类名</span></span><br><span class="line"><span class="comment">            type=&quot;assignable&quot;，根据类型排除，expression中设置要排除的类型的全类名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">expression</span>=<span class="string">&quot;org.example.UserController&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;context:exclude-filter type=&quot;assignable&quot;</span></span><br><span class="line"><span class="comment">        expression=&quot;com.atguigu.controller.UserController&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>情况三：仅扫描指定组件</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.example&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- use-default-filters属性：取值false表示关闭默认扫描规则 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此时必须设置use-default-filters=&quot;false&quot;，因为默认规则即扫描指定包下所有类 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            type：设置排除或包含的依据</span></span><br><span class="line"><span class="comment">            type=&quot;annotation&quot;，根据注解排除，expression中设置要排除的注解的全类名</span></span><br><span class="line"><span class="comment">            type=&quot;assignable&quot;，根据类型排除，expression中设置要排除的类型的全类名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;context:include-filter type=&quot;assignable&quot;</span></span><br><span class="line"><span class="comment">        expression=&quot;com.atguigu.controller.UserController&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>⑨组件所对应的bean的id</strong></p>
<p>使用XML方式管理bean的时候，每个bean都有一个唯一标识，便于在其他地方引用。现在使用注解后，每个组件仍然应该有一个唯一标识。</p>
<blockquote>
<p>默认情况 </p>
<p>类名首字母小写就是bean的id。例如：UserController类对应的bean的id就是userController。 自定义bean的id </p>
<p>可通过标识组件的注解的value属性设置自定义的bean的id </p>
<p>@Service(“userService”)&#x2F;&#x2F;默认为userServiceImpl public class UserServiceImpl implements UserService {}</p>
</blockquote>
<h3 id="2-3-2-实验二：基于注解的自动装配"><a href="#2-3-2-实验二：基于注解的自动装配" class="headerlink" title="2.3.2 实验二：基于注解的自动装配"></a>2.3.2 实验二：基于注解的自动装配</h3><p><strong>①场景模拟</strong></p>
<blockquote>
<p>参考基于xml的自动装配 </p>
<p>在UserController中声明UserService对象 </p>
<p>在UserServiceImpl中声明UserDao对象</p>
</blockquote>
<p><strong>②@Autowired注解</strong></p>
<p>在成员变量上直接标记@Autowired注解即可完成自动装配，不需要提供setXxx()方法。在项目中的正式用法就是这样。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>&#123;</span><br><span class="line">        userService.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>③@Autowired注解的其他细节</strong></p>
<blockquote>
<p>@Autowired注解可以标记在构造器和set方法上</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserController</span><span class="params">(UserService userService)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>&#123;</span><br><span class="line">        userService.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>&#123;</span><br><span class="line">        userService.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>④@Autowired工作流程</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="/../SSM/autowired%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png"></p>
<ul>
<li><p>首先根据所需要的组件类型到IOC容器中查找 </p>
<ul>
<li><p>能够找到唯一的bean：直接执行装配 </p>
</li>
<li><p>如果完全找不到匹配这个类型的bean：装配失败 </p>
</li>
<li><p>和所需类型匹配的bean不止一个 </p>
<ul>
<li><p>没有@Qualifier注解：根据@Autowired标记位置成员变量的变量名作为bean的id进行匹配 </p>
<ul>
<li><p>能够找到：执行装配 </p>
</li>
<li><p>找不到：装配失败</p>
</li>
</ul>
</li>
<li><p>使用@Qualifier注解：根据@Qualifier注解中指定的名称作为bean的id进行匹配 </p>
<ul>
<li><p>能够找到：执行装配 </p>
</li>
<li><p>找不到：装配失败</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userServiceImpl&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>&#123;</span><br><span class="line">        userService.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>@Autowired中有属性required，默认值为true，因此在自动装配无法找到相应的bean时，会配失败 </p>
<p>可以将属性required的值设置为true，则表示能装就装，装不上就不装，此时自动装配的属性为默认值 </p>
<p>但是实际开发时，基本上所有需要装配组件的地方都是必须装配的，用不上这个属性。</p>
</blockquote>
<h1 id="3-AOP"><a href="#3-AOP" class="headerlink" title="3.AOP"></a>3.AOP</h1><h2 id="3-1-场景模拟"><a href="#3-1-场景模拟" class="headerlink" title="3.1 场景模拟"></a>3.1 场景模拟</h2><h3 id="3-1-1-声明接口"><a href="#3-1-1-声明接口" class="headerlink" title="3.1.1 声明接口"></a>3.1.1 声明接口</h3><p>声明计算器接口Calculator，包含加减乘除的抽象方法</p>
<p><img lazyload src="/images/loading.svg" data-src="/../SSM/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B1%BB.png"></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorPureImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-1-2-创建实现类"><a href="#3-1-2-创建实现类" class="headerlink" title="3.1.2 创建实现类"></a>3.1.2 创建实现类</h3><p><img lazyload src="/images/loading.svg" data-src="/../SSM/%E5%B8%A6%E6%97%A5%E5%BF%97%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B1%BB.png"></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorLogImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 方法结束了，结果是：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] sub 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] sub 方法结束了，结果是：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] mul 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] mul 方法结束了，结果是：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] div 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] div 方法结束了，结果是：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-1-4-提出问题"><a href="#3-1-4-提出问题" class="headerlink" title="3.1.4 提出问题"></a>3.1.4 提出问题</h3><p><strong>①现有代码缺陷</strong></p>
<p>针对带日志功能的实现类，我们发现有如下缺陷：</p>
<ul>
<li>对核心业务功能有干扰，导致程序员在开发核心业务功能时分散了精力 </li>
<li>附加功能分散在各个业务功能方法中，不利于统一维护</li>
</ul>
<p><strong>②解决思路</strong></p>
<p>解决这两个问题核心就是：解耦。我们需要把附加功能从业务功能代码中抽取出来。</p>
<p><strong>③困难</strong></p>
<p>解决问题的困难：要抽取的代码在方法内部，靠以前把子类中的重复代码抽取到父类的方式没法解决。 所以需要引入新的技术。</p>
<h2 id="3-2-代理模式"><a href="#3-2-代理模式" class="headerlink" title="3.2 代理模式"></a>3.2 代理模式</h2><h3 id="3-2-1-概念"><a href="#3-2-1-概念" class="headerlink" title="3.2.1 概念"></a>3.2.1 概念</h3><p><strong>①介绍</strong></p>
<p>它的作用就是通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类<strong>间接</strong>调用。让不属于目标方法核心逻辑的代码从目标方法中剥离出来——<strong>解耦</strong>。调用目标方法时先调用代理对象的方法，减少对目标方法的调 用和打扰，同时让附加功能能够集中在一起也有利于统一维护。</p>
<p><strong>②生活中的代理</strong></p>
<ul>
<li>广告商找大明星拍广告需要经过经纪人 </li>
<li>合作伙伴找大老板谈合作要约见面时间需要经过秘书 </li>
<li>房产中介是买卖双方的代理</li>
</ul>
<p><strong>③相关术语</strong></p>
<ul>
<li>代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。 </li>
<li>目标：被代理“套用”了非核心逻辑代码的类、对象、方法。</li>
</ul>
<h3 id="3-2-2-静态代理"><a href="#3-2-2-静态代理" class="headerlink" title="3.2.2 静态代理"></a>3.2.2 静态代理</h3><p>创建静态代理类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorStaticProxy</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span>&#123;</span><br><span class="line">    <span class="comment">// 将被代理的目标对象声明为成员变量</span></span><br><span class="line">    <span class="keyword">private</span> Calculator target;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CalculatorStaticProxy</span><span class="params">(Calculator target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="comment">// 附加功能由代理类中的代理方法来实现</span></span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">        <span class="comment">// 通过目标对象来实现核心业务逻辑</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">addResult</span> <span class="operator">=</span> target.add(i, j);</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 方法结束了，结果是：&quot;</span> + addResult);</span><br><span class="line">        <span class="keyword">return</span> addResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>静态代理确实实现了解耦，但是由于代码都写死了，完全不具备任何的灵活性。就拿日志功能来 说，将来其他地方也需要附加日志，那还得再声明更多个静态代理类，那就产生了大量重复的代 码，日志功能还是分散的，没有统一管理。 </p>
<p>提出进一步的需求：将日志功能集中到一个代理类中，将来有任何日志需求，都通过这一个代理 类来实现。这就需要使用动态代理技术了。</p>
</blockquote>
<h3 id="3-2-3-动态代理"><a href="#3-2-3-动态代理" class="headerlink" title="3.2.3 动态代理"></a>3.2.3 动态代理</h3><p><img lazyload src="/images/loading.svg" data-src="/../SSM/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.png"></p>
<p>生产代理对象的工厂类：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * newProxyInstance()：创建一个代理实例</span></span><br><span class="line"><span class="comment">             * 其中有三个参数：</span></span><br><span class="line"><span class="comment">             * 1、classLoader：加载动态生成的代理类的类加载器</span></span><br><span class="line"><span class="comment">             * 2、interfaces：目标对象实现的所有接口的class对象所组成的数组</span></span><br><span class="line"><span class="comment">             * 3、invocationHandler：设置代理对象实现目标对象方法的过程，即代理类中如何重写接</span></span><br><span class="line"><span class="comment">             口中的抽象方法</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">                    <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * proxy：代理对象</span></span><br><span class="line"><span class="comment">                 * method：代理对象需要实现的方法，即其中需要重写的方法</span></span><br><span class="line"><span class="comment">                 * args：method所对应方法的参数</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，参数：&quot;</span>+ Arrays.toString(args));</span><br><span class="line">                            result = method.invoke(targe	t, args);</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，结果：&quot;</span>+ result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，异常：&quot;</span>+e.getMessage());</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，方法执行完毕&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(classLoader, interfaces,invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-2-4-测试"><a href="#3-2-4-测试" class="headerlink" title="3.2.4 测试"></a>3.2.4 测试</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(<span class="keyword">new</span> <span class="title class_">CalculatorLogImpl</span>());</span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">proxy</span> <span class="operator">=</span> (Calculator) factory.getProxy();</span><br><span class="line">        proxy.div(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行结果</p>
<p><img lazyload src="/images/loading.svg" data-src="/../SSM/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></p>
<h2 id="3-3-AOP相关概念和术语"><a href="#3-3-AOP相关概念和术语" class="headerlink" title="3.3 AOP相关概念和术语"></a>3.3 AOP相关概念和术语</h2><h3 id="3-3-1-概述"><a href="#3-3-1-概述" class="headerlink" title="3.3.1 概述"></a>3.3.1 概述</h3><p>AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面 向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现在不修改源代码的情况 下给程序动态统一添加额外功能的一种技术。</p>
<h3 id="3-3-2-相关术语"><a href="#3-3-2-相关术语" class="headerlink" title="3.3.2 相关术语"></a>3.3.2 相关术语</h3><p><strong>①横切关注点</strong></p>
<ul>
<li>从每个方法中抽取出来的同一类<strong>非核心业务</strong>。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强。</li>
<li>这个概念不是语法层面天然存在的，而是根据附加功能的逻辑上的需要：有十个附加功能，就有十个横 切关注点。</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="/../SSM/%E6%A8%AA%E5%88%87%E5%85%B3%E6%B3%A8%E7%82%B9.png"></p>
<p><strong>②通知</strong></p>
<p>每一个横切关注点(<strong>非核心业务代码</strong>)上要做的事情都需要写一个方法来实现，这样的方法就叫<strong>通知方法</strong>。</p>
<ul>
<li>前置通知：在被代理的目标方法前执行 </li>
<li>返回通知：在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>） </li>
<li>异常通知：在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>） </li>
<li>后置通知：在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>） </li>
<li>环绕通知：使用try…catch…finally结构围绕整个被代理的目标方法，包括上面四种通知对应的所有位置</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="/../SSM/%E9%80%9A%E7%9F%A5.png"></p>
<p><strong>③切面</strong></p>
<p>封装通知方法的类。</p>
<p><img lazyload src="/images/loading.svg" data-src="/../SSM/%E5%88%87%E9%9D%A2.png"></p>
<p><strong>④目标</strong></p>
<p>被代理的对象</p>
<p><strong>⑤代理</strong></p>
<p>向目标对象应用通知之后创建的代理对象。</p>
<p><strong>⑥连接点</strong></p>
<p>这也是一个纯逻辑概念，不是语法定义的。</p>
<p>把方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行的顺序看成y轴，x轴和y轴的交叉点就是连接点。</p>
<p><img lazyload src="/images/loading.svg" data-src="/../SSM/%E5%88%87%E5%85%A5%E5%85%8D.png"></p>
<p><strong>⑦切入点</strong></p>
<p>定位连接点的方式。</p>
<p>每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说）。</p>
<p>如果把连接点看作数据库中的记录，那么切入点就是查询记录的 SQL 语句。</p>
<p>Spring 的 AOP 技术可以通过<strong>切入点</strong>定位到特定的<strong>连接点</strong>。</p>
<p>切点通过 org.springframework.aop.Pointcut 接口进行描述，它<strong>使用类和方法</strong>作为连接点的查询条件。</p>
<h3 id="3-3-3-作用"><a href="#3-3-3-作用" class="headerlink" title="3.3.3 作用"></a>3.3.3 作用</h3><ul>
<li>简化代码：把方法中固定位置的重复的代码<strong>抽取</strong>出来，让被抽取的方法更专注于自己的核心功能，提高内聚性。 </li>
<li>代码增强：把特定的功能封装到切面类中，看哪里有需要，就往上套，被<strong>套用</strong>了切面逻辑的方法就被切面给增强了。</li>
</ul>
<h2 id="3-4-基于注解的AOP"><a href="#3-4-基于注解的AOP" class="headerlink" title="3.4 基于注解的AOP"></a>3.4 基于注解的AOP</h2><h3 id="3-4-1-技术说明"><a href="#3-4-1-技术说明" class="headerlink" title="3.4.1 技术说明"></a>3.4.1 技术说明</h3><p><img lazyload src="/images/loading.svg" data-src="/../SSM/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84AOP.png"></p>
<ul>
<li>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因为这个技术要求<strong>代理对象和目标对象实现同样的接口</strong>（兄弟两个拜把子模式）。 </li>
<li>cglib：通过<strong>继承被代理的目标类</strong>（认干爹模式）实现代理，所以不需要目标类实现接口。 </li>
<li>AspectJ：本质上是静态代理，<strong>将代理逻辑“织入”被代理的目标类编译得到的字节码文件</strong>，所以最终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。</li>
</ul>
<h3 id="3-4-2-准备工作"><a href="#3-4-2-准备工作" class="headerlink" title="3.4.2 准备工作"></a>3.4.2 准备工作</h3><p><strong>①添加依赖</strong></p>
<p>在IOC所需依赖基础上再加入下面依赖即可：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-aspects会帮我们传递过来aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>②被代理的目标资源</strong></p>
<p>接口：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>实现类：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorPureImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-4-3-创建切面类并配置"><a href="#3-4-3-创建切面类并配置" class="headerlink" title="3.4.3 创建切面类并配置"></a>3.4.3 创建切面类并配置</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @Aspect表示这个类是一个切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="comment">// @Component注解保证这个切面类能够放入IOC容器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(public int CalculatorPurelmpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">        System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* CalculatorPurelmpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Logger--&gt;后置通知，方法名：&quot;</span>+methodName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(* CalculatorPureImpl.*(..))&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningMethod</span><span class="params">(JoinPoint joinPoint, Object result)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Logger--&gt;返回通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，结果：&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(* CalculatorPureImpl.*(..))&quot;, throwing = &quot;ex&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingMethod</span><span class="params">(JoinPoint joinPoint, Throwable ex)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Logger--&gt;异常通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，异常：&quot;</span>+ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* CalculatorPureImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">aroundMethod</span><span class="params">(ProceedingJoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行之前&quot;</span>);</span><br><span class="line">            <span class="comment">//目标对象（连接点）方法的执行</span></span><br><span class="line">            result = joinPoint.proceed();</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法返回值之后&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法出现异常时&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行完毕&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>配置bean</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.example.AOP&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="3-4-4-各种通知"><a href="#3-4-4-各种通知" class="headerlink" title="3.4.4 各种通知"></a>3.4.4 各种通知</h3><ul>
<li>前置通知：使用@Before注解标识，在被代理的目标方法前执行 </li>
<li>返回通知：使用@AfterReturning注解标识，在被代理的目标方法成功结束后执行（寿终正寝） </li>
<li>异常通知：使用@AfterThrowing注解标识，在被代理的目标方法异常结束后执行（死于非命） </li>
<li>后置通知：使用@After注解标识，在被代理的目标方法最终结束后执行（盖棺定论） </li>
<li>环绕通知：使用@Around注解标识，使用try…catch…finally结构围绕整个被代理的目标方法，包 括上面四种通知对应的所有位</li>
</ul>
<p>各种通知的执行顺序： </p>
<blockquote>
<ul>
<li>Spring版本5.3.x以前： </li>
<li>前置通知 </li>
<li>目标操作 	</li>
<li>后置通知 </li>
<li>返回通知或异常通知 </li>
<li>Spring版本5.3.x以后： </li>
<li>前置通知 </li>
<li>目标操作 返</li>
<li>回通知或异常通知 </li>
<li>后置通知</li>
</ul>
</blockquote>
<h3 id="3-4-5-切入点表达式语法"><a href="#3-4-5-切入点表达式语法" class="headerlink" title="3.4.5 切入点表达式语法"></a>3.4.5 切入点表达式语法</h3><p><strong>①作用</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="/../SSM/%E5%88%87%E5%85%A5%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95.png"></p>
<p><strong>②语法细节</strong></p>
<ul>
<li><p>用*号代替“权限修饰符”和“返回值”部分表示“权限修饰符”和“返回值”不限 </p>
</li>
<li><p>在包名的部分，一个*号只能代表包的层次结构中的一层，表示这一层是任意的。</p>
<ul>
<li>如：*.Hello匹配com.Hello，不匹配com.atguigu.Hello</li>
</ul>
</li>
<li><p>在包名的部分，使用“*..”表示包名任意、包的层次深度任意</p>
</li>
<li><p>在类名的部分，类名部分整体用*号代替，表示类名任意 </p>
</li>
<li><p>在类名的部分，可以使用*号代替类名的一部分</p>
<ul>
<li>例如：*Service匹配所有名称以Service结尾的类或接口</li>
</ul>
</li>
<li><p>在方法名部分，可以使用*号表示方法名任意 </p>
</li>
<li><p>在方法名部分，可以使用*号代替方法名的一部分</p>
<ul>
<li>例如：*Operation匹配所有方法名以Operation结尾的方法</li>
</ul>
</li>
<li><p>在方法参数列表部分，使用(..)表示参数列表任意 </p>
</li>
<li><p>在方法参数列表部分，使用(int,..)表示参数列表以一个int类型的参数开头</p>
</li>
<li><p>在方法参数列表部分，基本数据类型和对应的包装类型是不一样的</p>
<ul>
<li>切入点表达式中使用 int 和实际方法中 Integer 是不匹配的</li>
</ul>
</li>
<li><p>在方法返回值部分，如果想要明确指定一个返回值类型，那么<strong>必须同时写明权限修饰符</strong></p>
<ul>
<li><p>例如：execution(public int ..Service.*(.., int)) 正确</p>
</li>
<li><p>例如：execution(* int ..Service.*(.., int)) 错误</p>
</li>
</ul>
</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="/../SSM/%E8%AF%AD%E6%B3%95%E7%BB%86%E8%8A%82.png"></p>
<h3 id="3-4-6-重用切入点表达式"><a href="#3-4-6-重用切入点表达式" class="headerlink" title="3.4.6 重用切入点表达式"></a>3.4.6 重用切入点表达式</h3><p><strong>①声明</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.atguigu.aop.annotation.*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>②在同一个切面中使用</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>③在不同切面中使用</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-4-7-获取通知的相关信息"><a href="#3-4-7-获取通知的相关信息" class="headerlink" title="3.4.7 获取通知的相关信息"></a>3.4.7 获取通知的相关信息</h3><p><strong>①获取连接点信息</strong></p>
<p>获取连接点信息可以在通知方法的参数位置设置JoinPoint类型的形参</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;execution(public int CalculatorPureImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">//获取连接点的签名信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        <span class="comment">//获取目标方法到的实参信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">        System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>②获取目标方法的返回值</strong></p>
<p>@AfterReturning中的属性returning，用来将通知方法的某个形参，接收目标方法的返回值</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(value = &quot;execution(* CalculatorPureImpl.*(..))&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningMethod</span><span class="params">(JoinPoint joinPoint, Object result)</span>&#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">       System.out.println(<span class="string">&quot;Logger--&gt;返回通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，结果：&quot;</span>+result);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>③获取目标方法的异常</strong></p>
<p>@AfterThrowing中的属性throwing，用来将通知方法的某个形参，接收目标方法的异常</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;execution(* CalculatorPureImpl.*(..))&quot;, throwing = &quot;ex&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingMethod</span><span class="params">(JoinPoint joinPoint, Throwable ex)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Logger--&gt;异常通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，异常：&quot;</span>+ex);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-4-8-环绕通知"><a href="#3-4-8-环绕通知" class="headerlink" title="3.4.8 环绕通知"></a>3.4.8 环绕通知</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;execution(* CalculatorPureImpl.*(..))&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">aroundMethod</span><span class="params">(ProceedingJoinPoint joinPoint)</span>&#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">       <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">       <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行之前&quot;</span>);</span><br><span class="line">           <span class="comment">//目标对象（连接点）方法的执行</span></span><br><span class="line">           result = joinPoint.proceed();</span><br><span class="line">           System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法返回值之后&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">           throwable.printStackTrace();</span><br><span class="line">           System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法出现异常时&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行完毕&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-4-9-切面的优先级"><a href="#3-4-9-切面的优先级" class="headerlink" title="3.4.9 切面的优先级"></a>3.4.9 切面的优先级</h3><p>相同目标方法上同时存在多个切面时，切面的优先级控制切面的<strong>内外嵌套</strong>顺序。</p>
<ul>
<li>优先级高的切面：外面 </li>
<li>优先级低的切面：里面</li>
</ul>
<p>使用@Order注解可以控制切面的优先级：</p>
<ul>
<li>@Order(较小的数)：优先级高 </li>
<li>@Order(较大的数)：优先级低</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="/../SSM/%E5%88%87%E9%9D%A2%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7.png"></p>
<h2 id="3-5-基于XML的AOP-了解"><a href="#3-5-基于XML的AOP-了解" class="headerlink" title="3.5 基于XML的AOP(了解)"></a>3.5 基于XML的AOP(了解)</h2><h3 id="3-5-1-准备工作"><a href="#3-5-1-准备工作" class="headerlink" title="3.5.1 准备工作"></a>3.5.1 准备工作</h3><p>参考基于注解的AOP环境</p>
<h3 id="3-5-2-实现"><a href="#3-5-2-实现" class="headerlink" title="3.5.2 实现"></a>3.5.2 实现</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.example.AOP&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--配置切面类--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;loggerAspect&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* CalculatorPureImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;afterMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturningMethod&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;afterThrowingMethod&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;ex&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;aroundMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;validateAspect&quot;</span> <span class="attr">order</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;validateBeforeMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="4-声明事务"><a href="#4-声明事务" class="headerlink" title="4.声明事务"></a>4.声明事务</h1><h2 id="4-1-JdbcTemplate"><a href="#4-1-JdbcTemplate" class="headerlink" title="4.1 JdbcTemplate"></a>4.1 JdbcTemplate</h2><h3 id="4-1-1-简介"><a href="#4-1-1-简介" class="headerlink" title="4.1.1 简介"></a>4.1.1 简介</h3><p>Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</p>
<h3 id="4-1-2-准备工作"><a href="#4-1-2-准备工作" class="headerlink" title="4.1.2 准备工作"></a>4.1.2 准备工作</h3><p><strong>①加入依赖</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring 持久化层支持jar包 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个jar包</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Spring 测试相关 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>②创建jdbc.properties</strong></p>
<div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">atguigu</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure></div>

<p><strong>③配置Spring配置文件</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入外部属性文件 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;atguigu.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;atguigu.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;atguigu.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;atguigu.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 配置 JdbcTemplate --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 装配数据源 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4-1-3-测试"><a href="#4-1-3-测试" class="headerlink" title="4.1.3 测试"></a>4.1.3 测试</h3><p><strong>①在测试类装配 JdbcTemplate</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:spring-jdbc.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTemplateTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>②测试增删改功能</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//测试增删改功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_emp values(null,?,?,?)&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>③查询一条数据为实体类对象</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//查询一条数据为一个实体类对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectEmpById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_emp where id = ?&quot;</span>;</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;</span><br><span class="line">    (Emp.class), <span class="number">1</span>);</span><br><span class="line">    System.out.println(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>④查询多条数据为一个list集合</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//查询多条数据为一个list集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_emp&quot;</span>;</span><br><span class="line">    List&lt;Emp&gt; list = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;</span><br><span class="line">    (Emp.class));</span><br><span class="line">    list.forEach(emp -&gt; System.out.println(emp));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>⑤查询单行单列的值</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//查询单行单列的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(id) from t_emp&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="4-2-声明式事务的概念"><a href="#4-2-声明式事务的概念" class="headerlink" title="4.2 声明式事务的概念"></a>4.2 声明式事务的概念</h2><h3 id="4-2-1-编程式事务"><a href="#4-2-1-编程式事务" class="headerlink" title="4.2.1 编程式事务"></a>4.2.1 编程式事务</h3><p>事务功能的相关操作全部通过自己编写代码来实现：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ...;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="comment">// 开启事务：关闭事务的自动提交</span></span><br><span class="line">    conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 核心操作</span></span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    conn.commit();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    <span class="comment">// 回滚事务</span></span><br><span class="line">    conn.rollBack();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">// 释放数据库连接</span></span><br><span class="line">	conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>编程式的实现方式存在缺陷：</p>
<ul>
<li>细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己来完成，比较繁琐。 </li>
<li>代码复用性不高：如果没有有效抽取出来，每次实现功能都需要自己编写代码，代码就没有得到复用。</li>
</ul>
<h3 id="4-2-2-声明式事务"><a href="#4-2-2-声明式事务" class="headerlink" title="4.2.2 声明式事务"></a>4.2.2 声明式事务</h3><p>既然事务控制的代码有规律可循，代码的结构基本是确定的，所以框架就可以将固定模式的代码抽取出来，进行相关的封装。</p>
<p>封装起来后，我们只需要在配置文件中进行简单的配置即可完成操作。</p>
<ul>
<li>好处1：提高开发效率 </li>
<li>好处2：消除了冗余的代码 </li>
<li>好处3：框架会综合考虑相关领域中在实际开发环境下有可能遇到的各种问题，进行了健壮性、性 能等各个方面的优化</li>
</ul>
<p>所以，我们可以总结下面两个概念：</p>
<ul>
<li><strong>编程式</strong>：<strong>自己写代码</strong>实现功能 </li>
<li><strong>声明式</strong>：通过<strong>配置</strong>让<strong>框架</strong>实现功能</li>
</ul>
<h2 id="4-3-基于注解的声明式事务"><a href="#4-3-基于注解的声明式事务" class="headerlink" title="4.3 基于注解的声明式事务"></a>4.3 基于注解的声明式事务</h2><h3 id="4-3-1-准备工作"><a href="#4-3-1-准备工作" class="headerlink" title="4.3.1 准备工作"></a>4.3.1 准备工作</h3><p><strong>①加入依赖</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring 持久化层支持jar包 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个</span></span><br><span class="line"><span class="comment">jar包 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring 测试相关 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>②创建jdbc.properties文件</strong></p>
<div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">atguigu</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure></div>

<p><strong>③配置spring的配置文件</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  导入外部属性文件</span></span><br><span class="line"><span class="comment">    &lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot; /&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring.tx.annotation&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc:mysql://localhost:3306/spring_test&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;com.mysql.cj.jdbc.Driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;root&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;123456&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 JdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 装配数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>④创建表</strong></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_book` (</span><br><span class="line">    `book_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `book_name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;图书名称&#x27;</span>,</span><br><span class="line">    `price` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;价格&#x27;</span>,</span><br><span class="line">    `stock` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;库存（无符号）&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`book_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `t_book`(`book_id`,`book_name`,`price`,`stock`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;斗破苍</span></span><br><span class="line"><span class="string">穹&#x27;</span>,<span class="number">80</span>,<span class="number">100</span>),(<span class="number">2</span>,<span class="string">&#x27;斗罗大陆&#x27;</span>,<span class="number">50</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_user` (</span><br><span class="line">    `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `username` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    `balance` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;余额（无符号）&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`user_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `t_user`(`user_id`,`username`,`balance`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>⑤创建组件</strong></p>
<p>创建BookController</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span>&#123;</span><br><span class="line">        bookService.buyBook(bookId,userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建接口BookService</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建实现类BookServiceImpl</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">    	<span class="comment">//查询图书的价格</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">        <span class="comment">//更新图书的库存</span></span><br><span class="line">        bookDao.updateStock(bookId);</span><br><span class="line">        <span class="comment">//更新用户的余额</span></span><br><span class="line">        bookDao.updateBalance(userId, price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建接口BookDao</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    Integer <span class="title function_">getPriceByBookId</span><span class="params">(Integer bookId)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateStock</span><span class="params">(Integer bookId)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateBalance</span><span class="params">(Integer userId, Integer price)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建实现类BookDaoImpl</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getPriceByBookId</span><span class="params">(Integer bookId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select price from t_book where book_id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, Integer.class, bookId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateStock</span><span class="params">(Integer bookId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_book set stock = stock - 1 where book_id = ?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, bookId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBalance</span><span class="params">(Integer userId, Integer price)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_user set balance = balance - ? where user_id =?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, price, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="4-3-2-测试无事务情况"><a href="#4-3-2-测试无事务情况" class="headerlink" title="4.3.2 测试无事务情况"></a>4.3.2 测试无事务情况</h3><p><strong>①测试类</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:tx-annotation.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxByAnnotationTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookController bookController;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBuyBook</span><span class="params">()</span>&#123;</span><br><span class="line">        bookController.buyBook(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>②模拟场景</strong></p>
<ul>
<li>用户购买图书，先查询图书的价格，再更新图书的库存和用户的余额 </li>
<li>假设用户id为1的用户，购买id为1的图书 </li>
<li>用户余额为50，而图书价格为80 </li>
<li>购买图书之后，用户的余额为-30，数据库中余额字段设置了无符号，因此无法将-30插入到余额字段 </li>
<li>此时执行sql语句会抛出SQLException</li>
</ul>
<p><strong>③观察结果</strong></p>
<ul>
<li>因为没有添加事务，图书的库存更新了，但是用户的余额没有更新 </li>
<li>显然这样的结果是错误的，购买图书是一个完整的功能，更新库存和更新余额要么都成功要么都失败</li>
</ul>
<h3 id="4-3-3-添加事务"><a href="#4-3-3-添加事务" class="headerlink" title="4.3.3 添加事务"></a>4.3.3 添加事务</h3><p><strong>①添加事务配置</strong></p>
<p>在spring配置文件中配置</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        开启事务的注解驱动</span></span><br><span class="line"><span class="comment">        通过注解@Transactional所标识的方法或标识的类中所有的方法，都会被事务管理器管理事务</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就</span></span><br><span class="line"><span class="comment">        是这个默认值，则可以省略这个属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>注意：导入的名称空间需要 <strong>tx 结尾</strong>的那个。</p>
<p><img lazyload src="/images/loading.svg" data-src="/../SSM/tx%E7%BB%93%E5%B0%BE.png"></p>
<p><strong>②添加事务注解</strong></p>
<p>因为service层表示业务逻辑层，一个方法表示一个完成的功能，因此处理事务一般在service层处理 </p>
<p>在BookServiceImpl的buybook()添加注解**@Transactional**</p>
<p><strong>③观察结果</strong></p>
<p>由于使用了Spring的声明式事务，更新库存和更新余额都没有执行</p>
<h3 id="4-3-4-Transactional注解标识的位置"><a href="#4-3-4-Transactional注解标识的位置" class="headerlink" title="4.3.4 @Transactional注解标识的位置"></a>4.3.4 @Transactional注解标识的位置</h3><ul>
<li>@Transactional标识在方法上，则只会影响该方法 </li>
<li>@Transactional标识的类上，则会影响类中所有的方法</li>
</ul>
<h3 id="4-3-5-事务属性：只读"><a href="#4-3-5-事务属性：只读" class="headerlink" title="4.3.5 事务属性：只读"></a>4.3.5 事务属性：只读</h3><p><strong>①介绍</strong></p>
<p>对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作<strong>不涉及写操作</strong>。这样数据库就能够针对查询操作来进行优化。</p>
<p><strong>②使用方式</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">	<span class="comment">//查询图书的价格</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">    <span class="comment">//更新图书的库存</span></span><br><span class="line">    bookDao.updateStock(bookId);</span><br><span class="line">    <span class="comment">//更新用户的余额</span></span><br><span class="line">    bookDao.updateBalance(userId, price);</span><br><span class="line">    <span class="comment">//System.out.println(1/0);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>③注意</strong></p>
<p>对增删改操作设置只读会抛出下面异常： </p>
<p>Caused by: java.sql.SQLException: Connection is read-only. Queries leading to data modification are not allowed</p>
<h3 id="4-3-6-事务属性：超时"><a href="#4-3-6-事务属性：超时" class="headerlink" title="4.3.6 事务属性：超时"></a>4.3.6 事务属性：超时</h3><p><strong>①介绍</strong></p>
<p>事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间占用资源，大概率是因为程序运行出现了问题（可能是Java程序或MySQL数据库或网络连接等等）。</p>
<p>此时这个<strong>很可能出问题的程序</strong>应该<strong>被回滚</strong>，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行。</p>
<p>概括来说就是一句话：<strong>超时回滚，释放资源</strong>。</p>
<p><strong>②使用方式</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(timeout = 3)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    	TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    	e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询图书的价格</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">    <span class="comment">//更新图书的库存</span></span><br><span class="line">    bookDao.updateStock(bookId);</span><br><span class="line">    <span class="comment">//更新用户的余额</span></span><br><span class="line">    bookDao.updateBalance(userId, price);</span><br><span class="line">    <span class="comment">//System.out.println(1/0);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>③观察结果</strong></p>
<p>执行过程中抛出异常：</p>
<p>org.springframework.transaction.<strong>TransactionTimedOutException</strong>: Transaction timed out: deadline was Fri Jun 04 16:25:39 CST 2022</p>
<h3 id="4-3-7-事务属性：回滚策略"><a href="#4-3-7-事务属性：回滚策略" class="headerlink" title="4.3.7 事务属性：回滚策略"></a>4.3.7 事务属性：回滚策略</h3><p><strong>①介绍</strong></p>
<p>声明式事务<strong>默认</strong>只针对运行时异常回滚，编译时异常不回滚。</p>
<p>可以通过@Transactional中相关属性设置回滚策略</p>
<ul>
<li>rollbackFor属性：需要设置一个Class类型的对象 </li>
<li>rollbackForClassName属性：需要设置一个字符串类型的全类名 </li>
<li>noRollbackFor属性：需要设置一个Class类型的对象 </li>
<li>rollbackFor属性：需要设置一个字符串类型的全类名</li>
</ul>
<p><strong>②使用方式</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(noRollbackFor = ArithmeticException.class)</span></span><br><span class="line"><span class="comment">//@Transactional(noRollbackForClassName = &quot;java.lang.ArithmeticException&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">    <span class="comment">//查询图书的价格</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">    <span class="comment">//更新图书的库存</span></span><br><span class="line">    bookDao.updateStock(bookId);</span><br><span class="line">    <span class="comment">//更新用户的余额</span></span><br><span class="line">    bookDao.updateBalance(userId, price);</span><br><span class="line">    System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>③观察结果</strong></p>
<p>虽然购买图书功能中出现了数学运算异常（ArithmeticException），但是我们设置的回滚策略是，当 出现ArithmeticException不发生回滚，因此购买图书的操作正常执行</p>
<h3 id="4-3-8-事务属性：事务隔离级别"><a href="#4-3-8-事务属性：事务隔离级别" class="headerlink" title="4.3.8 事务属性：事务隔离级别"></a>4.3.8 事务属性：事务隔离级别</h3><p><strong>①介绍</strong></p>
<p>数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。一个事 务与其他事务隔离的程度称为隔离级别。SQL标准中规定了多种事务隔离级别，不同隔离级别对应不同 的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。隔离级别一共有四种：</p>
<ul>
<li>读未提交：READ UNCOMMITTED</li>
</ul>
<p>​		允许Transaction01读取Transaction02未提交的修改。</p>
<ul>
<li>读已提交：READ COMMITTED、</li>
</ul>
<p>​		要求Transaction01只能读取Transaction02已提交的修改。</p>
<ul>
<li>可重复读：REPEATABLE READ</li>
</ul>
<p>​		确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它 事务对这个字段进行更新。</p>
<ul>
<li>串行化：SERIALIZABLE</li>
</ul>
<p>​		确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它 事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。</p>
<p>各个隔离级别解决并发问题的能力见下表：</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复度读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>READ UNCOMMITTED</td>
<td>有</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td>READ COMMITTED</td>
<td>无</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td>REPEATABLE READ</td>
<td>无</td>
<td>无</td>
<td>有</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>无</td>
<td>无</td>
<td>无</td>
</tr>
</tbody></table>
<p>各种数据库产品对事务隔离级别的支持程度：</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>Oracle</th>
<th>MySQL</th>
</tr>
</thead>
<tbody><tr>
<td>READ UNCOMMITTED</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>READ COMMITTED</td>
<td>√(默认)</td>
<td>√</td>
</tr>
<tr>
<td>REPEATABLE READ</td>
<td>×</td>
<td>√(默认)</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>√</td>
<td>√</td>
</tr>
</tbody></table>
<p><strong>②使用方式</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(isolation = Isolation.DEFAULT)</span><span class="comment">//使用数据库默认的隔离级别</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_UNCOMMITTED)</span><span class="comment">//读未提交</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED)</span><span class="comment">//读已提交</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.REPEATABLE_READ)</span><span class="comment">//可重复读</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.SERIALIZABLE)</span><span class="comment">//串行化</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4-3-9-事务属性：事务传播行为"><a href="#4-3-9-事务属性：事务传播行为" class="headerlink" title="4.3.9 事务属性：事务传播行为"></a>4.3.9 事务属性：事务传播行为</h3><p><strong>①介绍</strong></p>
<p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。</p>
<p><strong>②测试</strong></p>
<p>创建接口CheckoutService：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CheckoutService</span> &#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(Integer[] bookIds, Integer userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建实现类CheckoutServiceImpl：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckoutServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CheckoutService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="comment">//一次购买多本图书</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(Integer[] bookIds, Integer userId)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Integer bookId : bookIds) &#123;</span><br><span class="line">        	bookService.buyBook(bookId, userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在BookController中添加方法：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CheckoutService checkoutService;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(Integer[] bookIds, Integer userId)</span>&#123;</span><br><span class="line">    	checkoutService.checkout(bookIds, userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在数据库中将用户的余额修改为100元</p>
<p><strong>③观察结果</strong></p>
<p>可以通过@Transactional中的propagation属性设置事务传播行为 </p>
<p>修改BookServiceImpl中buyBook()上，注解@Transactional的propagation属性</p>
<p>@Transactional(propagation &#x3D; Propagation.REQUIRED)，默认情况，表示如果当前线程上有已经开 启的事务可用，那么就在这个事务中运行。经过观察，购买图书的方法buyBook()在checkout()中被调 用，checkout()上有事务注解，因此在此事务中执行。所购买的两本图书的价格为80和50，而用户的余 额为100，因此在购买第二本图书时余额不足失败，导致整个checkout()回滚，即只要有一本书买不 了，就都买不了</p>
<p>@Transactional(propagation &#x3D; Propagation.REQUIRES_NEW)，表示不管当前线程上是否有已经开启的事务，都要开启新事务。同样的场景，每次购买图书都是在buyBook()的事务中执行，因此第一本图书购买成功，事务结束，第二本图书购买失败，只在第二次的buyBook()中回滚，购买第一本图书不受 影响，即能买几本就买几本</p>
<h2 id="4-4-基于XML的声明式事务"><a href="#4-4-基于XML的声明式事务" class="headerlink" title="4.4 基于XML的声明式事务"></a>4.4 基于XML的声明式事务</h2><h3 id="4-3-1-场景模拟"><a href="#4-3-1-场景模拟" class="headerlink" title="4.3.1 场景模拟"></a>4.3.1 场景模拟</h3><p>参考基于注解的声明式事务</p>
<h3 id="4-3-2-修改Spring配置文件"><a href="#4-3-2-修改Spring配置文件" class="headerlink" title="4.3.2 修改Spring配置文件"></a>4.3.2 修改Spring配置文件</h3><p>将Spring配置文件中去掉tx:annotation-driven 标签，并添加配置：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- tx:advice标签：配置事务通知 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id属性：给事务通知标签设置唯一标识，便于引用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- transaction-manager属性：关联事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- tx:method标签：配置具体的事务方法 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- name属性：指定方法名，可以使用星号代表多个字符 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- read-only属性：设置只读属性 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- rollback-for属性：设置回滚的异常 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- no-rollback-for属性：设置不回滚的异常 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- isolation属性：设置事务的隔离级别 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- timeout属性：设置事务的超时属性 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- propagation属性：设置事务的传播行为 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;save*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="二、SpringMVC"><a href="#二、SpringMVC" class="headerlink" title="二、SpringMVC"></a>二、SpringMVC</h1><h2 id="1-SpringMVC简介"><a href="#1-SpringMVC简介" class="headerlink" title="1.SpringMVC简介"></a>1.SpringMVC简介</h2><h3 id="1-1-什么是MVC"><a href="#1-1-什么是MVC" class="headerlink" title="1.1 什么是MVC"></a>1.1 什么是MVC</h3><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分 </p>
<p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p>
<p>JavaBean分为两类：</p>
<ul>
<li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等 </li>
<li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li>
</ul>
<p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据 </p>
<p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p>
<p>MVC的工作流程： 用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller 调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器</p>
<h3 id="1-2-什么是SpringMVC"><a href="#1-2-什么是SpringMVC" class="headerlink" title="1.2 什么是SpringMVC"></a>1.2 什么是SpringMVC</h3><p>SpringMVC是Spring的一个后续产品，是Spring的一个子项目</p>
<p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、 WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目 表述层开发的<strong>首选方案</strong>。</p>
<blockquote>
<p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台 servlet</p>
</blockquote>
<h3 id="1-3-SpringMVC的特点"><a href="#1-3-SpringMVC的特点" class="headerlink" title="1.3 SpringMVC的特点"></a>1.3 SpringMVC的特点</h3><ul>
<li><strong>Spring 家族原生产品</strong>，与 IOC 容器等基础设施无缝对接 </li>
<li><strong>基于原生的Servlet</strong>，通过了功能强大的<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一 处理 </li>
<li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong> </li>
<li><strong>代码清新简洁</strong>，大幅度提升开发效率 </li>
<li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可 </li>
<li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li>
</ul>
<h2 id="2-入门案例"><a href="#2-入门案例" class="headerlink" title="2.入门案例"></a>2.入门案例</h2><h3 id="2-1-开发环境"><a href="#2-1-开发环境" class="headerlink" title="2.1 开发环境"></a>2.1 开发环境</h3><p>构建工具：maven3.5.4 </p>
<p>服务器：tomcat8.5 </p>
<p>Spring版本：5.3.1</p>
<h3 id="2-2-创建maven工程"><a href="#2-2-创建maven工程" class="headerlink" title="2.2 创建maven工程"></a>2.2 创建maven工程</h3><p><strong>①添加web模块</strong></p>
<p><strong>②打包方式：war</strong></p>
<p><strong>③引入依赖</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>注：由于 Maven 的传递性，我们不必将所有需要的包全部配置依赖，而是配置最顶端的依赖，其他靠 传递性导入。</p>
<h3 id="2-3-配置web-xml"><a href="#2-3-配置web-xml" class="headerlink" title="2.3 配置web.xml"></a>2.3 配置web.xml</h3><p>注册SpringMVC的前端控制器DispatcherServlet</p>
<p><strong>①默认配置方式</strong></p>
<p>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为- servlet.xml，例如，以下配置所对应SpringMVC的配置文件位于WEB-INF下，文件名为springMVCservlet.xml</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">           设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">           /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">           但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>②扩展配置方式</strong></p>
<p>可通过init-param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置 SpringMVC前端控制器DispatcherServlet的初始化时间</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servletclass</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的</span></span><br><span class="line"><span class="comment">    src/main/resources --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">作为框架的核心组件，在启动过程中有大量的初始化操作要做</span></span><br><span class="line"><span class="comment">而这些操作放在第一次请求时才执行会严重影响访问速度</span></span><br><span class="line"><span class="comment">因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注：</p>
<p>标签中使用&#x2F;和&#x2F;<em>的区别：</em></p>
<p>&#x2F;所匹配的请求可以是&#x2F;login或.html或.js或.css方式的请求路径，但是&#x2F;不能匹配.jsp请求路径的请求 </p>
<p>因此就可以避免在访问jsp页面时，该请求被DispatcherServlet处理，从而找不到相应的页面 </p>
<p>&#x2F;*则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用&#x2F;*的写 法</p>
</blockquote>
<h3 id="2-4-创建SpringMVC-xml配置文件"><a href="#2-4-创建SpringMVC-xml配置文件" class="headerlink" title="2.4 创建SpringMVC.xml配置文件"></a>2.4 创建SpringMVC.xml配置文件</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.example&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启mvc注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultCharset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="2-5-创建请求控制器"><a href="#2-5-创建请求控制器" class="headerlink" title="2.5 创建请求控制器"></a>2.5 创建请求控制器</h3><p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要 创建处理具体请求的类，即请求控制器</p>
<p>请求控制器中每一个处理请求的方法成为控制器方法</p>
<p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识 为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-6-测试Helloword"><a href="#2-6-测试Helloword" class="headerlink" title="2.6 测试Helloword"></a>2.6 测试Helloword</h3><p><strong>①实现对首页的访问</strong></p>
<p>在请求控制器中创建处理请求的方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @RequestMapping注解：处理请求和控制器方法之间的映射关系</span></span><br><span class="line"><span class="comment">// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径</span></span><br><span class="line"><span class="comment">// localhost:8080/springMVC/</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//设置视图名称</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>②通过超链接跳转到指定页面</strong></p>
<p>在主页index.html中设置超链接</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello&#125;&quot;</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>在请求控制器中创建处理请求的方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">HelloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-7-总结"><a href="#2-7-总结" class="headerlink" title="2.7 总结"></a>2.7 总结</h3><p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器 DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器， 将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的 控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会 被视图解析器解析，加上前缀和后缀组成视图的路径，通过<strong>Thymeleaf</strong>对视图进行渲染，最终转发到视 图所对应页面</p>
<h2 id="3-RequestMapping注解"><a href="#3-RequestMapping注解" class="headerlink" title="3.@RequestMapping注解"></a>3.@RequestMapping注解</h2><h3 id="3-1-RequestMapping注解的功能"><a href="#3-1-RequestMapping注解的功能" class="headerlink" title="3.1 @RequestMapping注解的功能"></a>3.1 @RequestMapping注解的功能</h3><p>从注解名称上我们可以看到，@RequestMapping注解的作用就是<strong>将请求和处理请求的控制器方法关联起来</strong>，建立映射关系。</p>
<p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p>
<h3 id="3-2-RequestMapping注解的位置"><a href="#3-2-RequestMapping注解的位置" class="headerlink" title="3.2 @RequestMapping注解的位置"></a>3.2 @RequestMapping注解的位置</h3><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p>
<p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestMappingController</span> &#123;</span><br><span class="line"><span class="comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-3-RequestMapping注解的value属性"><a href="#3-3-RequestMapping注解的value属性" class="headerlink" title="3.3 @RequestMapping注解的value属性"></a>3.3 @RequestMapping注解的value属性</h3><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p>
<p>@RequestMapping注解的value属性是一个<strong>字符串类型的数组</strong>，表示该请求映射能够匹配多个请求地址所对应的请求</p>
<p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRequestMapping&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--</span><br><span class="line">&gt;/testRequestMapping<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-4-RequestMapping注解的method属性"><a href="#3-4-RequestMapping注解的method属性" class="headerlink" title="3.4 @RequestMapping注解的method属性"></a>3.4 @RequestMapping注解的method属性</h3><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p>
<p>@RequestMapping注解的method属性是一个<strong>RequestMethod类型</strong>的<strong>数组</strong>，表示该请求映射能够<strong>匹配多种请求方式</strong>的请求</p>
<p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错 405：Request method ‘POST’ not supported</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;, method = &#123;RequestMethod.GET, RequestMethod.POST&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注：</p>
<p>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解 </p>
<p>处理get请求的映射–&gt;<strong>@GetMapping</strong> </p>
<p>处理post请求的映射–&gt;<strong>@PostMapping</strong> </p>
<p>处理put请求的映射–&gt;<strong>@PutMapping</strong> </p>
<p>处理delete请求的映射–&gt;<strong>@DeleteMapping</strong></p>
<p>2、常用的请求方式有get，post，put，delete</p>
<p>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符 串（put或delete），则按照<strong>默认</strong>的请求方式<strong>get</strong>处理</p>
<p>若要发送put和delete请求，则需要通过spring提供的过滤器<strong>HiddenHttpMethodFilter</strong>，在 RESTful部分会讲到</p>
</blockquote>
<h3 id="3-5-RequestMapping注解的params属性（了解）"><a href="#3-5-RequestMapping注解的params属性（了解）" class="headerlink" title="3.5 @RequestMapping注解的params属性（了解）"></a>3.5 @RequestMapping注解的params属性（了解）</h3><p>@RequestMapping注解的params属性通过请求的<strong>请求参数</strong>匹配请求映射</p>
<p>@RequestMapping注解的params属性是一个<strong>字符串类型</strong>的数组，可以通过四种表达式设置请求参数 和请求映射的匹配关系</p>
<ul>
<li>“param”：要求请求映射所匹配的请求必须携带param请求参数</li>
<li>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</li>
<li>“param&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数且param&#x3D;value</li>
<li>“param!&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数但是param!&#x3D;value</li>
</ul>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test(username=&#x27;admin&#x27;,password=123456)&quot;</span>&gt;</span>测试@RequestMapping的</span><br><span class="line">      params属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">            value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">            ,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">            ,params = &#123;&quot;username&quot;,&quot;password!=123456&quot;&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注：</p>
<p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时 页面回报错400：Parameter conditions “username, password!&#x3D;123456” not met for actual request parameters: username&#x3D;{admin}, password&#x3D;{123456}</p>
</blockquote>
<h3 id="3-6-RequestMapping注解的headers属性（了解）"><a href="#3-6-RequestMapping注解的headers属性（了解）" class="headerlink" title="3.6 @RequestMapping注解的headers属性（了解）"></a>3.6 @RequestMapping注解的headers属性（了解）</h3><p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p>
<p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信 息和请求映射的匹配关系</p>
<ul>
<li>“header”：要求请求映射所匹配的请求必须携带header请求头信息 </li>
<li>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息 </li>
<li>“header&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header&#x3D;value </li>
<li>“header!&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header!&#x3D;value 若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面 显示404错误，即资源未找到</li>
</ul>
<p>!!若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面 显示404错误，即资源未找到</p>
<h3 id="3-7-SpringMVC支持ant风格的路径"><a href="#3-7-SpringMVC支持ant风格的路径" class="headerlink" title="3.7 SpringMVC支持ant风格的路径"></a>3.7 SpringMVC支持ant风格的路径</h3><p>？：表示任意的单个字符 </p>
<p>*：表示任意的0个或多个字符 </p>
<p>**表示任意层数的任意目录 </p>
<p>注意：在使用两个星号时，只能使用&#x2F;**&#x2F;xxx的方式</p>
<h3 id="3-8-SpringMVC支持路径中的占位符（重点）"><a href="#3-8-SpringMVC支持路径中的占位符（重点）" class="headerlink" title="3.8 SpringMVC支持路径中的占位符（重点）"></a>3.8 SpringMVC支持路径中的占位符（重点）</h3><p>原始方式：&#x2F;deleteUser?id&#x3D;1</p>
<p>rest方式：&#x2F;user&#x2F;delete&#x2F;1</p>
<p>SpringMVC路径中的占位符常用于<strong>RESTful</strong>风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p>
<h2 id="4-SpringMVC获取请求参数"><a href="#4-SpringMVC获取请求参数" class="headerlink" title="4.SpringMVC获取请求参数"></a>4.SpringMVC获取请求参数</h2><h3 id="4-1-通过过ServletAPI获取"><a href="#4-1-通过过ServletAPI获取" class="headerlink" title="4.1 通过过ServletAPI获取"></a>4.1 通过过ServletAPI获取</h3><p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="4-2-通过控制器方法的形参获取请求参数"><a href="#4-2-通过控制器方法的形参获取请求参数" class="headerlink" title="4.2 通过控制器方法的形参获取请求参数"></a>4.2 通过控制器方法的形参获取请求参数</h3><p>在控制器方法的形参位置，设置和请求参数<strong>同名</strong>的形参，当浏览器发送请求，匹配到请求映射时，在 DispatcherServlet中就会将请求参数赋值给相应的形参</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;</span>测试获取请求参数--</span><br><span class="line">&gt;/testParam<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="4-3-RequestParam"><a href="#4-3-RequestParam" class="headerlink" title="4.3 @RequestParam"></a>4.3 @RequestParam</h3><p>@RequestParam是将请求参数和控制器方法的形参<strong>创建映射</strong>关系</p>
<p>@RequestParam注解一共有三个属性：</p>
<ul>
<li>value：指定为形参赋值的请求参数的参数名</li>
<li>required：设置是否必须传输此请求参数，默认值为true</li>
</ul>
<blockquote>
<p>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置 defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；若设置为 false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为 null</p>
</blockquote>
<ul>
<li>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值 为””时，则使用默认值为形参赋值</li>
</ul>
<h3 id="4-4-RequestHeader"><a href="#4-4-RequestHeader" class="headerlink" title="4.4 @RequestHeader"></a>4.4 @RequestHeader</h3><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系 </p>
<p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>
<h3 id="4-5-CookieValue"><a href="#4-5-CookieValue" class="headerlink" title="4.5 @CookieValue"></a>4.5 @CookieValue</h3><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p>
<p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>
<h3 id="4-6-通过POJO获取请求参数"><a href="#4-6-通过POJO获取请求参数" class="headerlink" title="4.6 通过POJO获取请求参数"></a>4.6 通过POJO获取请求参数</h3><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实 体类中的属性名一致，那么请求参数就会为此属性赋值</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testpojo&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span></span></span><br><span class="line"><span class="tag">                                                            <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@RequestMapping(&quot;/testpojo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testPOJO</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//最终结果--&gt;User&#123;id=null, username=&#x27;张三&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;,email=&#x27;123@qq.com&#x27;&#125;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4-7-解决获取请求参数的乱码问题"><a href="#4-7-解决获取请求参数的乱码问题" class="headerlink" title="4.7 解决获取请求参数的乱码问题"></a>4.7 解决获取请求参数的乱码问题</h3><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是 必须在web.xml中进行注册</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filterclass</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注：</p>
<p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p>
</blockquote>
<h2 id="5-域对象共享数据"><a href="#5-域对象共享数据" class="headerlink" title="5.域对象共享数据"></a>5.域对象共享数据</h2><h3 id="5-1-使用ServletAPI向request域对象共享数据"><a href="#5-1-使用ServletAPI向request域对象共享数据" class="headerlink" title="5.1 使用ServletAPI向request域对象共享数据"></a>5.1 使用ServletAPI向request域对象共享数据</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testServletAPI</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,servletAPI&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="5-2-使用ModelAndView向request域对象共享数据"><a href="#5-2-使用ModelAndView向request域对象共享数据" class="headerlink" title="5.2 使用ModelAndView向request域对象共享数据"></a>5.2 使用ModelAndView向request域对象共享数据</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testModelAndView</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * ModelAndView有Model和View的功能</span></span><br><span class="line"><span class="comment">    * Model主要用于向请求域共享数据</span></span><br><span class="line"><span class="comment">    * View主要用于设置视图，实现页面跳转</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    <span class="comment">//向请求域共享数据</span></span><br><span class="line">    mav.addObject(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelAndView&quot;</span>);</span><br><span class="line">    <span class="comment">//设置视图，实现页面跳转</span></span><br><span class="line">    mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="5-3-使用Model向request域对象共享数据"><a href="#5-3-使用Model向request域对象共享数据" class="headerlink" title="5.3 使用Model向request域对象共享数据"></a>5.3 使用Model向request域对象共享数据</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModel</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Model&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="5-4-使用map向request域对象共享数据"><a href="#5-4-使用map向request域对象共享数据" class="headerlink" title="5.4 使用map向request域对象共享数据"></a>5.4 使用map向request域对象共享数据</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMap</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Map&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="5-5-使用ModelMap向request域对象共享数据"><a href="#5-5-使用ModelMap向request域对象共享数据" class="headerlink" title="5.5 使用ModelMap向request域对象共享数据"></a>5.5 使用ModelMap向request域对象共享数据</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModelMap</span><span class="params">(ModelMap modelMap)</span>&#123;</span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelMap&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="5-6-Model、ModelMap、Map的关系"><a href="#5-6-Model、ModelMap、Map的关系" class="headerlink" title="5.6 Model、ModelMap、Map的关系"></a>5.6 Model、ModelMap、Map的关系</h3><p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Model</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModelMap</span> <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;String, Object&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendedModelMap</span> <span class="keyword">extends</span> <span class="title class_">ModelMap</span> <span class="keyword">implements</span> <span class="title class_">Model</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BindingAwareModelMap</span> <span class="keyword">extends</span> <span class="title class_">ExtendedModelMap</span> &#123;&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="5-7-向session域共享数据"><a href="#5-7-向session域共享数据" class="headerlink" title="5.7 向session域共享数据"></a>5.7 向session域共享数据</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testSession&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;testSessionScope&quot;</span>, <span class="string">&quot;hello,session&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="5-8-向application域共享数据"><a href="#5-8-向application域共享数据" class="headerlink" title="5.8 向application域共享数据"></a>5.8 向application域共享数据</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testApplication&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testApplication</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    application.setAttribute(<span class="string">&quot;testApplicationScope&quot;</span>, <span class="string">&quot;hello,application&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="6-SpringMVC的视图"><a href="#6-SpringMVC的视图" class="headerlink" title="6.SpringMVC的视图"></a>6.SpringMVC的视图</h2><ul>
<li>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</li>
<li>SpringMVC视图的种类很多，<strong>默认</strong>有转发视图和重定向视图</li>
<li>当工程引入jstl的依赖，转发视图会自动转换为JstlView</li>
<li>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视 图解析器解析之后所得到的是ThymeleafView</li>
</ul>
<h3 id="6-1-ThymeleafView"><a href="#6-1-ThymeleafView" class="headerlink" title="6.1 ThymeleafView"></a>6.1 ThymeleafView</h3><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图</p>
<p>后缀所得到的最终路径，会通过转发的方式实现跳转</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testHello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testHello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/../SSM/thfview.png"></p>
<h3 id="6-2-转发视图"><a href="#6-2-转发视图" class="headerlink" title="6.2 转发视图"></a>6.2 转发视图</h3><p>SpringMVC中默认的转发视图是InternalResourceView</p>
<p>SpringMVC中创建转发视图的情况：</p>
<ul>
<li>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部 分作为最终路径通过转发的方式实现跳转</li>
</ul>
<p>例如”forward:&#x2F;“，”forward:&#x2F;employee”</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testForward&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testForward</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;forward:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/../SSM/%E8%BD%AC%E5%8F%91%E8%A7%86%E5%9B%BE.png"></p>
<h3 id="6-3-重定向视图"><a href="#6-3-重定向视图" class="headerlink" title="6.3 重定向视图"></a>6.3 重定向视图</h3><p>SpringMVC中默认的重定向视图是RedirectView</p>
<p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不 会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p>
<p>例如”redirect:&#x2F;“，”redirect:&#x2F;employee”</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRedirect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRedirect</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;redirect:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/../SSM/%E9%87%8D%E5%AE%9A%E5%90%91%E8%A7%86%E5%9B%BE.png"></p>
<blockquote>
<p>注：</p>
<p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以&#x2F;开头，若是则会自 动拼接上下文路径</p>
</blockquote>
<h3 id="6-4-视图控制器view-controller"><a href="#6-4-视图控制器view-controller" class="headerlink" title="6.4 视图控制器view-controller"></a>6.4 视图控制器view-controller</h3><p>当控制器方法中，<strong>仅仅</strong>用来实现页面跳转，即<strong>只需要设置视图名称</strong>时，可以将处理器方法使用<strong>viewcontroller</strong>标签进行表示</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    path：设置处理的请求地址</span></span><br><span class="line"><span class="comment">    view-name：设置请求地址所对应的视图名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/testView&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;success&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注：</p>
<p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需 要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：</p>
<p>&lt;mvc:annotation-driven &#x2F;&gt;</p>
</blockquote>
<h2 id="7-RESTful"><a href="#7-RESTful" class="headerlink" title="7.RESTful"></a>7.RESTful</h2><h3 id="7-1-RESTful简介"><a href="#7-1-RESTful简介" class="headerlink" title="7.1 RESTful简介"></a>7.1 RESTful简介</h3><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate Transfer，表现层资源状态转移。</p>
<p><strong>①资源</strong></p>
<p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个 可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、 数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端 应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个 资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴 趣的客户端应用，可以通过资源的URI与其进行交互。</p>
<p><strong>②资源的表述</strong></p>
<p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交 换）。资源的表述可以有多种格式，例如HTML&#x2F;XML&#x2F;JSON&#x2F;纯文本&#x2F;图片&#x2F;视频&#x2F;音频等等。资源的表述格 式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p>
<p><strong>③状态转移</strong></p>
<p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p>
<h3 id="7-2-RESTful的实现"><a href="#7-2-RESTful的实现" class="headerlink" title="7.2 RESTful的实现"></a>7.2 RESTful的实现</h3><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p>
<p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</p>
<p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，<strong>不使用问号键值对</strong>方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>传统方式</th>
<th>REST风格</th>
</tr>
</thead>
<tbody><tr>
<td>查询操作</td>
<td>getUserById?id&#x3D;1</td>
<td>user&#x2F;1–&gt;get请求方式</td>
</tr>
<tr>
<td>保存操作</td>
<td>saveUser</td>
<td>user–&gt;post请求方式</td>
</tr>
<tr>
<td>删除操作</td>
<td>deleteUser?id&#x3D;1</td>
<td>user&#x2F;1–&gt;delete请求方式</td>
</tr>
<tr>
<td>更新操作</td>
<td>updateUser</td>
<td>user–&gt;put请求方式</td>
</tr>
</tbody></table>
<h3 id="7-3-HiddenHttpMethodFilter"><a href="#7-3-HiddenHttpMethodFilter" class="headerlink" title="7.3 HiddenHttpMethodFilter"></a>7.3 HiddenHttpMethodFilter</h3><p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p>
<p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求 HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p>
<p>a&gt;当前请求的请求方式必须为post </p>
<p>b&gt;当前请求必须传输请求参数_method</p>
<p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数 _method的值，因此请求参数_method的值才是最终的请求方式</p>
<p>在web.xml中注册HiddenHttpMethodFilter</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filterclass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注：</p>
<p>目前为止，SpringMVC中提供了两个过滤器：<strong>CharacterEncodingFilter</strong>和 <strong>HiddenHttpMethodFilter</strong></p>
<p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p>
<p>原因：</p>
<ul>
<li>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字符集的</li>
<li>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</li>
<li>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</li>
<li>String paramValue &#x3D; request.getParameter(this.methodParam);</li>
</ul>
</blockquote>
<h2 id="8-RESTful案例"><a href="#8-RESTful案例" class="headerlink" title="8.RESTful案例"></a>8.RESTful案例</h2><h3 id="8-1-准备工作"><a href="#8-1-准备工作" class="headerlink" title="8.1 准备工作"></a>8.1 准备工作</h3><p>和传统 CRUD 一样，实现对员工信息的增删改查。</p>
<ul>
<li>搭建环境 </li>
<li>准备实体类</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.RESTful_exam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1 male, 0 female</span></span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(Integer id, String lastName, String email, Integer gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLastName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLastName</span><span class="params">(String lastName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(Integer gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>准备dao模拟数据</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.RESTful_exam;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        employees = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Employee&gt;();</span><br><span class="line">        employees.put(<span class="number">1001</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;E-AA&quot;</span>, <span class="string">&quot;aa@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        employees.put(<span class="number">1002</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1002</span>, <span class="string">&quot;E-BB&quot;</span>, <span class="string">&quot;bb@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        employees.put(<span class="number">1003</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1003</span>, <span class="string">&quot;E-CC&quot;</span>, <span class="string">&quot;cc@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">        employees.put(<span class="number">1004</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1004</span>, <span class="string">&quot;E-DD&quot;</span>, <span class="string">&quot;dd@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">        employees.put(<span class="number">1005</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1005</span>, <span class="string">&quot;E-EE&quot;</span>, <span class="string">&quot;ee@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">initId</span> <span class="operator">=</span> <span class="number">1006</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Employee employee)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (employee.getId() == <span class="literal">null</span>) &#123;</span><br><span class="line">            employee.setId(initId++);</span><br><span class="line">        &#125;</span><br><span class="line">        employees.put(employee.getId(), employee);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.values();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">get</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        employees.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="8-2-功能清单"><a href="#8-2-功能清单" class="headerlink" title="8.2 功能清单"></a>8.2 功能清单</h3><table>
<thead>
<tr>
<th align="left">功能</th>
<th>URL地址</th>
<th>请求方式</th>
</tr>
</thead>
<tbody><tr>
<td align="left">访问首页√</td>
<td>&#x2F;</td>
<td>GET</td>
</tr>
<tr>
<td align="left">查询全部数据√</td>
<td>&#x2F;employee</td>
<td>GET</td>
</tr>
<tr>
<td align="left">删除√</td>
<td>&#x2F;employee&#x2F;2</td>
<td>DELETE</td>
</tr>
<tr>
<td align="left">跳转到添加数据页面√</td>
<td>&#x2F;toAdd</td>
<td>GET</td>
</tr>
<tr>
<td align="left">执行保存√</td>
<td>&#x2F;employee</td>
<td>POST</td>
</tr>
<tr>
<td align="left">跳转到更新数据页面√</td>
<td>&#x2F;employee&#x2F;2</td>
<td>GET</td>
</tr>
<tr>
<td align="left">执行更新√</td>
<td>&#x2F;employee</td>
<td>PUT</td>
</tr>
</tbody></table>
<h3 id="8-3-具体功能：访问首页"><a href="#8-3-具体功能：访问首页" class="headerlink" title="8.3 具体功能：访问首页"></a>8.3 具体功能：访问首页</h3><p><strong>①配置view-controller</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>②创建页面</strong></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span>&gt;</span>访问员工信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="8-4-具体功能：查询所有员工数据"><a href="#8-4-具体功能：查询所有员工数据" class="headerlink" title="8.4 具体功能：查询所有员工数据"></a>8.4 具体功能：查询所有员工数据</h3><p><strong>①控制器方法</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmployeeList</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    Collection&lt;Employee&gt; employeeList = employeeDao.getAll();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employeeList&quot;</span>, employeeList);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_list&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>②创建employee_list.html</strong></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align:</span></span></span><br><span class="line"><span class="string"><span class="tag">    center;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataTable&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>options(<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toAdd&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span>)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;employeeList&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span><br></pre></td></tr></table></figure></div>

<h3 id="8-5-具体功能：删除"><a href="#8-5-具体功能：删除" class="headerlink" title="8.5 具体功能：删除"></a>8.5 具体功能：删除</h3><p><strong>①创建处理delete请求方式的表单</strong></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 作用：通过超链接控制表单的提交，将post请求转换为delete请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;delete_form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HiddenHttpMethodFilter要求：必须传输_method请求参数，并且值为最终的请求方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>②删除超链接绑定点击事件</strong></p>
<p>引入vue.js</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>删除超链接</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>通过vue处理点击事件</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#dataTable&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//event表示当前事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">deleteEmployee</span>:<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//通过id获取表单标签</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> delete_form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;delete_form&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//将触发事件的超链接的href属性为表单的action属性赋值</span></span></span><br><span class="line"><span class="language-javascript">            delete_form.<span class="property">action</span> = event.<span class="property">target</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//提交表单</span></span></span><br><span class="line"><span class="language-javascript">            delete_form.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//阻止超链接的默认跳转行为</span></span></span><br><span class="line"><span class="language-javascript">            event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>③控制器方法</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteEmployee</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="8-6-具体功能：跳转到添加数据页面"><a href="#8-6-具体功能：跳转到添加数据页面" class="headerlink" title="8.6 具体功能：跳转到添加数据页面"></a>8.6 具体功能：跳转到添加数据页面</h3><p><strong>①配置view-controller</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/toAdd&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;employee_add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:viewcontroller</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>②创建employee_add.html</strong></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Add Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>male</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="8-7-具体功能：执行保存"><a href="#8-7-具体功能：执行保存" class="headerlink" title="8.7 具体功能：执行保存"></a>8.7 具体功能：执行保存</h3><p><strong>①控制器方法</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="8-8-具体功能：跳转到更新数据界面"><a href="#8-8-具体功能：跳转到更新数据界面" class="headerlink" title="8.8 具体功能：跳转到更新数据界面"></a>8.8 具体功能：跳转到更新数据界面</h3><p><strong>①修改超链接</strong></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>②控制器方法</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmployeeById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span>&#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeDao.get(id);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employee&quot;</span>, employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>③创建employee_update.html</strong></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Update Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        th:field=&quot;$&#123;employee.gender&#125;&quot;可用于单选框或复选框的回显若单选框的value和employee.gender的值一致，则添加			checked=&quot;checked&quot;属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;update&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">&lt;/html</span><br></pre></td></tr></table></figure></div>

<h3 id="8-9-具体功能：执行更新"><a href="#8-9-具体功能：执行更新" class="headerlink" title="8.9 具体功能：执行更新"></a>8.9 具体功能：执行更新</h3><p><strong>①控制器方法</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">updateEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="9-SpringMVC处理ajax请求"><a href="#9-SpringMVC处理ajax请求" class="headerlink" title="9.SpringMVC处理ajax请求"></a>9.SpringMVC处理ajax请求</h2><h3 id="9-1-RequestBody"><a href="#9-1-RequestBody" class="headerlink" title="9.1 @RequestBody"></a>9.1 @RequestBody</h3><p>@RequestBody可以获取请求体信息，使用@RequestBody注解标识控制器方法的形参，当前请求的请求体就会<strong>为当前注解所标识的形参赋值</strong></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--此时必须使用post请求方式，因为get请求没有请求体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/test/RequestBody&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test/RequestBody&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestBody);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<p>requestBody:username&#x3D;admin&amp;password&#x3D;123456</p>
<h3 id="9-2-RequestBody获取json格式的请求参数"><a href="#9-2-RequestBody获取json格式的请求参数" class="headerlink" title="9.2 @RequestBody获取json格式的请求参数"></a>9.2 @RequestBody获取json格式的请求参数</h3><blockquote>
<p>在使用了axios发送ajax请求之后，浏览器发送到服务器的请求参数有两种格式：</p>
<p>1、name&#x3D;value&amp;name&#x3D;value…，此时的请求参数可以通过request.getParameter()获取，对应 SpringMVC中，可以直接通过控制器方法的形参获取此类请求参数</p>
<p>2、{key:value,key:value,…}，此时无法通过request.getParameter()获取，之前我们使用操作 json的相关jar包gson或jackson处理此类请求参数，可以将其转换为指定的实体类对象或map集 合。在SpringMVC中，直接使用@RequestBody注解标识控制器方法的形参即可将此类请求参数 转换为java对象</p>
</blockquote>
<p>使用@RequestBody获取json格式的请求参数的条件：</p>
<p>1、导入jackson的依赖</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>2、SpringMVC的配置文件中设置开启mvc的注解驱动</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启mvc的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>3、在控制器方法的形参位置，设置json格式的请求参数要转换成的java类型（实体类或map）的参数，并使用@RequestBody注解标识</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试@RequestBody获取json格式的请求参数&quot;</span></span></span><br><span class="line"><span class="tag">@<span class="attr">click</span>=<span class="string">&quot;testRequestBody()&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">testRequestBody</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        axios.<span class="title function_">post</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;/SpringMVC/test/RequestBody/json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">username</span>:<span class="string">&quot;admin&quot;</span>,<span class="attr">password</span>:<span class="string">&quot;123456&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            ).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将json格式的数据转换为map集合</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test/RequestBody/json&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, Object&gt; map,</span></span><br><span class="line"><span class="params">HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(map);</span><br><span class="line">    <span class="comment">//&#123;username=admin, password=123456&#125;</span></span><br><span class="line">    response.getWriter().print(<span class="string">&quot;hello,axios&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将json格式的数据转换为实体类对象</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test/RequestBody/json&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpServletResponse</span></span><br><span class="line"><span class="params">response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="comment">//User&#123;id=null, username=&#x27;admin&#x27;, password=&#x27;123456&#x27;, age=null,gender=&#x27;null&#x27;&#125;</span></span><br><span class="line">    response.getWriter().print(<span class="string">&quot;hello,axios&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="9-3-RequestBody"><a href="#9-3-RequestBody" class="headerlink" title="9.3 @RequestBody"></a>9.3 @RequestBody</h3><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseBody&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//此时会跳转到逻辑视图success所对应的页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseBody&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//此时响应浏览器数据success</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="9-4-ResponseBody响应浏览器json数据"><a href="#9-4-ResponseBody响应浏览器json数据" class="headerlink" title="9.4 @ResponseBody响应浏览器json数据"></a>9.4 @ResponseBody响应浏览器json数据</h3><p>服务器处理ajax请求之后，大多数情况都需要向浏览器响应一个java对象，此时必须将java对象转换为 json字符串才可以响应到浏览器，之前我们使用操作json数据的jar包gson或jackson将java对象转换为 json字符串。在SpringMVC中，我们可以直接使用@ResponseBody注解实现此功能</p>
<p>@ResponseBody响应浏览器json数据的条件：</p>
<p>1、导入jackson的依赖</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>2、SpringMVC的配置文件中设置开启mvc的注解驱动</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启mvc的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>3、使用@ResponseBody注解标识控制器方法，在方法中，将需要转换为json字符串并响应到浏览器的java对象作为控制器方法的返回值，此时SpringMVC就可以将此对象直接转换为json字符串并响应到浏览器</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试@ResponseBody响应浏览器json格式的数据&quot;</span></span></span><br><span class="line"><span class="tag">@<span class="attr">click</span>=<span class="string">&quot;testResponseBody()&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">testResponseBody</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            axios.<span class="title function_">post</span>(<span class="string">&quot;/SpringMVC/test/ResponseBody/json&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//响应浏览器list集合</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test/ResponseBody/json&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1001</span>,<span class="string">&quot;admin1&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1002</span>,<span class="string">&quot;admin2&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1003</span>,<span class="string">&quot;admin3&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    List&lt;User&gt; list = Arrays.asList(user1, user2, user3);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//响应浏览器map集合</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test/ResponseBody/json&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1001</span>,<span class="string">&quot;admin1&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1002</span>,<span class="string">&quot;admin2&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1003</span>,<span class="string">&quot;admin3&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;1001&quot;</span>, user1);</span><br><span class="line">        map.put(<span class="string">&quot;1002&quot;</span>, user2);</span><br><span class="line">        map.put(<span class="string">&quot;1003&quot;</span>, user3);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//响应浏览器实体类对象</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test/ResponseBody/json&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="9-5-RestController注解"><a href="#9-5-RestController注解" class="headerlink" title="9.5 @RestController注解"></a>9.5 @RestController注解</h3><p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了 @Controller注解，并且<strong>为其中的每个方法添加了@ResponseBody注解</strong></p>
<h2 id="10-文件上传与下载"><a href="#10-文件上传与下载" class="headerlink" title="10.文件上传与下载"></a>10.文件上传与下载</h2><h3 id="10-1-文件下载"><a href="#10-1-文件下载" class="headerlink" title="10.1 文件下载"></a>10.1 文件下载</h3><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是<strong>响应到浏览器的响应报文使用ResponseEntity实现下载文件</strong>的功能。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span></span><br><span class="line">IOException &#123;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;/static/img/1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//创建输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">    <span class="comment">//创建字节数组</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">    <span class="comment">//将流读到字节数组中</span></span><br><span class="line">    is.read(bytes);</span><br><span class="line">    <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//设置响应状态码</span></span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line">    <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">    ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes, headers,</span><br><span class="line">    statusCode);</span><br><span class="line">    <span class="comment">//关闭输入流</span></span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="10-2-文件上传"><a href="#10-2-文件上传" class="headerlink" title="10.2 文件上传"></a>10.2 文件上传</h3><p>文件上传要求form表单的请求方式必须为post，并且添加属性enctype&#x3D;”multipart&#x2F;form-data” SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息 上传步骤：</p>
<p>①添加依赖：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>②在SpringMVC的配置文件中添加配置：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span><span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>③控制器方法：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testUp&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testUp</span><span class="params">(MultipartFile photo, HttpSession session)</span> <span class="keyword">throws</span></span><br><span class="line">IOException &#123;</span><br><span class="line">    <span class="comment">//获取上传的文件的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> photo.getOriginalFilename();</span><br><span class="line">    <span class="comment">//处理文件重名问题</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">hzName</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    fileName = UUID.randomUUID().toString() + hzName;</span><br><span class="line">    <span class="comment">//获取服务器中photo目录的路径</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="type">String</span> <span class="variable">photoPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;photo&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(photoPath);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">    	file.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">finalPath</span> <span class="operator">=</span> photoPath + File.separator + fileName;</span><br><span class="line">    <span class="comment">//实现上传功能</span></span><br><span class="line">    photo.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(finalPath));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="11-拦截器"><a href="#11-拦截器" class="headerlink" title="11.拦截器"></a>11.拦截器</h2><h3 id="11-1-拦截器的配置"><a href="#11-1-拦截器的配置" class="headerlink" title="11.1 拦截器的配置"></a>11.1 拦截器的配置</h3><p>SpringMVC中的拦截器用于<strong>拦截控制器方法的执行</strong></p>
<p>SpringMVC中的拦截器<strong>需要实现HandlerInterceptor</strong></p>
<p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/testRequestEntity&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过</span></span><br><span class="line"><span class="comment">    mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="11-2-拦截器的三个抽象方法"><a href="#11-2-拦截器的三个抽象方法" class="headerlink" title="11.2 拦截器的三个抽象方法"></a>11.2 拦截器的三个抽象方法</h3><p>SpringMVC中的拦截器有三个抽象方法：</p>
<ul>
<li>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的<strong>返回值</strong>表示是否拦截或放行，返 回true为放行，即调用控制器方法；返回false表示拦截，即<strong>不调用控制器方法</strong></li>
<li>postHandle：控制器方法执行之后执行postHandle()</li>
<li>afterCompletion：处理完视图和模型数据，渲染视图完毕之后执行afterCompletion()</li>
</ul>
<h3 id="11-3-多个拦截器的执行顺序"><a href="#11-3-多个拦截器的执行顺序" class="headerlink" title="11.3 多个拦截器的执行顺序"></a>11.3 多个拦截器的执行顺序</h3><p>①若每个拦截器的preHandle()都返回true</p>
<p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的<strong>配置顺序</strong>有关：</p>
<p>preHandle()会按照配置的<strong>顺序执行</strong>，而postHandle()和afterCompletion()会按照配置的<strong>反序执行</strong></p>
<p>②若某个拦截器的preHandle()返回了false</p>
<p>preHandle()返回false和它之前的拦截器的preHandle()<strong>都会执行</strong>，postHandle()都不执行，返回false 的拦截器<strong>之前的</strong>拦截器的afterCompletion()会执行</p>
<h2 id="12-异常处理器"><a href="#12-异常处理器" class="headerlink" title="12.异常处理器"></a>12.异常处理器</h2><h3 id="12-1-基于配置的异常处理"><a href="#12-1-基于配置的异常处理" class="headerlink" title="12.1 基于配置的异常处理"></a>12.1 基于配置的异常处理</h3><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p>
<p>HandlerExceptionResolver接口的实现类有：<strong>DefaultHandlerExceptionResolver</strong>和 <strong>SimpleMappingExceptionResolver</strong></p>
<p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        properties的键表示处理器方法执行过程中出现的异常</span></span><br><span class="line"><span class="comment">        properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    	exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="12-2-基于注解的异常处理"><a href="#12-2-基于注解的异常处理" class="headerlink" title="12.2 基于注解的异常处理"></a>12.2 基于注解的异常处理</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@ControllerAdvice将当前类标识为异常处理的组件</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionController</span> &#123;</span><br><span class="line">    <span class="comment">//@ExceptionHandler用于设置所标识方法处理的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="comment">//ex表示当前请求处理中出现的异常对象</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleArithmeticException</span><span class="params">(Exception ex, Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;ex&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="13-注解配置SpringMVC"><a href="#13-注解配置SpringMVC" class="headerlink" title="13.注解配置SpringMVC"></a>13.注解配置SpringMVC</h2><h3 id="13-1-创建初始化类，代替web-xml"><a href="#13-1-创建初始化类，代替web-xml" class="headerlink" title="13.1 创建初始化类，代替web.xml"></a>13.1 创建初始化类，代替web.xml</h3><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类， 如果找到的话就用它来配置Servlet容器。 Spring提供了这个接口的实现，名为 SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配 置的任务交给它们来完成。<strong>Spring3.2</strong>引入了一个便利的WebApplicationInitializer基础实现，名为 <strong>AbstractAnnotationConfigDispatcherServletInitializer</strong>，当我们的类扩展了 AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自 动发现它，并用它来配置Servlet上下文。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebInit</span> <span class="keyword">extends</span></span><br><span class="line"><span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 指定spring的配置类</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 指定SpringMVC的配置类</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 指定DispatcherServlet的映射规则，即url-pattern</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 添加过滤器</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">encodingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        encodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        encodingFilter.setForceRequestEncoding(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HiddenHttpMethodFilter</span> <span class="variable">hiddenHttpMethodFilter</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">        <span class="title class_">HiddenHttpMethodFilter</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="13-2-创建SpringConfig配置类，代替spring的配置文件"><a href="#13-2-创建SpringConfig配置类，代替spring的配置文件" class="headerlink" title="13.2 创建SpringConfig配置类，代替spring的配置文件"></a>13.2 创建SpringConfig配置类，代替spring的配置文件</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">	<span class="comment">//ssm整合之后，spring的配置信息写在此类中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="13-3-创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#13-3-创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="13.3 创建WebConfig配置类，代替SpringMVC的配置文件"></a>13.3 创建WebConfig配置类，代替SpringMVC的配置文件</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描组件</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.mvc.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启MVC注解驱动</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">//使用默认的servlet处理静态资源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer</span></span><br><span class="line"><span class="params">    configurer)</span> &#123;</span><br><span class="line">    	configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置文件上传解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommonsMultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">FirstInterceptor</span> <span class="variable">firstInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FirstInterceptor</span>();</span><br><span class="line">        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置视图控制</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="comment">    	registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">//配置异常映射</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void</span></span><br><span class="line"><span class="comment">    configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) &#123;</span></span><br><span class="line"><span class="comment">        SimpleMappingExceptionResolver exceptionResolver = new</span></span><br><span class="line"><span class="comment">        SimpleMappingExceptionResolver();</span></span><br><span class="line"><span class="comment">        Properties prop = new Properties();</span></span><br><span class="line"><span class="comment">        prop.setProperty(&quot;java.lang.ArithmeticException&quot;, &quot;error&quot;);</span></span><br><span class="line"><span class="comment">        //设置异常映射</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionMappings(prop);</span></span><br><span class="line"><span class="comment">        //设置共享异常信息的键</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionAttribute(&quot;ex&quot;);</span></span><br><span class="line"><span class="comment">        resolvers.add(exceptionResolver);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">//配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ITemplateResolver <span class="title function_">templateResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">webApplicationContext</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        <span class="comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过</span></span><br><span class="line">        WebApplicationContext 的方法获得</span><br><span class="line">        <span class="type">ServletContextTemplateResolver</span> <span class="variable">templateResolver</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">        <span class="title class_">ServletContextTemplateResolver</span>(webApplicationContext.getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SpringTemplateEngine <span class="title function_">templateEngine</span><span class="params">(ITemplateResolver</span></span><br><span class="line"><span class="params">    templateResolver)</span> &#123;</span><br><span class="line">        <span class="type">SpringTemplateEngine</span> <span class="variable">templateEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringTemplateEngine</span>();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ViewResolver <span class="title function_">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> &#123;</span><br><span class="line">        <span class="type">ThymeleafViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThymeleafViewResolver</span>();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="13-4-测试功能"><a href="#13-4-测试功能" class="headerlink" title="13.4 测试功能"></a>13.4 测试功能</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="14-SpringMVC执行流程"><a href="#14-SpringMVC执行流程" class="headerlink" title="14.SpringMVC执行流程"></a>14.SpringMVC执行流程</h2><h3 id="14-1-SpringMVC常用组件"><a href="#14-1-SpringMVC常用组件" class="headerlink" title="14.1 SpringMVC常用组件"></a>14.1 SpringMVC常用组件</h3><ul>
<li>DispatcherServlet：前端控制器，不需要工程师开发，由框架提供</li>
</ul>
<p>​		作用：统一处理请求和响应，整个流程控制的中心，由它<strong>调用其它组件处理用户的请求</strong></p>
<ul>
<li>HandlerMapping：处理器映射器，不需要工程师开发，由框架提供</li>
</ul>
<p>​		作用：根据请求的url、method等信息查找Handler，即控制器方法</p>
<ul>
<li>Handler：处理器，需要工程师开发</li>
</ul>
<p>​		作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p>
<ul>
<li>HandlerAdapter：处理器适配器，不需要工程师开发，由框架提供</li>
</ul>
<p>​		作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p>
<ul>
<li>ViewResolver：视图解析器，不需要工程师开发，由框架提供</li>
</ul>
<p>​		作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、 RedirectView</p>
<ul>
<li>View：视图</li>
</ul>
<p>​		作用：将模型数据通过页面展示给用户</p>
<h3 id="14-2-DispatcherServlet初始化过程"><a href="#14-2-DispatcherServlet初始化过程" class="headerlink" title="14.2 DispatcherServlet初始化过程"></a>14.2 DispatcherServlet初始化过程</h3><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p>
<p><img lazyload src="/images/loading.svg" data-src="/../SSM/14.2.1.png"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../SSM/14.2.2.png"></p>
<p><strong>①初始化WebApplicationContext</strong></p>
<p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<h3 id="14-3-DispatcherServlet调用组件处理请求"><a href="#14-3-DispatcherServlet调用组件处理请求" class="headerlink" title="14.3 DispatcherServlet调用组件处理请求"></a>14.3 DispatcherServlet调用组件处理请求</h3><h3 id="14-4-SpringMVC的执行流程"><a href="#14-4-SpringMVC的执行流程" class="headerlink" title="14.4 SpringMVC的执行流程"></a>14.4 SpringMVC的执行流程</h3><ol>
<li><p>用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</p>
</li>
<li><p>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</p>
<p>a) 不存在 </p>
<p>i. 再判断是否配置了mvc:default-servlet-handler</p>
<p>ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p>
</li>
</ol>
<p><img lazyload src="/images/loading.svg" data-src="/../SSM/SSM%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png"></p>
<p>b) 存在则执行下面的流程</p>
<ol start="3">
<li><p>根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及 Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</p>
</li>
<li><p>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。 </p>
</li>
<li><p>如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】 </p>
</li>
<li><p>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。 在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p>
</li>
</ol>
<ul>
<li><p>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定 的响应信息</p>
</li>
<li><p>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等 </p>
</li>
<li><p>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等 </p>
</li>
<li><p>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p>
</li>
</ul>
<ol start="7">
<li><p>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</p>
</li>
<li><p>此时将开始执行拦截器的postHandle(…)方法【逆向】。</p>
</li>
<li><p>根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行 HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model 和View，来渲染视图。 </p>
</li>
<li><p>渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</p>
</li>
<li><p>将渲染结果返回给客户端。</p>
</li>
</ol>
<h1 id="三、SSM整合"><a href="#三、SSM整合" class="headerlink" title="三、SSM整合"></a>三、SSM整合</h1><h2 id="4-1-ContextLoaderListener"><a href="#4-1-ContextLoaderListener" class="headerlink" title="4.1 ContextLoaderListener"></a>4.1 ContextLoaderListener</h2><p>Spring提供了监听器ContextLoaderListener，实现ServletContextListener接口，可监听<strong>ServletContext的状态</strong>，在web服务器的启动，读取Spring的配置文件，创建Spring的IOC容器。web应用中必须在web.xml中配置</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    配置Spring的监听器，在服务器启动时加载Spring的配置文件</span></span><br><span class="line"><span class="comment">    Spring配置文件默认位置和名称：/WEB-INF/applicationContext.xml</span></span><br><span class="line"><span class="comment">    可通过上下文参数自定义Spring配置文件的位置和名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listenerclass</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--自定义Spring配置文件的位置和名称--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="4-2-准备工作"><a href="#4-2-准备工作" class="headerlink" title="4.2 准备工作"></a>4.2 准备工作</h2><h3 id="①创建Maven-Module"><a href="#①创建Maven-Module" class="headerlink" title="①创建Maven Module"></a>①创建Maven Module</h3><h3 id="②导入依赖"><a href="#②导入依赖" class="headerlink" title="②导入依赖"></a>②导入依赖</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--springmvc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis和spring的整合包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="③创建表"><a href="#③创建表" class="headerlink" title="③创建表"></a>③创建表</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_emp` (</span><br><span class="line">    `emp_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `emp_name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `sex` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `email` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`emp_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure></div>

<h2 id="4-3-配置web-xml"><a href="#4-3-配置web-xml" class="headerlink" title="4.3 配置web.xml"></a>4.3 配置web.xml</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Spring的编码过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filterclass</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置处理请求方式PUT和DELETE的过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filterclass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servletclass</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置SpringMVC的配置文件的位置和名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:SpringMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置Spring的配置文件的位置和名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:Spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置Spring的监听器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listenerclass</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="4-4-创建SpringMVC的配置文件并配置"><a href="#4-4-创建SpringMVC的配置文件并配置" class="headerlink" title="4.4 创建SpringMVC的配置文件并配置"></a>4.4 创建SpringMVC的配置文件并配置</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.ssm.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置访问首页的视图控制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置默认的servlet处理静态资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启MVC的注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="4-5-搭建MyBatis环境"><a href="#4-5-搭建MyBatis环境" class="headerlink" title="4.5 搭建MyBatis环境"></a>4.5 搭建MyBatis环境</h2><h3 id="①创建属性文件jdbc-properties"><a href="#①创建属性文件jdbc-properties" class="headerlink" title="①创建属性文件jdbc.properties"></a>①创建属性文件jdbc.properties</h3><div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">atguigu</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure></div>

<h3 id="②创建MyBatis的核心配置文件mybatis-config-xml"><a href="#②创建MyBatis的核心配置文件mybatis-config-xml" class="headerlink" title="②创建MyBatis的核心配置文件mybatis-config.xml"></a>②创建MyBatis的核心配置文件mybatis-config.xml</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">    <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将下划线映射为驼峰--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置分页插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="③创建Mapper接口和映射文件"><a href="#③创建Mapper接口和映射文件" class="headerlink" title="③创建Mapper接口和映射文件"></a>③创建Mapper接口和映射文件</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line">	List&lt;Employee&gt; <span class="title function_">getEmployeeList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.ssm.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmployeeList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span></span><br><span class="line">    	select * from t_emp</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="④创建日志文件log4j-xml"><a href="#④创建日志文件log4j-xml" class="headerlink" title="④创建日志文件log4j.xml"></a>④创建日志文件log4j.xml</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span>	 /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="4-6-创建Spring的配置文件并配置"><a href="#4-6-创建Spring的配置文件并配置" class="headerlink" title="4.6 创建Spring的配置文件并配置"></a>4.6 创建Spring的配置文件并配置</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.ssm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入jdbc.properties --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Druid数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置用于创建SqlSessionFactory的工厂bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置MyBatis配置文件的路径（可以不设置） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 设置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置类型别名所对应的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.atguigu.ssm.pojo&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置映射文件的路径</span></span><br><span class="line"><span class="comment">        若映射文件所在路径和mapper接口所在路径一致，则不需要设置</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		&lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;/&gt;</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        配置mapper接口的扫描配置</span></span><br><span class="line"><span class="comment">        由mybatis-spring提供，可以将指定包下所有的mapper接口创建动态代理</span></span><br><span class="line"><span class="comment">        并将这些动态代理作为IOC容器的bean管理</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.atguigu.ssm.mapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="4-7-测试功能"><a href="#4-7-测试功能" class="headerlink" title="4.7 测试功能"></a>4.7 测试功能</h2><h3 id="①创建组件"><a href="#①创建组件" class="headerlink" title="①创建组件"></a>①创建组件</h3><p><strong>实体类Employee</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer empId;</span><br><span class="line">    <span class="keyword">private</span> String empName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;  &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(Integer empId, String empName, Integer age, String sex,String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.empId = empId;</span><br><span class="line">        <span class="built_in">this</span>.empName = empName;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getEmpId</span><span class="params">()</span> &#123;</span><br><span class="line">    	<span class="keyword">return</span> empId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmpId</span><span class="params">(Integer empId)</span> &#123;</span><br><span class="line">    	<span class="built_in">this</span>.empId = empId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmpName</span><span class="params">()</span> &#123;</span><br><span class="line">    	<span class="keyword">return</span> empName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmpName</span><span class="params">(String empName)</span> &#123;</span><br><span class="line">    	<span class="built_in">this</span>.empName = empName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">    	<span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">    	<span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">    	<span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">    	<span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">    	<span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">    	<span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>创建控制层组件EmployeeController</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line">	<span class="meta">@RequestMapping(value = &quot;/employee/page/&#123;pageNum&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmployeeList</span><span class="params">(Model model, <span class="meta">@PathVariable(&quot;pageNum&quot;)</span> Integer pageNum)</span>&#123;</span><br><span class="line">    PageInfo&lt;Employee&gt; page = employeeService.getEmployeeList(pageNum);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;page&quot;</span>, page);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;employee_list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>创建接口EmployeeService</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeService</span> &#123;</span><br><span class="line">	PageInfo&lt;Employee&gt; <span class="title function_">getEmployeeList</span><span class="params">(Integer pageNum)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>创建实现类EmployeeServiceImpl</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">EmployeeService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeMapper employeeMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageInfo&lt;Employee&gt; <span class="title function_">getEmployeeList</span><span class="params">(Integer pageNum)</span> &#123;</span><br><span class="line">        PageHelper.startPage(pageNum, <span class="number">4</span>);</span><br><span class="line">        List&lt;Employee&gt; list = employeeMapper.getEmployeeList();</span><br><span class="line">        PageInfo&lt;Employee&gt; page = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(list, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="②创建页面"><a href="#②创建页面" class="headerlink" title="②创建页面"></a>②创建页面</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/static/css/index_work.css&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;6&quot;</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>emp_id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>emp_name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>sex<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>options<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;page.list&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.empId&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.empName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.sex&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.hasPreviousPage&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/employee/page/1&#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;page.prePage&#125;&#125;&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            	<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:each</span>=<span class="string">&quot;num : $&#123;page.navigatepageNums&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.pageNum==num&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;num&#125;&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;[&#x27;+$&#123;num&#125;+&#x27;]&#x27;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:</span></span></span><br><span class="line"><span class="string"><span class="tag">                    red;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.pageNum!=num&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;num&#125;&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;num&#125; &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.hasNextPage&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;page.nextPage&#125;&#125;&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;page.pages&#125;&#125;&quot;</span>&gt;</span>末页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="③访问测试分页功能"><a href="#③访问测试分页功能" class="headerlink" title="③访问测试分页功能"></a>③访问测试分页功能</h3><p>localhost:8080&#x2F;employee&#x2F;page&#x2F;1</p>
]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-vue全栈开发之VueRouter篇</title>
    <url>/2023/08/17/SpringBoot-vue%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B9%8BVueRouter%E7%AF%87/</url>
    <content><![CDATA[<h1 id="一、VueRouter的安装与使用"><a href="#一、VueRouter的安装与使用" class="headerlink" title="一、VueRouter的安装与使用"></a>一、VueRouter的安装与使用</h1><h2 id="1-1-VueRouter基本概念"><a href="#1-1-VueRouter基本概念" class="headerlink" title="1.1 VueRouter基本概念"></a>1.1 VueRouter基本概念</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/vuerouter%E7%AE%80%E4%BB%8B.png"></p>
<h2 id="1-2-VueRouter的使用"><a href="#1-2-VueRouter的使用" class="headerlink" title="1.2 VueRouter的使用"></a>1.2 VueRouter的使用</h2><h3 id="1-2-1-创建组件"><a href="#1-2-1-创建组件" class="headerlink" title="1.2.1 创建组件"></a>1.2.1 创建组件</h3><p>模拟网易云音乐路由：</p>
<p>Discover.vue组件：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">            发现音乐</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>Friends.vue：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">            关注</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>My.vue组件：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">            我的音乐</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>三个组件不用注册，因为需要在页面中动态的显示出来</p>
<h3 id="1-2-2-声明路由链接和占位标签"><a href="#1-2-2-声明路由链接和占位标签" class="headerlink" title="1.2.2 声明路由链接和占位标签"></a>1.2.2 声明路由链接和占位标签</h3><p>可以使用<strong>router-link</strong>声明路由链接，使用<strong>router-view</strong>声明路由占位符</p>
<p>App.vue组件：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的音乐<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  声明路由链接  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/discover&quot;</span>&gt;</span>发现音乐<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/my&quot;</span>&gt;</span>我的音乐<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/friend&quot;</span>&gt;</span>关注<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  声明路由占位标签  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="1-2-3-创建路由模块"><a href="#1-2-3-创建路由模块" class="headerlink" title="1.2.3 创建路由模块"></a>1.2.3 创建路由模块</h3><p>需要新建一个JS文件，文件名根据自身需要自取，本次取名为<strong>index.js</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Discover</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Discover.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Friends</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Friends.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">My</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/My.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将VueRouter设置为Vue的插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">&#x27;/discover&#x27;</span> , components : <span class="title class_">Discover</span> &#125;</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">&#x27;/friends&#x27;</span> , components : <span class="title class_">Friends</span> &#125;</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">&#x27;/my&#x27;</span> , components : <span class="title class_">My</span> &#125;                   </span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></div>

<h3 id="1-2-4-挂着路由模块"><a href="#1-2-4-挂着路由模块" class="headerlink" title="1.2.4 挂着路由模块"></a>1.2.4 挂着路由模块</h3><p>在main.js文件中导入router文件</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&#x27;./router文件夹&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    router : router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h3 id="1-2-5-VueRouter重定向"><a href="#1-2-5-VueRouter重定向" class="headerlink" title="1.2.5 VueRouter重定向"></a>1.2.5 VueRouter重定向</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        <span class="comment">//当用户访问/时，跳转到Discover</span></span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span> , redirect : <span class="string">&#x27;/discover&#x27;</span> &#125;</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">&#x27;/discover&#x27;</span> , components : <span class="title class_">Discover</span> &#125;</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">&#x27;/discover&#x27;</span> , components : <span class="title class_">Discover</span> &#125;</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">&#x27;/friends&#x27;</span> , components : <span class="title class_">Friends</span> &#125;</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">&#x27;/my&#x27;</span> , components : <span class="title class_">My</span> &#125;                   </span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h3 id="1-2-6-嵌套路由"><a href="#1-2-6-嵌套路由" class="headerlink" title="1.2.6 嵌套路由"></a>1.2.6 嵌套路由</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>发现音乐<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  子路由链接  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/discover/toplist&quot;</span>&gt;</span>推荐<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/discover/playlist&quot;</span>&gt;</span>歌单<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>在index.js文件中修改一下代码：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">&#x27;/discover&#x27;</span> , </span><br><span class="line">         components : <span class="title class_">Discover</span>, </span><br><span class="line">        	<span class="attr">children</span>:[</span><br><span class="line">                &#123; <span class="attr">path</span>:<span class="string">&quot;toplist&quot;</span> , components : <span class="title class_">TopList</span> &#125;</span><br><span class="line">                &#123; <span class="attr">path</span>:<span class="string">&quot;playlist&quot;</span> , components : <span class="title class_">PlayList</span> &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">&#x27;/friends&#x27;</span> , components : <span class="title class_">Friends</span> &#125;</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">&#x27;/my&#x27;</span> , components : <span class="title class_">My</span> &#125;                   </span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h1 id="二、参数传递"><a href="#二、参数传递" class="headerlink" title="二、参数传递"></a>二、参数传递</h1><h3 id="2-1-动态路由"><a href="#2-1-动态路由" class="headerlink" title="2.1 动态路由"></a>2.1 动态路由</h3><p>有如下三个链接：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  声明路由链接  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/product/1&quot;</span>&gt;</span>商品1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/product/2&quot;</span>&gt;</span>商品2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/product/3&quot;</span>&gt;</span>商品3<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">&#x27;/my/1&#x27;</span> , components : <span class="title class_">Product</span> &#125;</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">&#x27;/my/2&#x27;</span> , components : <span class="title class_">Product</span> &#125;</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">&#x27;/my/3&#x27;</span> , components : <span class="title class_">Product</span> &#125;                   </span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>上述方法复用性差！！！</p>
<p>动态路由是指把Hash地址中可变的部分定义为参数项，从而提高路由规则的复用性。在<strong>VueRouter</strong>中使用英文**:**定义路由参数项</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>:<span class="string">&#x27;/product/:id&#x27;</span> , components : <span class="title class_">Product</span> &#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">&#x27;/discover&#x27;</span> , </span><br><span class="line">         components : <span class="title class_">Discover</span>, </span><br><span class="line">        	<span class="attr">children</span>:[</span><br><span class="line">                &#123; <span class="attr">path</span>:<span class="string">&quot;toplist&quot;</span> , components : <span class="title class_">TopList</span> &#125;</span><br><span class="line">                &#123; <span class="attr">path</span>:<span class="string">&quot;playlist&quot;</span> , components : <span class="title class_">PlayList</span> &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">&#x27;/friends&#x27;</span> , components : <span class="title class_">Friends</span> &#125;</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">&#x27;/my&#x27;</span> , </span><br><span class="line">          components : <span class="title class_">My</span>,</span><br><span class="line">          <span class="attr">children</span>:[</span><br><span class="line">                &#123; <span class="attr">path</span>:<span class="string">&quot;:id&quot;</span> , components : <span class="title class_">Product</span> &#125; <span class="comment">//动态路由</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,                   </span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>根据不同id的值，请求出不同的商品数据</p>
<p>Product.vue组件：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">        商品&#123;&#123;$router.params.id&#125;&#125; //显示商品1，商品2，商品3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>或者采用以下形式</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>:<span class="string">&#x27;/product/:id&#x27;</span>,<span class="attr">component</span>:<span class="title class_">Product</span>,<span class="attr">props</span>:<span class="literal">true</span> &#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Product组件应用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 获取动态的id的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">P</span>&gt;</span>&#123;&#123;id&#125;&#125;<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//组件名称</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&#x27;Product&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>:[id]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="三、导航守卫"><a href="#三、导航守卫" class="headerlink" title="三、导航守卫"></a>三、导航守卫</h1><blockquote>
<p>导航守卫可以控制路由的访问权限。</p>
</blockquote>
<p>全局导航守卫会拦截每个路由规则，从而对每个路由进行访问权限的控制。</p>
<p>可以使用router.beforeEach注册一个全局前置守卫：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(to.<span class="property">path</span> === <span class="string">&#x27;/main&#x27;</span> &amp;&amp; !isAuthenticated )&#123;</span><br><span class="line">            <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>to：即将要进入的目标</p>
</li>
<li><p>from：当前导航要离开的路由</p>
</li>
<li><p>在守卫方法中如果声明了next形参，则必须调用next()函数，否则不允许用户访问任何一个路由！</p>
<ul>
<li><p>直接放行：next()</p>
</li>
<li><p>强制其停留在当前页面：next(false)</p>
</li>
<li><p>强制其跳转到登录页面：next(‘&#x2F;login’)</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>全栈开发</tag>
        <tag>VueRouter</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot+Vue前后端分离实践一(完结撒花)</title>
    <url>/2023/08/30/SpringBoot-Vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h1 id="一、数据库"><a href="#一、数据库" class="headerlink" title="一、数据库"></a>一、数据库</h1><h2 id="1-1-用户表"><a href="#1-1-用户表" class="headerlink" title="1.1 用户表"></a>1.1 用户表</h2><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `x_user` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `phone` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `status` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `avatar` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   `deleted` <span class="type">INT</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `x_user` (`id`, `username`, `password`, `email`, `phone`, `status`, `avatar`, `deleted`) <span class="keyword">values</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;super@aliyun.com&#x27;</span>,<span class="string">&#x27;18677778888&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `x_user` (`id`, `username`, `password`, `email`, `phone`, `status`, `avatar`, `deleted`) <span class="keyword">values</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;zhangsan@gmail.com&#x27;</span>,<span class="string">&#x27;13966667777&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `x_user` (`id`, `username`, `password`, `email`, `phone`, `status`, `avatar`, `deleted`) <span class="keyword">values</span>(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;lisi@gmail.com&#x27;</span>,<span class="string">&#x27;13966667778&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `x_user` (`id`, `username`, `password`, `email`, `phone`, `status`, `avatar`, `deleted`) <span class="keyword">values</span>(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;wangwu@gmail.com&#x27;</span>,<span class="string">&#x27;13966667772&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `x_user` (`id`, `username`, `password`, `email`, `phone`, `status`, `avatar`, `deleted`) <span class="keyword">values</span>(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;zhaoer&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;zhaoer@gmail.com&#x27;</span>,<span class="string">&#x27;13966667776&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `x_user` (`id`, `username`, `password`, `email`, `phone`, `status`, `avatar`, `deleted`) <span class="keyword">values</span>(<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;songliu&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;songliu@gmail.com&#x27;</span>,<span class="string">&#x27;13966667771&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="1-2-角色表"><a href="#1-2-角色表" class="headerlink" title="1.2 角色表"></a>1.2 角色表</h2><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `x_role` (</span><br><span class="line">  `role_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `role_name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `role_desc` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`role_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `x_role` (`role_id`, `role_name`, `role_desc`) <span class="keyword">values</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;超级管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `x_role` (`role_id`, `role_name`, `role_desc`) <span class="keyword">values</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;hr&#x27;</span>,<span class="string">&#x27;人事专员&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `x_role` (`role_id`, `role_name`, `role_desc`) <span class="keyword">values</span>(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;normal&#x27;</span>,<span class="string">&#x27;普通员工&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="1-3-菜单表"><a href="#1-3-菜单表" class="headerlink" title="1.3 菜单表"></a>1.3 菜单表</h2><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `x_menu` (</span><br><span class="line">  `menu_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `component` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `path` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `redirect` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `icon` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `parent_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `is_leaf` <span class="type">varchar</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `hidden` tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`menu_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">12</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `x_menu`(`menu_id`,`component`,`path`,`redirect`,`name`,`title`,`icon`,`parent_id`,`is_leaf`,`hidden`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;Layout&#x27;</span>,<span class="string">&#x27;/user&#x27;</span>,<span class="string">&#x27;/user/list&#x27;</span>,<span class="string">&#x27;userManage&#x27;</span>,<span class="string">&#x27;用户管理&#x27;</span>,<span class="string">&#x27;userManage&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;N&#x27;</span>,<span class="number">0</span>),(<span class="number">2</span>,<span class="string">&#x27;user/user&#x27;</span>,<span class="string">&#x27;list&#x27;</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;userList&#x27;</span>,<span class="string">&#x27;用户列表&#x27;</span>,<span class="string">&#x27;userList&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="number">0</span>),(<span class="number">3</span>,<span class="string">&#x27;user/role&#x27;</span>,<span class="string">&#x27;role&#x27;</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;roleList&#x27;</span>,<span class="string">&#x27;角色列表&#x27;</span>,<span class="string">&#x27;role&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="number">0</span>),(<span class="number">4</span>,<span class="string">&#x27;user/permission&#x27;</span>,<span class="string">&#x27;permission&#x27;</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;permissionList&#x27;</span>,<span class="string">&#x27;权限列表&#x27;</span>,<span class="string">&#x27;permission&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="1-4-用户角色映射表"><a href="#1-4-用户角色映射表" class="headerlink" title="1.4 用户角色映射表"></a>1.4 用户角色映射表</h2><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `x_user_role` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `role_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">5</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `x_user_role` (`id`, `user_id`, `role_id`) <span class="keyword">values</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="1-5-角色菜单映射表"><a href="#1-5-角色菜单映射表" class="headerlink" title="1.5 角色菜单映射表"></a>1.5 角色菜单映射表</h2><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `x_role_menu` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `role_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `menu_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">5</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure></div>

<h1 id="二、前端"><a href="#二、前端" class="headerlink" title="二、前端"></a>二、前端</h1><h2 id="2-1-修改Vue项目配置文件"><a href="#2-1-修改Vue项目配置文件" class="headerlink" title="2.1 修改Vue项目配置文件"></a>2.1 修改Vue项目配置文件</h2><p>①vue.config.js文件中将第39行的“before: require(‘.&#x2F;mock&#x2F;mock-server.js’)”注释掉；</p>
<p>②.env.development文件中的VUE_APP_BASE_API的内容改为<a class="link" href="http://localhost:8080/">http://localhost:8080 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="2-2-设置用户界面"><a href="#2-2-设置用户界面" class="headerlink" title="2.2 设置用户界面"></a>2.2 设置用户界面</h2><h3 id="2-2-1-查询卡片"><a href="#2-2-1-查询卡片" class="headerlink" title="2.2.1 查询卡片"></a>2.2.1 查询卡片</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230830210014645.png" alt="image-20230830210014645"></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 搜索栏  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">id</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchModel.username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">clearable</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchModel.phone&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;电话号码&quot;</span> <span class="attr">clearable</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">round</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-search&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;4&quot;</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-plus&quot;</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">//user<span class="selector-class">.js</span></span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-id">#search</span> <span class="selector-class">.el-input</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">//App<span class="selector-class">.vue</span></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-class">.app-main</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.el-card</span>&#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-2-结果卡片"><a href="#2-2-2-结果卡片" class="headerlink" title="2.2.2 结果卡片"></a>2.2.2 结果卡片</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230830210235595.png" alt="image-20230830210235595"></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  结果列表  需要在div标签中--&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">el-card</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;userList&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;#&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- (pageNo-1) * pageSize + index + 1 --&gt;</span></span><br><span class="line">             &#123;&#123; (searchModel.pageNo-1) * searchModel.pageSize + scope.$index +1 &#125;&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;用户名ID&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;username&quot;</span> <span class="attr">label</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">label</span>=<span class="string">&quot;电话&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;email&quot;</span> <span class="attr">label</span>=<span class="string">&quot;电子邮箱&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">//App<span class="selector-class">.vue</span></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-class">.app-main</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.el-card</span>&#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-3-分页结果插件"><a href="#2-2-3-分页结果插件" class="headerlink" title="2.2.3 分页结果插件"></a>2.2.3 分页结果插件</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230830210423315.png" alt="image-20230830210423315"></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span> @<span class="attr">size-change</span>=<span class="string">&quot;handleSizeChange&quot;</span> @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span> <span class="attr">:current-page</span>=<span class="string">&quot;searchModel.pageNo&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:page-sizes</span>=<span class="string">&quot;[5, 10, 20, 50]&quot;</span> <span class="attr">:page-size</span>=<span class="string">&quot;searchModel.pageSize&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:total</span>=<span class="string">&quot;total&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line">//current-page是绑定到data中的searchModel.pageNo</span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-4-Vue-Router"><a href="#2-2-4-Vue-Router" class="headerlink" title="2.2.4 Vue-Router"></a>2.2.4 Vue-Router</h3><p>在目录src&#x2F;router&#x2F;index.js的export const constantRoutes 中编写：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;dashboard&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Dashboard&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/dashboard/index&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;神盾局特攻管理系统&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;dashboard&#x27;</span> &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/sys&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/sys/user&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;sysManage&#x27;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;系统管理&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;el-icon-s-help&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/sys/user&#x27;</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;用户管理&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;table&#x27;</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;role&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;role&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/sys/role&#x27;</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;角色管理&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;tree&#x27;</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/test&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/test/test1&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;功能测试&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;el-icon-s-help&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;test1&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;test1&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/test/test1&#x27;</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;功能测试1&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;table&#x27;</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;test2&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;test2&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/test/test2&#x27;</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;功能测试2&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;table&#x27;</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;test3&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;test3&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/test/test3&#x27;</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;功能测试3&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;table&#x27;</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></div>

<p>最后显示的效果如下<br><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230830212205227.png" alt="image-20230830212205227"></p>
<h3 id="2-2-5-用户新增表单"><a href="#2-2-5-用户新增表单" class="headerlink" title="2.2.5 用户新增表单"></a>2.2.5 用户新增表单</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 嵌套新增用户表单 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogFormVisible&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;userForm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;userForm.username&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;登录密码&quot;</span> <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userForm.password&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;联系方式&quot;</span> <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;userForm.phone&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;用户状态&quot;</span> <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 用户状态的switch开关 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-switch</span> <span class="attr">v-model</span>=<span class="string">&quot;userForm.status&quot;</span> <span class="attr">:active-value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">:inactive-value</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-switch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;电子邮件&quot;</span> <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;userForm.email&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;dialogFormVisible = false&quot;</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;dialogFormVisible = false&quot;</span>&gt;</span>确 定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>在data属性中绑定如下数据：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">formLabelWidth</span>: <span class="string">&#x27;130px&#x27;</span>,</span><br><span class="line">      <span class="attr">userForm</span>:&#123;&#125;,</span><br><span class="line">      <span class="attr">dialogFormVisible</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">title</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.el-dialog</span> <span class="selector-class">.el-input</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">85%</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<p>在methods中添加如下方法：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">openEditUI</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;新增用户&#x27;</span>,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-6-修改用户表单"><a href="#2-2-6-修改用户表单" class="headerlink" title="2.2.6 修改用户表单"></a>2.2.6 修改用户表单</h3><p>userManage.js文件</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">updateUser</span>(<span class="params">user</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">           <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">           <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">           <span class="attr">data</span>: user</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="title function_">saveUser</span>(<span class="params">user</span>)&#123;</span><br><span class="line">       <span class="keyword">if</span>(user.<span class="property">id</span> == <span class="literal">null</span> &amp;&amp; user.<span class="property">id</span> == <span class="literal">undefined</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">addUser</span>(user);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">updateUser</span>(user);</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="title function_">getUserById</span>(<span class="params">id</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">           <span class="attr">url</span>: <span class="string">`/user/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">           <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831152040737.png" alt="image-20230831152040737"></p>
<p>在methods中修改saveUserf方法</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">saveUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//触发表单验证</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">userFormRef</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(valid)&#123;</span><br><span class="line">          userApi.<span class="title function_">saveUser</span>(<span class="variable language_">this</span>.<span class="property">userForm</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">              <span class="attr">message</span>:<span class="string">&#x27;恭喜你，这是一条成功的消息&#x27;</span>,</span><br><span class="line">              <span class="attr">type</span>:<span class="string">&#x27;success&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error submit!&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);        </span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></div>

<p>编辑openEditUI方法:</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">openEditUI</span>(<span class="params">id</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(id==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;新增用户&#x27;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;修改用户&#x27;</span>;</span><br><span class="line">        <span class="comment">//根据ID查询用户数据</span></span><br><span class="line">        userApi.<span class="title function_">getUserById</span>(id).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span>&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">userForm</span> = response.<span class="property">data</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-7-删除用户"><a href="#2-2-7-删除用户" class="headerlink" title="2.2.7 删除用户"></a>2.2.7 删除用户</h3><p>页面添加按钮并绑定deleteUser方法</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831174722319.png" alt="image-20230831174722319"></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">deleteUser</span>(<span class="params">user</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.$confirm(<span class="string">`您确认删除用户<span class="subst">$&#123;user.username&#125;</span> ?`</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">       <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">       <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">       <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">     &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       userApi.<span class="title function_">deleteUserById</span>(user.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">           <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">           <span class="attr">message</span>: response.<span class="property">message</span></span><br><span class="line">         &#125;);</span><br><span class="line">         <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">         <span class="attr">type</span>: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">         <span class="attr">message</span>: <span class="string">&#x27;已取消删除&#x27;</span></span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure></div>

<h2 id="2-3-后端数据渲染到前端页面-前后端交互"><a href="#2-3-后端数据渲染到前端页面-前后端交互" class="headerlink" title="2.3 后端数据渲染到前端页面(前后端交互)"></a>2.3 后端数据渲染到前端页面(前后端交互)</h2><h3 id="2-3-1-api的编写"><a href="#2-3-1-api的编写" class="headerlink" title="2.3.1 api的编写"></a>2.3.1 api的编写</h3><p>在src&#x2F;api目录下创建userManage.js文件</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">getUserList</span>(<span class="params">searchModel</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;/user/list&#x27;</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">            <span class="attr">params</span>:&#123;</span><br><span class="line">                <span class="attr">pageNo</span>: searchModel.<span class="property">pageNo</span>,</span><br><span class="line">                <span class="attr">pageSize</span>: searchModel.<span class="property">pageSize</span>,</span><br><span class="line">                <span class="attr">username</span>: searchModel.<span class="property">username</span>,</span><br><span class="line">                <span class="attr">phone</span>: searchModel.<span class="property">phone</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-3-2-按钮-Click事件"><a href="#2-3-2-按钮-Click事件" class="headerlink" title="2.3.2 按钮@Click事件"></a>2.3.2 按钮@Click事件</h3><p>绑定getUserList方法</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">round</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-search&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>在methods中编写：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getUserList</span>(<span class="params"></span>)&#123;</span><br><span class="line">      userApi.<span class="title function_">getUserList</span>(<span class="variable language_">this</span>.<span class="property">searchModel</span>).<span class="title function_">then</span>( <span class="function"><span class="params">response</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">userList</span> = response.<span class="property">data</span>.<span class="property">rows</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">total</span> = response.<span class="property">data</span>.<span class="property">total</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>其中response中存储的数据格式如下：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230830212302020.png" alt="image-20230830212302020"></p>
<p>在用户名框中输入admin之后查询效果如下：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230830212349806.png" alt="image-20230830212349806"></p>
<h3 id="2-3-3-分页后正确页数的显示"><a href="#2-3-3-分页后正确页数的显示" class="headerlink" title="2.3.3 分页后正确页数的显示"></a>2.3.3 分页后正确页数的显示</h3><p>绑定方法handleSizeChange和handleCurrentChange</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span> @<span class="attr">size-change</span>=<span class="string">&quot;handleSizeChange&quot;</span> @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span> <span class="attr">:current-page</span>=<span class="string">&quot;currentPage4&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:page-sizes</span>=<span class="string">&quot;[5, 10, 20, 50]&quot;</span> <span class="attr">:page-size</span>=<span class="string">&quot;searchModel.pageSize&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span> <span class="attr">:total</span>=<span class="string">&quot;total&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>在methods中编写：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleCurrentChange</span>(<span class="params">pageNo</span>)&#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">searchModel</span>.<span class="property">pageNo</span> = pageNo;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="title function_">handleSizeChange</span>(<span class="params">pageSize</span>)&#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">searchModel</span>.<span class="property">pageSize</span> = pageSize;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-3-4-定义分页的起始数量"><a href="#2-3-4-定义分页的起始数量" class="headerlink" title="2.3.4 定义分页的起始数量"></a>2.3.4 定义分页的起始数量</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">total</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="attr">searchModel</span>: &#123;</span><br><span class="line">        <span class="attr">pageNo</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">pageSize</span>:<span class="number">10</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-3-5-后端数据在结果列表的显示"><a href="#2-3-5-后端数据在结果列表的显示" class="headerlink" title="2.3.5 后端数据在结果列表的显示"></a>2.3.5 后端数据在结果列表的显示</h3><p>在结果列表中绑定data:userList</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230830211728385.png" alt="image-20230830211728385"></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     <span class="attr">total</span>:<span class="number">0</span>,</span><br><span class="line">     <span class="attr">searchModel</span>: &#123;</span><br><span class="line">       <span class="attr">pageNo</span>:<span class="number">1</span>,</span><br><span class="line">       <span class="attr">pageSize</span>:<span class="number">10</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">userList</span>: []  <span class="comment">//绑定的数组</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-3-6-新增用户表单提交"><a href="#2-3-6-新增用户表单提交" class="headerlink" title="2.3.6 新增用户表单提交"></a>2.3.6 新增用户表单提交</h3><p>在用户表单中新增<strong>rules</strong>属性，值为<strong>rules</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-form :model=&quot;userForm&quot; :rules=&quot;rules&quot;&gt;</span><br></pre></td></tr></table></figure></div>

<p>将<strong>rules</strong>绑定到<strong>data</strong>中，</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">rules</span>:&#123;</span><br><span class="line">        <span class="attr">username</span>: [</span><br><span class="line">            &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入用户名&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">min</span>: <span class="number">3</span>, <span class="attr">max</span>: <span class="number">50</span>, <span class="attr">message</span>: <span class="string">&#x27;长度在 3 到 50 个字符&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">password</span>: [</span><br><span class="line">            &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入初始密码&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">min</span>: <span class="number">6</span>, <span class="attr">max</span>: <span class="number">16</span>, <span class="attr">message</span>: <span class="string">&#x27;长度在 6 到 16 个字符&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">email</span>: [</span><br><span class="line">            &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入电子邮件&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span><br><span class="line">          ],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></div>

<p>在<strong>username</strong>，<strong>password</strong>，<strong>email</strong>标签中绑定<strong>prop</strong>属性</p>
<p>验证邮箱输入格式是否正确：</p>
<p>在<strong>data</strong>中定义如下规则：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">checkEmial</span> = (<span class="params">rule,value,callback</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z0-9]+([-_.][a-zA-Z0-9]+)*@[a-zA-Z0-9]+([-_.][a-zA-Z0-9]+)*\.[a-z]&#123;2,&#125;$/</span></span><br><span class="line">      <span class="keyword">if</span>(!reg.<span class="title function_">test</span>(value))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;邮箱格式错误&#x27;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">callback</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在<strong>rules</strong>中的<strong>email</strong>中，绑定<strong>checkEmial</strong>方法</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831094854959.png" alt="image-20230831094854959"></p>
<p>在关闭错误验证的表单后取消掉表单验证：</p>
<p>在表单中绑定<strong>ref</strong>属性：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831095332758.png" alt="image-20230831095332758"></p>
<p>在<strong>clearForm</strong>表单中添加如下代码：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831095428968.png" alt="image-20230831095428968"></p>
<p><strong>重点</strong>：给确定按钮绑定方法</p>
<p>给确定按钮绑定saveUser方法</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831144315062.png" alt="image-20230831144315062"></p>
<p>在methods中实现方法：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">saveUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//触发表单验证</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">userFormRef</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(valid)&#123;</span><br><span class="line">          userApi.<span class="title function_">addUser</span>(<span class="variable language_">this</span>.<span class="property">userForm</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">              <span class="attr">message</span>:<span class="string">&#x27;恭喜你，这是一条成功的消息&#x27;</span>,</span><br><span class="line">              <span class="attr">type</span>:<span class="string">&#x27;success&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getUserList</span>();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error submit!&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);        </span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></div>

<p>在userManage中添加api：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">addUser</span>(<span class="params">user</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: user</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></div>

<h3 id="2-3-7-删除用户"><a href="#2-3-7-删除用户" class="headerlink" title="2.3.7 删除用户"></a>2.3.7 删除用户</h3><p>在userManage.js中添加如下文件：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">deleteUserById</span>(<span class="params">id</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">`/user/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></div>

<h1 id="三、后端"><a href="#三、后端" class="headerlink" title="三、后端"></a>三、后端</h1><h2 id="3-1-相关初始化操作"><a href="#3-1-相关初始化操作" class="headerlink" title="3.1 相关初始化操作"></a>3.1 相关初始化操作</h2><h3 id="3-1-1-配置porm-xml文件"><a href="#3-1-1-配置porm-xml文件" class="headerlink" title="3.1.1 配置porm.xml文件"></a>3.1.1 配置porm.xml文件</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- freemarker --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- mysql驱动器 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="3-1-2-公共响应类"><a href="#3-1-2-公共响应类" class="headerlink" title="3.1.2 公共响应类"></a>3.1.2 公共响应类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20000</span>,<span class="string">&quot;success&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20000</span>,<span class="string">&quot;success&quot;</span>,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">success</span><span class="params">(T data, String message)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20000</span>,message,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">success</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20000</span>,message,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">fail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20001</span>,<span class="string">&quot;fail&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">fail</span><span class="params">(Integer code)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(code,<span class="string">&quot;fail&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">fail</span><span class="params">(Integer code, String message)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(code,message,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">fail</span><span class="params">( String message)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20001</span>,message,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-1-3-MyBatis-Plus生成器"><a href="#3-1-3-MyBatis-Plus生成器" class="headerlink" title="3.1.3 MyBatis-Plus生成器"></a>3.1.3 MyBatis-Plus生成器</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/springboot_vue&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;ZyL68123&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> <span class="string">&quot;DemoLynn&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">outputDir</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\Lynn\\Desktop\\SpringBoot-vue\\src\\main\\java&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">basePackage</span> <span class="operator">=</span> <span class="string">&quot;com.example.springbootvue&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">moduleName</span> <span class="operator">=</span> <span class="string">&quot;sys&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">mapperLocation</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\Lynn\\Desktop\\SpringBoot-vue\\src\\main\\resources\\mapper&quot;</span> + moduleName;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tableName</span> <span class="operator">=</span> <span class="string">&quot;x_user,x_menu,x_role,x_role_menu,x_user_role&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tablePrefix</span> <span class="operator">=</span> <span class="string">&quot;x_&quot;</span>;</span><br><span class="line">        FastAutoGenerator.create(url, username, password)</span><br><span class="line">                .globalConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.author(author) <span class="comment">// 设置作者</span></span><br><span class="line">                            <span class="comment">//.enableSwagger() // 开启 swagger 模式</span></span><br><span class="line">                            <span class="comment">//.fileOverride() // 覆盖已生成文件</span></span><br><span class="line">                            .outputDir(outputDir); <span class="comment">// 指定输出目录</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .packageConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.parent(basePackage) <span class="comment">// 设置父包名</span></span><br><span class="line">                            .moduleName(moduleName) <span class="comment">// 设置父包模块名</span></span><br><span class="line">                            .pathInfo(Collections.singletonMap(OutputFile.xml, mapperLocation)); <span class="comment">// 设置mapperXml生成路径</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .strategyConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.addInclude(tableName) <span class="comment">// 设置需要生成的表名</span></span><br><span class="line">                            .addTablePrefix(tablePrefix); <span class="comment">// 设置过滤表前缀</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>()) <span class="comment">// 使用Freemarker引擎模板，默认的是Velocity引擎模板</span></span><br><span class="line">                .execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-1-4-测试"><a href="#3-1-4-测试" class="headerlink" title="3.1.4 测试"></a>3.1.4 测试</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testMapper</span><span class="params">()</span>&#123;</span><br><span class="line">     List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">     users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IUserService userService;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;User&gt;&gt; <span class="title function_">getAllUser</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;User&gt; list = userService.list();</span><br><span class="line">    <span class="keyword">return</span> Result.success(list,<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-1-5-Redis启动"><a href="#3-1-5-Redis启动" class="headerlink" title="3.1.5 Redis启动"></a>3.1.5 Redis启动</h3><p>redis-server.exe redis.windows.conf</p>
<p>目录E:\Redis下cmd</p>
<h2 id="3-2-正式开发"><a href="#3-2-正式开发" class="headerlink" title="3.2 正式开发"></a>3.2 正式开发</h2><h3 id="番外：跨域"><a href="#番外：跨域" class="headerlink" title="番外：跨域"></a>番外：跨域</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisConnectionFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line"></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; serializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">        redisTemplate.setValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.setDateFormat(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        om.setTimeZone(TimeZone.getDefault());</span><br><span class="line">        om.configure(MapperFeature.USE_ANNOTATIONS, <span class="literal">false</span>);</span><br><span class="line">        om.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line">        om.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="literal">false</span>);</span><br><span class="line">        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance ,ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);</span><br><span class="line">        om.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">        serializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="3-2-1-登录"><a href="#3-2-1-登录" class="headerlink" title="3.2.1 登录"></a>3.2.1 登录</h3><table>
<thead>
<tr>
<th>接口属性</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>&#x2F;user&#x2F;login</td>
</tr>
<tr>
<td>method</td>
<td>post</td>
</tr>
<tr>
<td>请求参数</td>
<td>username<br>password</td>
</tr>
<tr>
<td>返回参数</td>
<td><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230830153609149.png" alt="image-20230830153609149"></td>
</tr>
</tbody></table>
<p>@Controller</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; data = userService.login(user);</span><br><span class="line">        <span class="keyword">if</span>(data != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.success(data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="number">20002</span>,<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>@Service</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(User::getUsername,user.getUsername());</span><br><span class="line">        wrapper.eq(User::getPassword,user.getPassword());</span><br><span class="line">        <span class="type">User</span> <span class="variable">userLogin</span> <span class="operator">=</span> <span class="built_in">this</span>.baseMapper.selectOne(wrapper);</span><br><span class="line">        <span class="keyword">if</span>(userLogin!=<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//生成token，UUID；JWT</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;user:&quot;</span>+ UUID.randomUUID();</span><br><span class="line">            <span class="comment">//存入redis</span></span><br><span class="line">            userLogin.setPassword(<span class="literal">null</span>);</span><br><span class="line">            redisTemplate.opsForValue().set(key,userLogin,<span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">            <span class="comment">//返回数据</span></span><br><span class="line">            Map&lt;String,Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            data.put(<span class="string">&quot;token&quot;</span>,key);</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">login</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-2-2-注销"><a href="#3-2-2-注销" class="headerlink" title="3.2.2 注销"></a>3.2.2 注销</h3><table>
<thead>
<tr>
<th>接口属性</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>&#x2F;user&#x2F;logout</td>
</tr>
<tr>
<td>method</td>
<td>post</td>
</tr>
<tr>
<td>请求参数</td>
<td></td>
</tr>
<tr>
<td>返回参数</td>
<td><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230830180537781.png" alt="image-20230830180537781"></td>
</tr>
</tbody></table>
<p>@Controller</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; logout(<span class="meta">@RequestHeader(&quot;X-Token&quot;)</span> String token)&#123;</span><br><span class="line">        userService.logout(token);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>@Service</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        redisTemplate.delete(token);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">(String token)</span>;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-2-3-查询所有信息"><a href="#3-2-3-查询所有信息" class="headerlink" title="3.2.3 查询所有信息"></a>3.2.3 查询所有信息</h3><table>
<thead>
<tr>
<th>接口属性</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>&#x2F;user&#x2F;list</td>
</tr>
<tr>
<td>method</td>
<td>get</td>
</tr>
<tr>
<td>请求参数</td>
<td>username&#x2F;phone,pageNo,pageSize</td>
</tr>
<tr>
<td>返回参数</td>
<td><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230830203702416.png" alt="image-20230830203702416"></td>
</tr>
</tbody></table>
<p>@Controller</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">getUserList</span><span class="params">(<span class="meta">@RequestParam(value = &quot;username&quot;,required = false)</span>String username,</span></span><br><span class="line"><span class="params">                                              <span class="meta">@RequestParam(value = &quot;phone&quot;,required = false)</span> String phone,</span></span><br><span class="line"><span class="params">                                              <span class="meta">@RequestParam(value = &quot;pageNo&quot;)</span>Long pageNo,</span></span><br><span class="line"><span class="params">                                              <span class="meta">@RequestParam(value = &quot;pageSize&quot;)</span>Long pageSize)</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(StringUtils.hasLength(username),User::getUsername,username);</span><br><span class="line">        wrapper.eq(StringUtils.hasLength(phone),User::getPhone,phone);</span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNo,pageSize);</span><br><span class="line">        userService.page(page,wrapper);</span><br><span class="line">        Map&lt;String,Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;total&quot;</span>,page.getTotal());</span><br><span class="line">        data.put(<span class="string">&quot;rows&quot;</span>,page.getRecords());</span><br><span class="line">        <span class="keyword">return</span> Result.success(data);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-2-4-新增用户表单"><a href="#3-2-4-新增用户表单" class="headerlink" title="3.2.4 新增用户表单"></a>3.2.4 新增用户表单</h3><p><strong>密码加密部分</strong>：</p>
<p>porm.xml文件添加如下依赖：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>后端启动类添加如下代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>UserController类：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; addUser(<span class="meta">@RequestBody</span> User user)&#123;</span><br><span class="line">        user.setPassword(passwordEncoder.encode(user.getPassword()));</span><br><span class="line">        userService.save(user);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;新增用户成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>userService：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(User::getUsername,user.getUsername());</span><br><span class="line">        <span class="type">User</span> <span class="variable">userLogin</span> <span class="operator">=</span> <span class="built_in">this</span>.baseMapper.selectOne(wrapper);</span><br><span class="line">        <span class="keyword">if</span>(userLogin!=<span class="literal">null</span> &amp;&amp; passwordEncoder.matches(user.getPassword(), userLogin.getPassword()))&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;user&quot;</span>+ UUID.randomUUID();</span><br><span class="line">            userLogin.setPassword(<span class="literal">null</span>);</span><br><span class="line">            redisTemplate.opsForValue().set(key,userLogin,<span class="number">30</span>,TimeUnit.MINUTES);</span><br><span class="line">            Map&lt;String,Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            data.put(<span class="string">&quot;token&quot;</span>,key);</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-2-5-修改用户"><a href="#3-2-5-修改用户" class="headerlink" title="3.2.5 修改用户"></a>3.2.5 修改用户</h3><p>userController</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line">   <span class="keyword">public</span> Result&lt;?&gt; updateUser(<span class="meta">@RequestBody</span> User user)&#123;</span><br><span class="line">       user.setPassword(<span class="literal">null</span>);</span><br><span class="line">       userService.updateById(user);</span><br><span class="line">       <span class="keyword">return</span> Result.success(<span class="string">&quot;修改用户成功&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Result&lt;User&gt; <span class="title function_">getUserId</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(id);</span><br><span class="line">       <span class="keyword">return</span> Result.success(user);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-2-6-删除用户"><a href="#3-2-6-删除用户" class="headerlink" title="3.2.6 删除用户"></a>3.2.6 删除用户</h3><p>配置<strong>application.yml</strong>文件</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<p>userController</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;User&gt; <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        userService.removeById(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;删除用户成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="四、整体代码"><a href="#四、整体代码" class="headerlink" title="四、整体代码"></a>四、整体代码</h1><h2 id="4-1-application-yml"><a href="#4-1-application-yml" class="headerlink" title="4.1 application.yml"></a>4.1 application.yml</h2><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span> <span class="comment"># ????,????</span></span><br><span class="line">  <span class="comment">#    prefix: classpath:/pages/  #?????? classpath:/templates/</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot_vue</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">ZyL68123</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># redis端口配置</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.example.springbootvue:</span> <span class="string">debug</span></span><br><span class="line"><span class="comment"># mybatis扫描配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/*.xml</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># mybatisPlus全局删除配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<h2 id="4-2-porm-xml配置"><a href="#4-2-porm-xml配置" class="headerlink" title="4.2 porm.xml配置"></a>4.2 porm.xml配置</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- freemarker --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- fastjson--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql驱动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="4-3-MyBatisPlus的代码生成文件"><a href="#4-3-MyBatisPlus的代码生成文件" class="headerlink" title="4.3 MyBatisPlus的代码生成文件"></a>4.3 MyBatisPlus的代码生成文件</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/springboot_vue&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;ZyL68123&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> <span class="string">&quot;DemoLynn&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">outputDir</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\Lynn\\Desktop\\SpringBoot-vue\\src\\main\\java&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">basePackage</span> <span class="operator">=</span> <span class="string">&quot;com.example.springbootvue&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">moduleName</span> <span class="operator">=</span> <span class="string">&quot;sys&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">mapperLocation</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\Lynn\\Desktop\\SpringBoot-vue\\src\\main\\resources\\mapper&quot;</span> + moduleName;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tableName</span> <span class="operator">=</span> <span class="string">&quot;x_user,x_menu,x_role,x_role_menu,x_user_role&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tablePrefix</span> <span class="operator">=</span> <span class="string">&quot;x_&quot;</span>;</span><br><span class="line">        FastAutoGenerator.create(url, username, password)</span><br><span class="line">                .globalConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.author(author) <span class="comment">// 设置作者</span></span><br><span class="line">                            <span class="comment">//.enableSwagger() // 开启 swagger 模式</span></span><br><span class="line">                            <span class="comment">//.fileOverride() // 覆盖已生成文件</span></span><br><span class="line">                            .outputDir(outputDir); <span class="comment">// 指定输出目录</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .packageConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.parent(basePackage) <span class="comment">// 设置父包名</span></span><br><span class="line">                            .moduleName(moduleName) <span class="comment">// 设置父包模块名</span></span><br><span class="line">                            .pathInfo(Collections.singletonMap(OutputFile.xml, mapperLocation)); <span class="comment">// 设置mapperXml生成路径</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .strategyConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.addInclude(tableName) <span class="comment">// 设置需要生成的表名</span></span><br><span class="line">                            .addTablePrefix(tablePrefix); <span class="comment">// 设置过滤表前缀</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>()) <span class="comment">// 使用Freemarker引擎模板，默认的是Velocity引擎模板</span></span><br><span class="line">                .execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="4-4-vo层公共响应类"><a href="#4-4-vo层公共响应类" class="headerlink" title="4.4 vo层公共响应类"></a>4.4 vo层公共响应类</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20000</span>,<span class="string">&quot;success&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20000</span>,<span class="string">&quot;success&quot;</span>,data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">success</span><span class="params">(T data, String message)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20000</span>,message,data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">success</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20000</span>,message,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">fail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20001</span>,<span class="string">&quot;fail&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">fail</span><span class="params">(Integer code)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(code,<span class="string">&quot;fail&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">fail</span><span class="params">(Integer code, String message)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(code,message,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt;  Result&lt;T&gt; <span class="title function_">fail</span><span class="params">( String message)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">20001</span>,message,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="4-5-config配置包"><a href="#4-5-config配置包" class="headerlink" title="4.5 config配置包"></a>4.5 config配置包</h2><h3 id="4-5-1-CorsConfig跨域类"><a href="#4-5-1-CorsConfig跨域类" class="headerlink" title="4.5.1 CorsConfig跨域类"></a>4.5.1 CorsConfig跨域类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.添加CORS配置信息</span></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">//1) 允许的域,不要写*，否则cookie就无法使用了</span></span><br><span class="line">        configuration.addAllowedOrigin(<span class="string">&quot;http://localhost:8888&quot;</span>); <span class="comment">//这里填写请求的前端服务器</span></span><br><span class="line">        <span class="comment">//2) 是否发送Cookie信息</span></span><br><span class="line">        configuration.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//3) 允许的请求方式</span></span><br><span class="line">        configuration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 4）允许的头信息</span></span><br><span class="line">        configuration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加映射路径，我们拦截一切请求</span></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">configSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, configuration);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="4-5-2-Mybatis配置类"><a href="#4-5-2-Mybatis配置类" class="headerlink" title="4.5.2 Mybatis配置类"></a>4.5.2 Mybatis配置类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="4-5-3-Redis配置类"><a href="#4-5-3-Redis配置类" class="headerlink" title="4.5.3 Redis配置类"></a>4.5.3 Redis配置类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisConnectionFactory factory;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line"></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; serializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">        redisTemplate.setValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.setDateFormat(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        om.setTimeZone(TimeZone.getDefault());</span><br><span class="line">        om.configure(MapperFeature.USE_ANNOTATIONS, <span class="literal">false</span>);</span><br><span class="line">        om.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line">        om.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="literal">false</span>);</span><br><span class="line">        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance ,ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);</span><br><span class="line">        om.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">        serializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="4-6-Controller包"><a href="#4-6-Controller包" class="headerlink" title="4.6 Controller包"></a>4.6 Controller包</h2><h3 id="4-6-1-UserContrroller"><a href="#4-6-1-UserContrroller" class="headerlink" title="4.6.1 UserContrroller"></a>4.6.1 UserContrroller</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@CrossOrigin  跨域注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;User&gt;&gt; <span class="title function_">getAllUser</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userService.list();</span><br><span class="line">        <span class="keyword">return</span> Result.success(list,<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; data = userService.login(user);</span><br><span class="line">        <span class="keyword">if</span>(data != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.success(data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="number">20002</span>,<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/info&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">getInfo</span><span class="params">(<span class="meta">@RequestParam(&quot;token&quot;)</span>String token)</span>&#123;</span><br><span class="line">        <span class="comment">//根据token获取redis里的用户信息</span></span><br><span class="line">        Map&lt;String,Object&gt; data = userService.getUserInfo(token);</span><br><span class="line">        <span class="keyword">if</span>(data != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.success(data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="number">20003</span>,<span class="string">&quot;登录信息无效，请重新登录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; logout(<span class="meta">@RequestHeader(&quot;X-Token&quot;)</span> String token)&#123;</span><br><span class="line">        userService.logout(token);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页查询所有数据</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">getUserList</span><span class="params">(<span class="meta">@RequestParam(value = &quot;username&quot;,required = false)</span>String username,</span></span><br><span class="line"><span class="params">                                              <span class="meta">@RequestParam(value = &quot;phone&quot;,required = false)</span> String phone,</span></span><br><span class="line"><span class="params">                                              <span class="meta">@RequestParam(value = &quot;pageNo&quot;)</span>Long pageNo,</span></span><br><span class="line"><span class="params">                                              <span class="meta">@RequestParam(value = &quot;pageSize&quot;)</span>Long pageSize)</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(StringUtils.hasLength(username),User::getUsername,username);</span><br><span class="line">        wrapper.eq(StringUtils.hasLength(phone),User::getPhone,phone);</span><br><span class="line">        <span class="comment">//按照用户ID排序</span></span><br><span class="line">        wrapper.orderByDesc(User::getId);</span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNo,pageSize);</span><br><span class="line">        userService.page(page,wrapper);</span><br><span class="line">        Map&lt;String,Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;total&quot;</span>,page.getTotal());</span><br><span class="line">        data.put(<span class="string">&quot;rows&quot;</span>,page.getRecords());</span><br><span class="line">        <span class="keyword">return</span> Result.success(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; addUser(<span class="meta">@RequestBody</span> User user)&#123;</span><br><span class="line">        user.setPassword(passwordEncoder.encode(user.getPassword()));</span><br><span class="line">        userService.save(user);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;新增用户成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; updateUser(<span class="meta">@RequestBody</span> User user)&#123;</span><br><span class="line">        user.setPassword(<span class="literal">null</span>);</span><br><span class="line">        userService.updateById(user);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;修改用户成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;User&gt; <span class="title function_">getUserId</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;User&gt; <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        userService.removeById(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;删除用户成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="4-7-entity包"><a href="#4-7-entity包" class="headerlink" title="4.7 entity包"></a>4.7 entity包</h2><h3 id="4-7-1-User"><a href="#4-7-1-User" class="headerlink" title="4.7.1 User"></a>4.7.1 User</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;x_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(Integer status)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAvatar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> avatar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAvatar</span><span class="params">(String avatar)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.avatar = avatar;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getDeleted</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> deleted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDeleted</span><span class="params">(Integer deleted)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.deleted = deleted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">            <span class="string">&quot;, username=&quot;</span> + username +</span><br><span class="line">            <span class="string">&quot;, password=&quot;</span> + password +</span><br><span class="line">            <span class="string">&quot;, email=&quot;</span> + email +</span><br><span class="line">            <span class="string">&quot;, phone=&quot;</span> + phone +</span><br><span class="line">            <span class="string">&quot;, status=&quot;</span> + status +</span><br><span class="line">            <span class="string">&quot;, avatar=&quot;</span> + avatar +</span><br><span class="line">            <span class="string">&quot;, deleted=&quot;</span> + deleted +</span><br><span class="line">        <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="4-8-Mapper包"><a href="#4-8-Mapper包" class="headerlink" title="4.8 Mapper包"></a>4.8 Mapper包</h2><h3 id="4-8-1-UserMapper"><a href="#4-8-1-UserMapper" class="headerlink" title="4.8.1 UserMapper"></a>4.8.1 UserMapper</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getRoleNameByUserId</span><span class="params">(Integer userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="4-9-Service包"><a href="#4-9-Service包" class="headerlink" title="4.9 Service包"></a>4.9 Service包</h2><h3 id="4-9-1-IUserService"><a href="#4-9-1-IUserService" class="headerlink" title="4.9.1 IUserService"></a>4.9.1 IUserService</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">login</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getUserInfo</span><span class="params">(String token)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">(String token)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="4-9-2-UserServiceImpl"><a href="#4-9-2-UserServiceImpl" class="headerlink" title="4.9.2 UserServiceImpl"></a>4.9.2 UserServiceImpl</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//加密前的登录逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(User::getUsername,user.getUsername());</span><br><span class="line">        wrapper.eq(User::getPassword,user.getPassword());</span><br><span class="line">        <span class="type">User</span> <span class="variable">userLogin</span> <span class="operator">=</span> <span class="built_in">this</span>.baseMapper.selectOne(wrapper);</span><br><span class="line">        <span class="keyword">if</span>(userLogin!=<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//生成token，UUID；JWT</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;user:&quot;</span>+ UUID.randomUUID();</span><br><span class="line">            <span class="comment">//存入redis</span></span><br><span class="line">            userLogin.setPassword(<span class="literal">null</span>);</span><br><span class="line">            redisTemplate.opsForValue().set(key,userLogin,<span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">            <span class="comment">//返回数据</span></span><br><span class="line">            Map&lt;String,Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            data.put(<span class="string">&quot;token&quot;</span>,key);</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public Map&lt;String, Object&gt; login(User user) &#123;</span></span><br><span class="line"><span class="comment">//        LambdaQueryWrapper&lt;User&gt; wrapper = new LambdaQueryWrapper&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        wrapper.eq(User::getUsername,user.getUsername());</span></span><br><span class="line"><span class="comment">//        User userLogin = this.baseMapper.selectOne(wrapper);</span></span><br><span class="line"><span class="comment">//        if(userLogin!=null &amp;&amp; passwordEncoder.matches(user.getPassword(), userLogin.getPassword()))&#123;</span></span><br><span class="line"><span class="comment">//            String key = &quot;user&quot;+ UUID.randomUUID();</span></span><br><span class="line"><span class="comment">//            userLogin.setPassword(null);</span></span><br><span class="line"><span class="comment">//            redisTemplate.opsForValue().set(key,userLogin,30,TimeUnit.MINUTES);</span></span><br><span class="line"><span class="comment">//            Map&lt;String,Object&gt; data = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//            data.put(&quot;token&quot;,key);</span></span><br><span class="line"><span class="comment">//            return data;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return null;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getUserInfo</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="comment">//根据token，获取redis信息</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> redisTemplate.opsForValue().get(token);</span><br><span class="line">        <span class="keyword">if</span>(object != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">userLogin</span> <span class="operator">=</span> JSON.parseObject(JSON.toJSONString(object), User.class);</span><br><span class="line">            Map&lt;String,Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            data.put(<span class="string">&quot;name&quot;</span>,userLogin.getUsername());</span><br><span class="line">            data.put(<span class="string">&quot;avatar&quot;</span>,userLogin.getAvatar());</span><br><span class="line">            <span class="comment">//存入角色</span></span><br><span class="line">            List&lt;String&gt; roleList = <span class="built_in">this</span>.baseMapper.getRoleNameByUserId(userLogin.getId());</span><br><span class="line">            data.put(<span class="string">&quot;roles&quot;</span>,roleList);</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        redisTemplate.delete(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="4-10-resources目录下的mapper-xml"><a href="#4-10-resources目录下的mapper-xml" class="headerlink" title="4.10 resources目录下的mapper.xml"></a>4.10 resources目录下的mapper.xml</h2><h3 id="4-10-1-UserMapper-xml"><a href="#4-10-1-UserMapper-xml" class="headerlink" title="4.10.1 UserMapper.xml"></a>4.10.1 UserMapper.xml</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.springbootvue.sys.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getRoleNameByUserId&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Integer&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span><br><span class="line">        select b.role_name from x_user_role a, x_role b where a.role_id = b.role_id and a.user_id = #&#123;userId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="五、整体效果"><a href="#五、整体效果" class="headerlink" title="五、整体效果"></a>五、整体效果</h1><h2 id="5-1-登录页面"><a href="#5-1-登录页面" class="headerlink" title="5.1 登录页面"></a>5.1 登录页面</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831180232446.png" alt="image-20230831180232446"></p>
<h2 id="5-2-用户管理页面"><a href="#5-2-用户管理页面" class="headerlink" title="5.2 用户管理页面"></a>5.2 用户管理页面</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831180255153.png" alt="image-20230831180255153"></p>
<h2 id="5-3-查询功能"><a href="#5-3-查询功能" class="headerlink" title="5.3 查询功能"></a>5.3 查询功能</h2><h3 id="5-3-1-用户名查询"><a href="#5-3-1-用户名查询" class="headerlink" title="5.3.1 用户名查询"></a>5.3.1 用户名查询</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831180323289.png" alt="image-20230831180323289"></p>
<h3 id="5-3-2-电话号码查询"><a href="#5-3-2-电话号码查询" class="headerlink" title="5.3.2 电话号码查询"></a>5.3.2 电话号码查询</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831180351330.png" alt="image-20230831180351330"></p>
<h2 id="5-4-更改用户信息（zhangsan的正常转禁用）"><a href="#5-4-更改用户信息（zhangsan的正常转禁用）" class="headerlink" title="5.4 更改用户信息（zhangsan的正常转禁用）"></a>5.4 更改用户信息（zhangsan的正常转禁用）</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831180452320.png" alt="image-20230831180452320"></p>
<h2 id="5-5-删除用户（删除lilili）"><a href="#5-5-删除用户（删除lilili）" class="headerlink" title="5.5 删除用户（删除lilili）"></a>5.5 删除用户（删除lilili）</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831180525008.png" alt="image-20230831180525008"></p>
<p>下图以无lilili</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831180541136.png" alt="image-20230831180541136"></p>
<h2 id="5-6-添加用户"><a href="#5-6-添加用户" class="headerlink" title="5.6 添加用户"></a>5.6 添加用户</h2><h3 id="5-6-1-添加表单"><a href="#5-6-1-添加表单" class="headerlink" title="5.6.1 添加表单"></a>5.6.1 添加表单</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831180633920.png" alt="image-20230831180633920"></p>
<h3 id="5-6-2-添加成功"><a href="#5-6-2-添加成功" class="headerlink" title="5.6.2 添加成功"></a>5.6.2 添加成功</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831180655176.png" alt="image-20230831180655176"></p>
]]></content>
      <categories>
        <category>前后端分离</category>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Vue</tag>
        <tag>MyBatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-vue全栈开发之Vue框架篇</title>
    <url>/2023/08/17/SpringBoot-vue%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B9%8BVue%E6%A1%86%E6%9E%B6%E7%AF%87/</url>
    <content><![CDATA[<h1 id="一、Vue快速入门"><a href="#一、Vue快速入门" class="headerlink" title="一、Vue快速入门"></a>一、Vue快速入门</h1><p>导入vue.js的script脚本文件：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>在页面声明一个将要被vue所控制的DOM区域，既MVVM中的View</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></div>

<p>创建vm实例对象(vue实例对象)</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const hello =&#123;</span><br><span class="line">//指定数据源：既MVVM中的Model</span><br><span class="line">	data: function()&#123;</span><br><span class="line">		return &#123;</span><br><span class="line">			message:&quot;Hello Vue!&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">const app = Vue.createApp(hello)</span><br><span class="line">app.mount(&#x27;#app&#x27;)//指定当前vue实例要控制页面哪个区域</span><br></pre></td></tr></table></figure></div>

<h2 id="1-1-基本用法"><a href="#1-1-基本用法" class="headerlink" title="1.1 基本用法"></a>1.1 基本用法</h2><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="title class_">Hello</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">message</span>: <span class="string">&#x27;Hello Vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">Hello</span>)</span></span><br><span class="line"><span class="language-javascript">        app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="1-2-内容渲染指令"><a href="#1-2-内容渲染指令" class="headerlink" title="1.2 内容渲染指令"></a>1.2 内容渲染指令</h2><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;usrename&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;gender&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;desc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm=&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">usrename</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">desc</span>: <span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(vm),</span></span><br><span class="line"><span class="language-javascript">        app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="1-3-使用JavaScript表达式"><a href="#1-3-使用JavaScript表达式" class="headerlink" title="1.3 使用JavaScript表达式"></a>1.3 使用JavaScript表达式</h2><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=&lt;device-width&gt;, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;number+1&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;ok ? &#x27;True&#x27; : &#x27;False&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:id</span>=<span class="string">&quot;&#x27;list&#x27; + id&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;usrename.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">number</span>:<span class="number">9</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">ok</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">message</span>:<span class="string">&#x27;ABC&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>:<span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">user</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app= <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(vm)</span></span><br><span class="line"><span class="language-javascript">        app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="1-4-事件绑定指令"><a href="#1-4-事件绑定指令" class="headerlink" title="1.4 事件绑定指令"></a>1.4 事件绑定指令</h2><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;addCount&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count+=1&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">count</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">addCount</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">count</span>+=<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(vm)</span></span><br><span class="line"><span class="language-javascript">        app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="1-5-条件渲染指令"><a href="#1-5-条件渲染指令" class="headerlink" title="1.5 条件渲染指令"></a>1.5 条件渲染指令</h2><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;flag = !falg&quot;</span>&gt;</span>Toggle Flag<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>请求成功---被v-if控制<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>请求成功---被v-show控制<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">flag</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(vm)</span></span><br><span class="line"><span class="language-javascript">        app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="1-6-v-else和v-else-if指令"><a href="#1-6-v-else和v-else-if指令" class="headerlink" title="1.6 v-else和v-else-if指令"></a>1.6 v-else和v-else-if指令</h2><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;num &gt; 0.5&quot;</span>&gt;</span>随机数&gt;0.5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>随机数<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span>一般<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>差<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">            测试</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;!a&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="1-7-列表渲染指令"><a href="#1-7-列表渲染指令" class="headerlink" title="1.7 列表渲染指令"></a>1.7 列表渲染指令</h2><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(user ,index) in userList&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;,&#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                   <span class="attr">userList</span>:[</span></span><br><span class="line"><span class="language-javascript">                        &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;zhangsan&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                        &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&#x27;ls&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                        &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&#x27;ww&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                   ],</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(vm)</span></span><br><span class="line"><span class="language-javascript">        app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="1-8-v-for中的Key"><a href="#1-8-v-for中的Key" class="headerlink" title="1.8 v-for中的Key"></a>1.8 v-for中的Key</h2><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addNewUser&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(user,index) in userList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">                姓名：&#123;&#123;user.name&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                   <span class="attr">userList</span>:[</span></span><br><span class="line"><span class="language-javascript">                        &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;zhangsan&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                        &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&#x27;ls&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                        &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&#x27;ww&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                   ],</span></span><br><span class="line"><span class="language-javascript">                   <span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                   <span class="attr">nextId</span>:<span class="number">3</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">method</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">addNewUser</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">userList</span>.<span class="title function_">unshift</span>(&#123;<span class="attr">id</span>:<span class="variable language_">this</span>.<span class="property">id</span>,<span class="attr">name</span>:<span class="variable language_">this</span>.<span class="property">name</span>&#125;),</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">nextId</span>++</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(vm)</span></span><br><span class="line"><span class="language-javascript">        app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="二、Vue组件化开发"><a href="#二、Vue组件化开发" class="headerlink" title="二、Vue组件化开发"></a>二、Vue组件化开发</h1><h2 id="2-1-NPM使用"><a href="#2-1-NPM使用" class="headerlink" title="2.1 NPM使用"></a>2.1 NPM使用</h2><h3 id="2-1-1-NPM简介"><a href="#2-1-1-NPM简介" class="headerlink" title="2.1.1 NPM简介"></a>2.1.1 NPM简介</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/NPM%E7%AE%80%E4%BB%8B.png"></p>
<h2 id="2-2-Vue-CLI使用"><a href="#2-2-Vue-CLI使用" class="headerlink" title="2.2 Vue CLI使用"></a>2.2 Vue CLI使用</h2><h3 id="2-2-1-Vue-CLI简介"><a href="#2-2-1-Vue-CLI简介" class="headerlink" title="2.2.1 Vue CLI简介"></a>2.2.1 Vue CLI简介</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/CLI%E7%AE%80%E4%BB%8B.png"></p>
<h2 id="2-3-组件化开发"><a href="#2-3-组件化开发" class="headerlink" title="2.3 组件化开发"></a>2.3 组件化开发</h2><h3 id="2-3-1-组件化开发介绍"><a href="#2-3-1-组件化开发介绍" class="headerlink" title="2.3.1 组件化开发介绍"></a>2.3.1 组件化开发介绍</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%E4%BB%8B%E7%BB%8D.png"></p>
<h3 id="2-3-2-组件的构成"><a href="#2-3-2-组件的构成" class="headerlink" title="2.3.2 组件的构成"></a>2.3.2 组件的构成</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E7%BB%84%E4%BB%B6%E7%9A%84%E6%9E%84%E6%88%90.png"></p>
<h2 id="2-4-第三方组件element-ui"><a href="#2-4-第三方组件element-ui" class="headerlink" title="2.4 第三方组件element-ui"></a>2.4 第三方组件element-ui</h2><h3 id="2-4-1-element-ui介绍"><a href="#2-4-1-element-ui介绍" class="headerlink" title="2.4.1 element-ui介绍"></a>2.4.1 element-ui介绍</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/element-ui%E4%BB%8B%E7%BB%8D.png"></p>
<h3 id="2-4-2-组件间的传值"><a href="#2-4-2-组件间的传值" class="headerlink" title="2.4.2 组件间的传值"></a>2.4.2 组件间的传值</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E4%BC%A0%E5%80%BC.png"></p>
<h3 id="2-4-3-第三方图标库"><a href="#2-4-3-第三方图标库" class="headerlink" title="2.4.3 第三方图标库"></a>2.4.3 第三方图标库</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%9B%BE%E6%A0%87%E5%BA%93.png"></p>
<h3 id="2-4-4-组件的传值"><a href="#2-4-4-组件的传值" class="headerlink" title="2.4.4 组件的传值"></a>2.4.4 组件的传值</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BC%A0%E5%80%BC.png"></p>
]]></content>
      <categories>
        <category>Vue</category>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>全栈开发</tag>
        <tag>Vue快速入门</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-vue全栈开发之RESTFUL服务+Swagger篇</title>
    <url>/2023/08/17/RESTFUL%E6%9C%8D%E5%8A%A1-Swagger/</url>
    <content><![CDATA[<h1 id="一、RESTFUL介绍"><a href="#一、RESTFUL介绍" class="headerlink" title="一、RESTFUL介绍"></a>一、RESTFUL介绍</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/RESTFUL%E7%AE%80%E4%BB%8B.png"></p>
<h2 id="1-2-RESTFUL特点"><a href="#1-2-RESTFUL特点" class="headerlink" title="1.2 RESTFUL特点"></a>1.2 RESTFUL特点</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/RESTFUL%E7%89%B9%E7%82%B9.png"></p>
<h2 id="1-3-RESTFUL-API"><a href="#1-3-RESTFUL-API" class="headerlink" title="1.3 RESTFUL API"></a>1.3 RESTFUL API</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/RESTFUL%20API.png"></p>
<h2 id="1-4-HTTP-Method"><a href="#1-4-HTTP-Method" class="headerlink" title="1.4 HTTP Method"></a>1.4 HTTP Method</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/HTTP%20Method.png"></p>
<h2 id="1-5-HTTP-状态码"><a href="#1-5-HTTP-状态码" class="headerlink" title="1.5 HTTP 状态码"></a>1.5 HTTP 状态码</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/HTTP%E7%8A%B6%E6%80%81%E7%A0%81.png"></p>
<h1 id="二、构建RESTful应用接口"><a href="#二、构建RESTful应用接口" class="headerlink" title="二、构建RESTful应用接口"></a>二、构建RESTful应用接口</h1><h2 id="2-1-SpringBoot实现RESTful-API"><a href="#2-1-SpringBoot实现RESTful-API" class="headerlink" title="2.1 SpringBoot实现RESTful API"></a>2.1 SpringBoot实现RESTful API</h2><p>基本方法：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../pic/springboot%E5%AE%9E%E7%8E%B0Restful.png"></p>
<p>示例：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../pic/springboot%E5%AE%9E%E7%8E%B0restful2.png"></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;根据id获取用户信息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;添加用户&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PutMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;更新用户&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deleteById</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;根据ID删除用户&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="三、使用Swagger快速生成Web-API文档"><a href="#三、使用Swagger快速生成Web-API文档" class="headerlink" title="三、使用Swagger快速生成Web API文档"></a>三、使用Swagger快速生成Web API文档</h1><h2 id="3-1-什么是Swagger"><a href="#3-1-什么是Swagger" class="headerlink" title="3.1 什么是Swagger"></a>3.1 什么是Swagger</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E4%BB%80%E4%B9%88%E6%98%AFswagger.png"></p>
<h2 id="3-2-使用Swagger生成Web-API文档"><a href="#3-2-使用Swagger生成Web-API文档" class="headerlink" title="3.2 使用Swagger生成Web API文档"></a>3.2 使用Swagger生成Web API文档</h2><p>引入依赖即可：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="3-3-配置Swagger"><a href="#3-3-配置Swagger" class="headerlink" title="3.3 配置Swagger"></a>3.3 配置Swagger</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E9%85%8D%E7%BD%AEswagger.png"></p>
<h2 id="3-4-使用Swagger2进行接口测试"><a href="#3-4-使用Swagger2进行接口测试" class="headerlink" title="3.4 使用Swagger2进行接口测试"></a>3.4 使用Swagger2进行接口测试</h2><p>启动项目<a class="link" href="http://127.0.0.1:8080/swagger-ui.html%EF%BC%8C%E5%8D%B3%E5%8F%AF%E6%89%93%E5%BC%80%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E6%B5%8B%E8%AF%95%E9%A1%B5%E9%9D%A2">http://127.0.0.1:8080/swagger-ui.html，即可打开自动生成的可视化测试页面 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>后端开发</category>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>全栈开发</tag>
        <tag>RESTFUL</tag>
        <tag>Swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-vue全栈开发之前端数据模拟MockJS篇</title>
    <url>/2023/08/19/SpringBoot-vue%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B9%8B%E5%89%8D%E7%AB%AF%E6%95%B0%E6%8D%AE%E6%A8%A1%E6%8B%9FMockJS%E7%AF%87/</url>
    <content><![CDATA[<h1 id="一、MockJS介绍"><a href="#一、MockJS介绍" class="headerlink" title="一、MockJS介绍"></a>一、MockJS介绍</h1><h2 id="1-1-基本介绍"><a href="#1-1-基本介绍" class="headerlink" title="1.1 基本介绍"></a>1.1 基本介绍</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/MockJS%E4%BB%8B%E7%BB%8D.png"></p>
<h1 id="二、MockJS基本使用"><a href="#二、MockJS基本使用" class="headerlink" title="二、MockJS基本使用"></a>二、MockJS基本使用</h1><h2 id="2-1-基本使用"><a href="#2-1-基本使用" class="headerlink" title="2.1 基本使用"></a>2.1 基本使用</h2><p><strong>在项目中创建mock目录，新建index.js文件</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入mocks</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Mock</span> <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span></span><br><span class="line"><span class="comment">//使用mockjs模拟数据</span></span><br><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&#x27;/product/search&#x27;</span>,&#123;</span><br><span class="line">    <span class="string">&quot;ret&quot;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>:</span><br><span class="line">    &#123;</span><br><span class="line">		<span class="string">&quot;mtime&quot;</span>:<span class="string">&quot;@datatime&quot;</span>,  	<span class="comment">//随机生成日期时间</span></span><br><span class="line">        <span class="string">&quot;score|1-800&quot;</span>:<span class="number">800</span>,   	<span class="comment">//随机生成1-800的数字</span></span><br><span class="line">        <span class="string">&quot;rank|1-100&quot;</span>:<span class="number">100</span>,   	<span class="comment">//随机生成1-100的数字</span></span><br><span class="line">        <span class="string">&quot;stars|1-5&quot;</span>:<span class="number">5</span>,     		<span class="comment">//随机生成1-5的数字</span></span><br><span class="line">        <span class="string">&quot;nickname:&quot;</span>:<span class="string">&quot;@cname&quot;</span>,   <span class="comment">//随机生成中文名字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<p><strong>组件中调用mock.js中模拟的数据接口，这时返回的response就是mock.js中用Mock.mock(‘url’,data)中设置的data</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/product/search&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>注意</strong>：res的值对应index.js文件中{}中的值</p>
<p><strong>在main.js中引入</strong></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./mock&#x27;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="2-2-核心方法"><a href="#2-2-核心方法" class="headerlink" title="2.2 核心方法"></a>2.2 核心方法</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95.png"></p>
<h1 id="三、数据生成规则"><a href="#三、数据生成规则" class="headerlink" title="三、数据生成规则"></a>三、数据生成规则</h1><h2 id="3-1-数据模板DTD"><a href="#3-1-数据模板DTD" class="headerlink" title="3.1 数据模板DTD"></a>3.1 数据模板DTD</h2><p>mock语法包含两层规范</p>
<ul>
<li>数据模板DTD</li>
<li>数据占位符DPD</li>
</ul>
<h3 id="3-1-1-基本语法"><a href="#3-1-1-基本语法" class="headerlink" title="3.1.1 基本语法"></a>3.1.1 基本语法</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/DTD%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.png"></p>
<h3 id="3-1-2-生成规则和示例"><a href="#3-1-2-生成规则和示例" class="headerlink" title="3.1.2 生成规则和示例"></a>3.1.2 生成规则和示例</h3><h4 id="1-属性值是字符串String"><a href="#1-属性值是字符串String" class="headerlink" title="1.属性值是字符串String"></a>1.属性值是字符串String</h4><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E5%B1%9E%E6%80%A7%E5%80%BC%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2String.png"></p>
<h4 id="2、属性值是数字number"><a href="#2、属性值是数字number" class="headerlink" title="2、属性值是数字number"></a>2、属性值是数字number</h4><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E5%B1%9E%E6%80%A7%E5%80%BC%E6%98%AFnubmer.png"></p>
<h4 id="3、属性值是boolean"><a href="#3、属性值是boolean" class="headerlink" title="3、属性值是boolean"></a>3、属性值是boolean</h4><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E5%B1%9E%E6%80%A7%E5%80%BC%E6%98%AFboolean.png"></p>
<h4 id="4、属性值是Object"><a href="#4、属性值是Object" class="headerlink" title="4、属性值是Object"></a>4、属性值是Object</h4><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E5%B1%9E%E6%80%A7%E5%80%BC%E6%98%AFobject.png"></p>
<h4 id="5、属性值是数组Array"><a href="#5、属性值是数组Array" class="headerlink" title="5、属性值是数组Array"></a>5、属性值是数组Array</h4><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E5%B1%9E%E6%80%A7%E5%80%BC%E6%98%AF%E6%95%B0%E7%BB%84Array.png"></p>
<h4 id="6、属性值是函数Function"><a href="#6、属性值是函数Function" class="headerlink" title="6、属性值是函数Function"></a>6、属性值是函数Function</h4><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E5%B1%9E%E6%80%A7%E5%80%BC%E6%98%AFfunction.png"></p>
<h2 id="3-2-数据占位符"><a href="#3-2-数据占位符" class="headerlink" title="3.2 数据占位符"></a>3.2 数据占位符</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E6%95%B0%E6%8D%AE%E5%8D%A0%E4%BD%8D%E7%AC%A6.png"></p>
]]></content>
      <categories>
        <category>前端开发</category>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>全栈开发</tag>
        <tag>MockJS</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2023/08/22/SpringBoot/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-vue全栈开发之JWT跨域篇</title>
    <url>/2023/08/18/SpringBoot-vue%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B9%8BJWT%E8%B7%A8%E5%9F%9F%E7%AF%87/</url>
    <content><![CDATA[<h1 id="一、Session认证"><a href="#一、Session认证" class="headerlink" title="一、Session认证"></a>一、Session认证</h1><h2 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/session%E8%AE%A4%E8%AF%81.png"></p>
<h2 id="1-2-Session认证流程"><a href="#1-2-Session认证流程" class="headerlink" title="1.2 Session认证流程"></a>1.2 Session认证流程</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/session%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B.png"></p>
<h2 id="1-3-扩展性问题的解决"><a href="#1-3-扩展性问题的解决" class="headerlink" title="1.3 扩展性问题的解决"></a>1.3 扩展性问题的解决</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E6%89%A9%E5%B1%95%E6%80%A7%E9%97%AE%E9%A2%98.png"></p>
<h1 id="二、Token认证"><a href="#二、Token认证" class="headerlink" title="二、Token认证"></a>二、Token认证</h1><h2 id="1-1-介绍-1"><a href="#1-1-介绍-1" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/token%E8%AE%A4%E8%AF%81.png"></p>
<h2 id="1-2-Token认证流程"><a href="#1-2-Token认证流程" class="headerlink" title="1.2 Token认证流程"></a>1.2 Token认证流程</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/token%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B.png"></p>
<h2 id="1-3-Token认证的特点"><a href="#1-3-Token认证的特点" class="headerlink" title="1.3 Token认证的特点"></a>1.3 Token认证的特点</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/token%E8%AE%A4%E8%AF%81%E7%89%B9%E7%82%B9.png"></p>
<h1 id="三、JWT的使用"><a href="#三、JWT的使用" class="headerlink" title="三、JWT的使用"></a>三、JWT的使用</h1><h2 id="1-1-介绍-2"><a href="#1-1-介绍-2" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/JWT%E4%BB%8B%E7%BB%8D.png"></p>
<h2 id="1-2-JWT的组成"><a href="#1-2-JWT的组成" class="headerlink" title="1.2 JWT的组成"></a>1.2 JWT的组成</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/JWT%E7%9A%84%E7%BB%84%E6%88%90.png"></p>
<h3 id="1-2-1-JWT的组成之Header"><a href="#1-2-1-JWT的组成之Header" class="headerlink" title="1.2.1 JWT的组成之Header"></a>1.2.1 JWT的组成之Header</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/Header.png"></p>
<h3 id="1-2-2-JWT的组成之Payload"><a href="#1-2-2-JWT的组成之Payload" class="headerlink" title="1.2.2 JWT的组成之Payload"></a>1.2.2 JWT的组成之Payload</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/Payload.png"></p>
<h3 id="1-2-3-JWT的组成之Signature"><a href="#1-2-3-JWT的组成之Signature" class="headerlink" title="1.2.3  JWT的组成之Signature"></a>1.2.3  JWT的组成之Signature</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/Signature.png"></p>
<h2 id="1-3-JWT的特点"><a href="#1-3-JWT的特点" class="headerlink" title="1.3 JWT的特点"></a>1.3 JWT的特点</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/JWT%E7%89%B9%E7%82%B9.png"></p>
<h2 id="1-4-JWT的实现"><a href="#1-4-JWT的实现" class="headerlink" title="1.4 JWT的实现"></a>1.4 JWT的实现</h2><h3 id="1-4-1-加入依赖"><a href="#1-4-1-加入依赖" class="headerlink" title="1.4.1 加入依赖"></a>1.4.1 加入依赖</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="1-4-2-生成Token"><a href="#1-4-2-生成Token" class="headerlink" title="1.4.2 生成Token"></a>1.4.2 生成Token</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//还有七天过期</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">expire</span> <span class="operator">=</span> <span class="number">604800</span>;</span><br><span class="line">    <span class="comment">//密钥</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">secret</span> <span class="operator">=</span> <span class="string">&quot;sdafsafasdfdssdafsad&quot;</span>;</span><br><span class="line">    <span class="comment">//生成token</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String username)</span>&#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">expiration</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Date</span>(now.getTime()+<span class="number">1000</span>*expire);</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setHeader(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;JWT&quot;</span>)</span><br><span class="line">                .setSubject(username)</span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                .setExpiration(expiration)</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512,secret)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-4-3-解析Token"><a href="#1-4-3-解析Token" class="headerlink" title="1.4.3 解析Token"></a>1.4.3 解析Token</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解析token</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">getClaimsByToken</span><span class="params">(String token)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">               .setSigningKey(secret)</span><br><span class="line">               .parseClaimsJws(token)</span><br><span class="line">               .getBody();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>JSON Web Token</category>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>全栈开发</tag>
        <tag>JWT跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud</title>
    <url>/2023/08/31/SpringCloud/</url>
    <content><![CDATA[<h1 id="0、微服务技术栈导学"><a href="#0、微服务技术栈导学" class="headerlink" title="0、微服务技术栈导学"></a>0、微服务技术栈导学</h1><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831202802153.png" alt="image-20230831202802153"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831202849764.png" alt="image-20230831202849764"></p>
<h2 id="0-1完整的微服务技术栈"><a href="#0-1完整的微服务技术栈" class="headerlink" title="0.1完整的微服务技术栈"></a>0.1完整的微服务技术栈</h2><p>持续集成…..</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831202908435.png" alt="image-20230831202908435"></p>
<h2 id="0-2-微服务技术栈分类"><a href="#0-2-微服务技术栈分类" class="headerlink" title="0.2 微服务技术栈分类"></a>0.2 微服务技术栈分类</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831203114706.png" alt="image-20230831203114706"></p>
<h1 id="1-认识微服务"><a href="#1-认识微服务" class="headerlink" title="1.认识微服务"></a>1.认识微服务</h1><h2 id="1-1-服务架构的演变"><a href="#1-1-服务架构的演变" class="headerlink" title="1.1 服务架构的演变"></a>1.1 服务架构的演变</h2><h3 id="1-1-1-单体架构"><a href="#1-1-1-单体架构" class="headerlink" title="1.1.1 单体架构"></a>1.1.1 单体架构</h3><blockquote>
<p>将业务的所有功能集中在一个项目中开发，打成一个包部署。</p>
</blockquote>
<p>优点：</p>
<ul>
<li>架构简单</li>
<li>部署成本低</li>
</ul>
<p>缺点：</p>
<ul>
<li>耦合度高</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831203901322.png" alt="image-20230831203901322"></p>
<h3 id="1-1-2-分布式架构"><a href="#1-1-2-分布式架构" class="headerlink" title="1.1.2 分布式架构"></a>1.1.2 分布式架构</h3><blockquote>
<p>根据业务功能对系统进行拆分，每个业务模块作为独立项目开发，称为一个服务</p>
</blockquote>
<p>特点：</p>
<ul>
<li>架构复杂</li>
<li>难度大，适合大型互联网项目，如：taobao，京东</li>
</ul>
<p>优点：</p>
<ul>
<li>降低服务耦合</li>
<li>有利于服务升级拓展</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831204022351.png" alt="image-20230831204022351">分布式架构需要考虑的问题：</p>
<ul>
<li>服务拆分粒度如何？</li>
<li>服务集群地址如何维护？</li>
<li>服务之间如何实现远程调用？</li>
<li>服务健康状态如何感知？</li>
</ul>
<h3 id="1-1-3-微服务"><a href="#1-1-3-微服务" class="headerlink" title="1.1.3 微服务"></a>1.1.3 微服务</h3><blockquote>
<p>经过良好架构设计的<strong>分布式</strong>架构方案，其特征为;</p>
<ul>
<li>单一职责：每一个服务都对应唯一的业务能力，做到单一职责，避免重复业务开发</li>
<li>面向服务：微服务对外暴露业务接口</li>
<li>自治：团队独立，技术独立，数据独立，部署独立</li>
<li>隔离性强：服务调用做好隔离、容错、降级、避免出现级联问题</li>
</ul>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230831204803085.png" alt="image-20230831204803085"></p>
<h3 id="1-1-4-微服务结构"><a href="#1-1-4-微服务结构" class="headerlink" title="1.1.4 微服务结构"></a>1.1.4 微服务结构</h3><p><strong>微服务技术对比</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230901140503043.png" alt="image-20230901140503043"></p>
<p><strong>企业需求</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230901140541401.png" alt="image-20230901140541401"></p>
<h2 id="1-2-SpringCloud"><a href="#1-2-SpringCloud" class="headerlink" title="1.2 SpringCloud"></a>1.2 SpringCloud</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230901141914297.png" alt="image-20230901141914297"></p>
<h3 id="1-2-1-SpringCloud与SpringBoot兼容关系"><a href="#1-2-1-SpringCloud与SpringBoot兼容关系" class="headerlink" title="1.2.1 SpringCloud与SpringBoot兼容关系"></a>1.2.1 SpringCloud与SpringBoot兼容关系</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230901142039364.png" alt="image-20230901142039364"></p>
<h1 id="2-服务的拆分以及调用"><a href="#2-服务的拆分以及调用" class="headerlink" title="2.服务的拆分以及调用"></a>2.服务的拆分以及调用</h1><h2 id="2-1-服务的拆分"><a href="#2-1-服务的拆分" class="headerlink" title="2.1 服务的拆分"></a>2.1 服务的拆分</h2><blockquote>
<p>不同的功能拆分开</p>
</blockquote>
<p>符合<strong>单一职责</strong></p>
<p>微服务拆分注意事项：</p>
<ul>
<li>不同微服务，不要重复开发相同业务</li>
<li>微服务数据独立，不要访问其它微服务的数据库</li>
<li>微服务可以将自己的业务暴露为接口，供其它微服务调用</li>
</ul>
<h3 id="2-1-1-服务拆分DEMO"><a href="#2-1-1-服务拆分DEMO" class="headerlink" title="2.1.1 服务拆分DEMO"></a>2.1.1 服务拆分DEMO</h3><p>项目结构：</p>
<p><strong>order-service</strong>和<strong>user-service</strong>分别使用不同的数据库…</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230901143437622.png" alt="image-20230901143437622"></p>
<p><strong>不同的服务不同的访问地址</strong>：order查询订单，user查询用户信息</p>
<p>下图为<strong>order</strong>查订单：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230901143048725.png" alt="image-20230901143048725"></p>
<p>下图为<strong>user</strong>查用户信息：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230901143101400.png" alt="image-20230901143101400"></p>
<h3 id="2-1-2-服务的远程调用"><a href="#2-1-2-服务的远程调用" class="headerlink" title="2.1.2 服务的远程调用"></a>2.1.2 服务的远程调用</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230901143652979.png" alt="image-20230901143652979"></p>
<p>远程调用方式分析：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230901143809440.png" alt="image-20230901143809440"></p>
<p>注册<strong>RestTemplate</strong>：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230901144209336.png" alt="image-20230901144209336"></p>
<p>调用RestTemplate:</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230901144242580.png" alt="image-20230901144242580"></p>
<h1 id="3-Eureka"><a href="#3-Eureka" class="headerlink" title="3.Eureka"></a>3.Eureka</h1><h2 id="3-1Eureka-提供者与消费者"><a href="#3-1Eureka-提供者与消费者" class="headerlink" title="3.1Eureka-提供者与消费者"></a>3.1Eureka-提供者与消费者</h2><p>提供者与消费者：</p>
<ul>
<li>服务提供者：一次业务中，被其它微服务调用的服务。（提供接口给其它微服务）</li>
<li>服务消费者：一次业务中，调用其它微服务的服务。（调用其它微服务提供的接口）</li>
</ul>
<p>两者关系：</p>
<ul>
<li>两个角色之间的关系是相对的</li>
</ul>
<h2 id="3-2-Eureka-eureka原理分析-注册中心"><a href="#3-2-Eureka-eureka原理分析-注册中心" class="headerlink" title="3.2.Eureka-eureka原理分析(注册中心)"></a>3.2.Eureka-eureka原理分析(注册中心)</h2><p>服务调用出现的问题：<br><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230901145100529.png" alt="image-20230901145100529"></p>
<h3 id="3-2-1-Eureka的作用"><a href="#3-2-1-Eureka的作用" class="headerlink" title="3.2.1 Eureka的作用"></a>3.2.1 Eureka的作用</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230901145401642.png" alt="image-20230901145401642"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230901145438927.png" alt="image-20230901145438927"></p>
<h3 id="3-2-3-总结"><a href="#3-2-3-总结" class="headerlink" title="3.2.3 总结"></a>3.2.3 总结</h3><p>在EureKa架构中，微服务角色有两类：</p>
<ul>
<li><p>EurekaServer：服务端，注册中心</p>
<ul>
<li><p>记录服务信息</p>
</li>
<li><p>心跳监控</p>
</li>
</ul>
</li>
<li><p>EurekaClient：客户端</p>
<ul>
<li>Provider：服务提供者，例如案例中的user-service</li>
<li>每隔30s向EurekaServer发送心跳</li>
</ul>
</li>
<li><p>consumer：服务消费者，例如案例中的order-service</p>
<ul>
<li>根据服务名称从EurekaServer拉去服务列表</li>
<li>基于服务列表做负载均衡，选中一个微服务后发起远程调用</li>
</ul>
</li>
</ul>
<h2 id="3-3-搭建Eureka服务"><a href="#3-3-搭建Eureka服务" class="headerlink" title="3.3 搭建Eureka服务"></a>3.3 搭建Eureka服务</h2><h3 id="3-3-1-搭建Eureka"><a href="#3-3-1-搭建Eureka" class="headerlink" title="3.3.1 搭建Eureka"></a>3.3.1 搭建Eureka</h3><p>（1）创建项目，引入依赖</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>（2）编写启动类，添加@EnableEurekaServer注解</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaApplication</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>（3）添加application.yml文件，编写如下配置</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="string">spring；</span></span><br><span class="line">	<span class="attr">application:</span></span><br><span class="line">		<span class="attr">name:</span> <span class="string">eurekaserver</span> <span class="comment"># eureka服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">	<span class="attr">client:</span></span><br><span class="line">		<span class="attr">service-url:</span> <span class="comment"># eureka的地址信息</span></span><br><span class="line">			<span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure></div>

<p>（4）启动效果</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902203345231.png" alt="image-20230902203345231"></p>
<h2 id="3-4-Eureka服务的注册"><a href="#3-4-Eureka服务的注册" class="headerlink" title="3.4 Eureka服务的注册"></a>3.4 Eureka服务的注册</h2><h3 id="3-4-1-将user-service注册到EurekaServer"><a href="#3-4-1-将user-service注册到EurekaServer" class="headerlink" title="3.4.1 将user-service注册到EurekaServer"></a>3.4.1 将user-service注册到EurekaServer</h3><p>1.将user-service项目引入eureka依赖</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>2.在application.yml文件编写下面的配置：</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">spring；</span></span><br><span class="line">	<span class="attr">application:</span></span><br><span class="line">		<span class="attr">name:</span> <span class="string">userservice</span> <span class="comment"># eureka服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">	<span class="attr">client:</span></span><br><span class="line">		<span class="attr">service-url:</span> <span class="comment"># eureka的地址信息</span></span><br><span class="line">			<span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure></div>

<p>如果给一个服务配多个实例，可以操作一下步骤：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902204101613.png" alt="image-20230902204101613"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902212031485.png" alt="image-20230902212031485"></p>
<h3 id="3-4-2-总结"><a href="#3-4-2-总结" class="headerlink" title="3.4.2 总结"></a>3.4.2 总结</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902204210209.png" alt="image-20230902204210209"></p>
<h2 id="3-5-Eureka服务发现"><a href="#3-5-Eureka服务发现" class="headerlink" title="3.5 Eureka服务发现"></a>3.5 Eureka服务发现</h2><h3 id="3-5-1-在order-service完成服务拉取"><a href="#3-5-1-在order-service完成服务拉取" class="headerlink" title="3.5.1 在order-service完成服务拉取"></a>3.5.1 在order-service完成服务拉取</h3><blockquote>
<p>服务拉取是基于服务名称获取服务列表，然后在对服务列表做负载均衡</p>
</blockquote>
<p>1.修改OrderService代码，修改访问url路径，用服务名ip、端口：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">String url = &quot;http://userserivce/uesr/&quot; + order.getUserId();</span><br></pre></td></tr></table></figure></div>

<p>2.在order-service项目的启动类中的RestTemplate添加<strong>负载均衡</strong>注解：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="3-6-总结"><a href="#3-6-总结" class="headerlink" title="3.6 总结"></a>3.6 总结</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902205430274.png" alt="image-20230902205430274"></p>
<h1 id="4-Ribbon"><a href="#4-Ribbon" class="headerlink" title="4.Ribbon"></a>4.Ribbon</h1><h2 id="4-1-Ribbon负载均衡原理"><a href="#4-1-Ribbon负载均衡原理" class="headerlink" title="4.1 Ribbon负载均衡原理"></a>4.1 Ribbon负载均衡原理</h2><h3 id="4-1-1-负载均衡流程"><a href="#4-1-1-负载均衡流程" class="headerlink" title="4.1.1 负载均衡流程"></a>4.1.1 负载均衡流程</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230902210240215.png" alt="image-20230902210240215"></p>
<p>（1）流程图解读：order-service发起请求，但是浏览器并不能响应userservice，此时有ribbon拉取eureka-server，由eureka-server返回服务列表，ribbon从服务列表负载其中一个服务</p>
<p>（2）当请求进入Ribbon后Ribbon怎么处理呢？如下图：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../SpringCloud/image-20230903123101616.png" alt="image-20230903123101616"></p>
<p>原码解读：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230903143626817.png" alt="image-20230903143626817"></p>
<p>①拦截请求；</p>
<p>②获取拦截请求的url；</p>
<p>③从url中获取主机名得到serviceName；</p>
<p>④用eureka拉去；</p>
<p>⑤将serviceName放到loadBalancer执行execute,原码如下：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230903144145330.png" alt="image-20230903144145330"></p>
<p>其中，第一行为根据服务名称找eureka拉取服务列表；第二行代码为负载均衡；</p>
<h3 id="4-1-2-负载均衡策略"><a href="#4-1-2-负载均衡策略" class="headerlink" title="4.1.2 负载均衡策略"></a>4.1.2 负载均衡策略</h3><blockquote>
<p>Ribbon的负载均衡规则是一个叫做IRule的接口来定义的，每一个子接口都是一个规则。</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230903144743082.png" alt="image-20230903144743082"></p>
<p>常见规则如下：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230903144835616.png" alt="image-20230903144835616"></p>
<p>ZoneAvoidanceRule为<strong>默认规则</strong></p>
<p>（1）定义Irule实现可以修改负载均衡规则，有两种方式：</p>
<p><strong>1.代码方式</strong>：在order-serivce中的OrderApplication类中，定一个新的Rule：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>全局配置（整个项目都会访问这个）：以上配置完成后规则将由<strong>轮询-&gt;随机</strong>…</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230903145519659.png" alt="image-20230903145519659"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230903145534080.png" alt="image-20230903145534080"></p>
<p>访问6次之后才显示日志</p>
<p><strong>2.配置文件方式</strong>：在order-serivce中的application.yml文件中，添加新的配置也可以修改规则、</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">userservice:</span></span><br><span class="line">	<span class="attr">ribbon:</span></span><br><span class="line">		<span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span>  <span class="comment">#负载均衡规则</span></span><br></pre></td></tr></table></figure></div>

<p>只针对userservice（某个服务）</p>
<h3 id="4-1-3-饥饿加载"><a href="#4-1-3-饥饿加载" class="headerlink" title="4.1.3 饥饿加载"></a>4.1.3 饥饿加载</h3><blockquote>
<p>Ribbon默认是懒加载，第一次访问才创建LoadBalanceClient，请求时间会长。</p>
<p>饥饿加载会在项目启动时创建，降低第一次访问的耗时..</p>
</blockquote>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">	<span class="attr">eager-load:</span></span><br><span class="line">		<span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启饥饿加载</span></span><br><span class="line">		<span class="attr">clients:</span> <span class="string">userservice</span> <span class="comment">#指定对userservice这个服务饥饿加载 若有更多的服务可按以下写法</span></span><br><span class="line">			<span class="comment"># - userservice</span></span><br><span class="line">			<span class="comment"># - orderservice</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4-1-4-总结"><a href="#4-1-4-总结" class="headerlink" title="4.1.4 总结"></a>4.1.4 总结</h3><ol>
<li>Ribbon负载均衡规则<ul>
<li>规则接口是IRule</li>
<li>默认实现ZoneAvoidRule，根据zone选择服务列表，然后轮询</li>
</ul>
</li>
<li>负载均衡自定义方式<ul>
<li>代码方式：配置灵活，但修改时需要重新打包发布</li>
<li>配置方式：直观，方便，无需重新打包发布，无法做全局配置</li>
</ul>
</li>
<li>饥饿加载<ul>
<li>开启饥饿加载</li>
<li>指定饥饿加载的微服务名称</li>
</ul>
</li>
</ol>
<h1 id="5-Nacos"><a href="#5-Nacos" class="headerlink" title="5.Nacos"></a>5.Nacos</h1><h2 id="5-1-认识和安装Nacos"><a href="#5-1-认识和安装Nacos" class="headerlink" title="5.1 认识和安装Nacos"></a>5.1 认识和安装Nacos</h2><h3 id="5-1-1-下载安装包"><a href="#5-1-1-下载安装包" class="headerlink" title="5.1.1 下载安装包"></a>5.1.1 下载安装包</h3><p>Nacos的GitHub页面，提供有下载链接，可以下载编译好的Nacos服务端或者源代码：</p>
<p>GitHub主页：<a class="link" href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>GitHub的Release下载页：<a class="link" href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>如图：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230903160700813.png" alt="image-20230903160700813"></p>
<p>windows版本使用<code>nacos-server-1.4.1.zip</code>包即可。</p>
<h3 id="5-1-2-解压"><a href="#5-1-2-解压" class="headerlink" title="5.1.2 解压"></a>5.1.2 解压</h3><p>将这个包解压到任意非中文目录下，如图：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230903160735391.png" alt="image-20230903160735391"></p>
<p>目录说明：</p>
<ul>
<li>bin：启动脚本</li>
<li>conf：配置文件</li>
</ul>
<h3 id="5-1-3-配置"><a href="#5-1-3-配置" class="headerlink" title="5.1.3 配置"></a>5.1.3 配置</h3><p>Nacos的默认端口是8848，如果你电脑上的其它进程占用了8848端口，请先尝试关闭该进程。</p>
<p><strong>如果无法关闭占用8848端口的进程</strong>，也可以进入nacos的conf目录，修改配置文件中的端口：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230903160808234.png" alt="image-20230903160808234"></p>
<p>修改其中的内容：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230903160817222.png" alt="image-20230903160817222"></p>
<h3 id="5-1-4-启动"><a href="#5-1-4-启动" class="headerlink" title="5.1.4 启动"></a>5.1.4 启动</h3><p>进入bin目录，结构如下：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230903160839246.png" alt="image-20230903160839246"></p>
<p>然后执行命令即可：</p>
<ul>
<li>windows命令：startup.cmd -m standalone</li>
</ul>
<p>执行后的效果如图：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230903160910502.png" alt="image-20230903160910502"></p>
<h3 id="5-1-5-访问"><a href="#5-1-5-访问" class="headerlink" title="5.1.5 访问"></a>5.1.5 访问</h3><p>在浏览器输入地址：<a class="link" href="http://127.0.0.1:8848/nacos%E5%8D%B3%E5%8F%AF%EF%BC%9A">http://127.0.0.1:8848/nacos即可： <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230903160933642.png" alt="image-20230903160933642"></p>
<p>默认的账号和密码都是nacos，进入后：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230903160943675.png" alt="image-20230903160943675"></p>
<h2 id="5-2-Nacos快速入门"><a href="#5-2-Nacos快速入门" class="headerlink" title="5.2 Nacos快速入门"></a>5.2 Nacos快速入门</h2><h3 id="5-2-1-服务注册到Nacos"><a href="#5-2-1-服务注册到Nacos" class="headerlink" title="5.2.1 服务注册到Nacos"></a>5.2.1 服务注册到Nacos</h3><p>1.在父工程中添加spring-cloud-alibaba的管理依赖</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>2.注释掉<strong>微服务项目</strong>中原有的eureka依赖</p>
<p>3.添加nacos的客户端依赖：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;!- -nacos客户端依赖 --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discover<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>4.修改<strong>微服务</strong>项目中的application.yml文件，注释eureka地址，添加nacos地址：</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">cloud:</span></span><br><span class="line">		<span class="attr">nacos:</span></span><br><span class="line">			<span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#服务端地址</span></span><br></pre></td></tr></table></figure></div>

<p>5.启动并测试</p>
<h3 id="5-2-2-服务多级存储模型"><a href="#5-2-2-服务多级存储模型" class="headerlink" title="5.2.2 服务多级存储模型"></a>5.2.2 服务多级存储模型</h3><p>1.Nacos服务分级存储模型</p>
<p>层级<strong>由上往下</strong>排列： 服务 –&gt; 集群 –&gt; 实例</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230903162350759.png" alt="image-20230903162350759"></p>
<p>2.服务跨集群调用问题</p>
<blockquote>
<p>服务调用尽可能选择本地集群的服务，跨集群调用延迟高</p>
<p>本地集群不可访问时，再去访问其它集群</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230903162552934.png" alt="image-20230903162552934"></p>
<p>3.服务集群属性</p>
<p>（1）修改<strong>需要集群</strong>的微服务项目中的application.yml，添加如下内容</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">cloud:</span></span><br><span class="line">		<span class="attr">nacos:</span></span><br><span class="line">			<span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#服务端地址</span></span><br><span class="line">			<span class="attr">discovery:</span></span><br><span class="line">				<span class="attr">cluster-name:</span> <span class="string">HZ</span>  <span class="comment">#配置集群名称，也就是机房位置，例如：HZ，杭州</span></span><br></pre></td></tr></table></figure></div>

<p>（2）在Nacos控制台可以看到集群变化</p>
<p>4.总结</p>
<p>（1）Nacos服务分级存储模型：</p>
<ul>
<li>一级是服务，例如：userservice</li>
<li>二级是集群，例如：上海杭州</li>
<li>三级是实例，例如：杭州机房某台部署了userservice服务器</li>
</ul>
<p>（2）设置集群属性</p>
<ul>
<li>修改application.yml文件，添加discovery-cluster-name属性</li>
</ul>
<h3 id="5-2-3-NacosRule负载均衡"><a href="#5-2-3-NacosRule负载均衡" class="headerlink" title="5.2.3 NacosRule负载均衡"></a>5.2.3 NacosRule负载均衡</h3><blockquote>
<p>优先访问本地集群，没有则跨集群访问；随机访问</p>
</blockquote>
<p>（1）修改微服务中application.yml，设置集群为HZ：</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">cloud:</span></span><br><span class="line">		<span class="attr">nacos:</span></span><br><span class="line">			<span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#服务端地址</span></span><br><span class="line">			<span class="attr">discovery:</span></span><br><span class="line">				<span class="attr">cluster-name:</span> <span class="string">HZ</span>  <span class="comment">#配置集群名称，也就是机房位置，例如：HZ，杭州</span></span><br></pre></td></tr></table></figure></div>

<p>（2）在微服务项目中设置负载均衡的IRule为NacosRule，这个规则优先寻找与自己同集群的服务：</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">userservice:</span></span><br><span class="line">	<span class="attr">ribbon:</span></span><br><span class="line">		<span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.nacos.ribbon.NacosRule</span> <span class="comment">#负载均衡规则</span></span><br></pre></td></tr></table></figure></div>

<p>（3）注意将user-service的权重都设置为1</p>
<p>注意：没有配之前，依然为轮询方案</p>
<p><strong>总结</strong>：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230903164601163.png" alt="image-20230903164601163"></p>
<h3 id="5-2-4-服务实例的权重设置"><a href="#5-2-4-服务实例的权重设置" class="headerlink" title="5.2.4 服务实例的权重设置"></a>5.2.4 服务实例的权重设置</h3><p>实际部署中会出现这样的场景：</p>
<ul>
<li>服务器设备性能有差异，有些好，有些差，我们希望性能好的机器承担更多的用户请求</li>
</ul>
<p>Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高，如下</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230903211606704.png" alt="image-20230903211606704"></p>
<p>总结：</p>
<p>实例的权重控制：</p>
<ul>
<li>Nacos控制台可以设置实例的权重值，0~1之间</li>
<li>同集群内的多个实例，权重越高被访问的频率越高</li>
<li>权重设置为0则完全不会被访问</li>
</ul>
<h3 id="5-2-5-Nacos环境隔离"><a href="#5-2-5-Nacos环境隔离" class="headerlink" title="5.2.5 Nacos环境隔离"></a>5.2.5 Nacos环境隔离</h3><blockquote>
<p>Nacos中服务存储和数据存储的最外层都是一个名为namespace的东西，用来做最外层的隔离</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904122420122.png" alt="image-20230904122420122"></p>
<p>1.在Nacos控制台可以创建namespace，用来隔离不同的环境；</p>
<p>2.填写新的命名空间信息：命名空间名，描述；</p>
<p>3.保存后在控制台看到命名空间的ID；</p>
<p>4.修改<strong>微服务</strong>项目的application.yml，添加namespace：</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">datasource:</span></span><br><span class="line">		<span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/heima?useSSL=false</span></span><br><span class="line">		<span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">		<span class="attr">password:</span> <span class="string">ZyL68123</span></span><br><span class="line">		<span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">	<span class="attr">cloud:</span></span><br><span class="line">		<span class="attr">nacos:</span></span><br><span class="line">		<span class="attr">discovery:</span></span><br><span class="line">			<span class="attr">cluster-name:</span> <span class="string">SH</span> <span class="comment"># 上海</span></span><br><span class="line">			<span class="attr">namespace:</span> <span class="comment">#命名空间，填ID</span></span><br></pre></td></tr></table></figure></div>

<p>5.重启项目查看控制台</p>
<p>总结：</p>
<ul>
<li>namespace用来环境隔离</li>
<li>每隔namespace都有唯一ID</li>
<li>不同namespace下的服务不可见</li>
</ul>
<h3 id="5-2-6-Nacos和Eureka对比"><a href="#5-2-6-Nacos和Eureka对比" class="headerlink" title="5.2.6 Nacos和Eureka对比"></a>5.2.6 Nacos和Eureka对比</h3><ol>
<li>Nacos注册中心细节分析</li>
</ol>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904124019508.png" alt="image-20230904124019508"></p>
<p><strong>注意</strong>：Nacos把服务提供者划分成临时实例和非临时实例</p>
<p>1.配置临时实例或者非临时实例</p>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">cloud:</span></span><br><span class="line">		<span class="attr">nacos:</span></span><br><span class="line">		<span class="attr">discovery:</span></span><br><span class="line">			<span class="attr">ephemeral:</span> <span class="literal">false</span>  <span class="comment">#非临时</span></span><br></pre></td></tr></table></figure></div>

<p>总结：</p>
<ol>
<li>Nacos与Eureka的共同点<ul>
<li>都支持服务注册和服务拉取</li>
<li>都支持服务提供者心跳方式做健康检测</li>
</ul>
</li>
<li>Nacos与Eureka的区别<ul>
<li>Nacos支持服务端主动检测提供者状态：临时采用心跳模式，非临时采用主动监测模式</li>
<li>临时不正常会被剔除，非临时不会被剔除</li>
<li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li>
<li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li>
</ul>
</li>
</ol>
<h2 id="5-3-Nacos配置管理"><a href="#5-3-Nacos配置管理" class="headerlink" title="5.3 Nacos配置管理"></a>5.3 Nacos配置管理</h2><h3 id="5-3-1-统一配置管理"><a href="#5-3-1-统一配置管理" class="headerlink" title="5.3.1 统一配置管理"></a>5.3.1 统一配置管理</h3><p>在Nacos控制台进行配置管理</p>
<ul>
<li><p>Data ID命名：微服务名称-项目运行环境.后缀名，例如：userservice-dev.yml</p>
</li>
<li><p>Group：默认即可</p>
</li>
<li><p>描述：自定义</p>
</li>
<li><p>配置格式：自定义</p>
</li>
<li><p>配置内容：需要填的都是开关型数字(热更新)</p>
</li>
</ul>
<h3 id="5-3-2-微服务配置拉取"><a href="#5-3-2-微服务配置拉取" class="headerlink" title="5.3.2 微服务配置拉取"></a>5.3.2 微服务配置拉取</h3><p>拉取步骤如下：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904132800456.png" alt="image-20230904132800456"></p>
<p>1.引入Nacos的配置管理和客户端依赖</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;!- -nacos配置管理依赖 --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>2.在微服务项目中的<strong>resources</strong>目录添加一个bootstrap.yml文件，此文件优先级高于application.yml：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">application:</span></span><br><span class="line">		<span class="attr">name:</span> <span class="string">userservice</span> <span class="comment">#服务名称</span></span><br><span class="line">	<span class="attr">profiles:</span></span><br><span class="line">		<span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境</span></span><br><span class="line">	<span class="attr">cloud:</span></span><br><span class="line">		<span class="attr">nacos:</span></span><br><span class="line">			<span class="attr">server-addr: localhost:</span> <span class="number">8848</span> <span class="comment"># Nacos地址</span></span><br><span class="line">			<span class="attr">config:</span></span><br><span class="line">				<span class="attr">file-extension:</span> <span class="string">yaml</span>  <span class="comment">#文件后缀名</span></span><br></pre></td></tr></table></figure></div>

<p>3.在微服务中将pattern-dataformate属性注入到Controller中做测试：<br><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904133717032.png" alt="image-20230904133717032"></p>
<p>效果显示：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904133736194.png" alt="image-20230904133736194"></p>
<h3 id="5-3-3-配置热更新"><a href="#5-3-3-配置热更新" class="headerlink" title="5.3.3 配置热更新"></a>5.3.3 配置热更新</h3><blockquote>
<p>Nacos中的配置文件变更后，微服务无需重启就可以感知。不过需要通过下面两种配置实现</p>
</blockquote>
<p>（1）在@Value注入的变量所在类上添加注解@RefreshScope</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904133959301.png" alt="image-20230904133959301"></p>
<p>（2）使用@ConfigurationProperties注解</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904134607872.png" alt="image-20230904134607872"></p>
<p>注意：</p>
<ul>
<li>不是所有的配置都适合放在配置中心，维护起来比较麻烦</li>
<li>建议将一些关键参数，需要运行时调整的参数放到nacos配置中心，一般都是自定义配置</li>
</ul>
<h3 id="5-3-4-多环境配置共享"><a href="#5-3-4-多环境配置共享" class="headerlink" title="5.3.4 多环境配置共享"></a>5.3.4 多环境配置共享</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904171119771.png" alt="image-20230904171119771"></p>
<p>总结:</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904171817754.png" alt="image-20230904171817754"></p>
<h3 id="5-3-5-Nacos集群搭建"><a href="#5-3-5-Nacos集群搭建" class="headerlink" title="5.3.5 Nacos集群搭建"></a>5.3.5 Nacos集群搭建</h3><p>B站视频教程：<a class="link" href="https://www.bilibili.com/video/BV1LQ4y127n4?p=29&spm_id_from=pageDriver&vd_source=4a57772dca273ae7004346a6bdf7ac95">06-Nacos配置管理-nacos集群搭建_哔哩哔哩_bilibili <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>总结：</p>
<ul>
<li>搭建MySQL集群并初始化数据库表</li>
<li>下载解压nacos</li>
<li>修改集群配置（节点信息），数据库配置</li>
<li>分别启动多个nacos节点</li>
<li>nginx反向代理</li>
</ul>
<h1 id="5-4-Feign"><a href="#5-4-Feign" class="headerlink" title="5.4 Feign"></a>5.4 Feign</h1><h3 id="Feign的介绍："><a href="#Feign的介绍：" class="headerlink" title="Feign的介绍："></a>Feign的介绍：</h3><blockquote>
<p>帮助我们优雅的实现http请求的发送，解决下面5.4.1提到的问题</p>
</blockquote>
<h3 id="5-4-1-基于Feign的远程调用"><a href="#5-4-1-基于Feign的远程调用" class="headerlink" title="5.4.1 基于Feign的远程调用"></a>5.4.1 基于Feign的远程调用</h3><p>RestTemplate方式调用存在的问题：<br><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904174030355.png" alt="image-20230904174030355"></p>
<p>（1）引入依赖</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>（2）在微服务的启动类添加注解开启Feign功能：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904174407727.png" alt="image-20230904174407727"></p>
<p>（3）编写Feign客户端</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904174806063.png" alt="image-20230904174806063"></p>
<p>主要是基于 SpringMVC 的注解来声明远程调用的信息</p>
<p>以下为远程调用实现，同时也实现了负载均衡：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904175029475.png" alt="image-20230904175029475"></p>
<h3 id="5-4-2-Feign的自定义基本配置"><a href="#5-4-2-Feign的自定义基本配置" class="headerlink" title="5.4.2 Feign的自定义基本配置"></a>5.4.2 Feign的自定义基本配置</h3><p>方式一：配置文件方式</p>
<p>①全局生效</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">	<span class="attr">client:</span></span><br><span class="line">		<span class="attr">default:</span>   <span class="comment"># default为全局配置，如果写服务名称，即为某个微服务的配置</span></span><br><span class="line">			<span class="attr">loggerLevel:</span> <span class="string">Full</span> <span class="comment">#日志级别</span></span><br></pre></td></tr></table></figure></div>

<p>②局部生效：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">	<span class="attr">client:</span></span><br><span class="line">		<span class="attr">userservice:</span>    <span class="comment"># default为全局配置，如果写服务名称，即为某个微服务的配置</span></span><br><span class="line">			<span class="attr">loggerLevel:</span> <span class="string">Full</span> <span class="comment">#日志级别</span></span><br></pre></td></tr></table></figure></div>

<p>方式二：java代码</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904185052012.png" alt="image-20230904185052012"></p>
<p>总结：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904185339532.png" alt="image-20230904185339532"></p>
<h3 id="5-4-3-性能优化"><a href="#5-4-3-性能优化" class="headerlink" title="5.4.3 性能优化"></a>5.4.3 性能优化</h3><p>Feign底层的客户端实现：</p>
<ul>
<li>URLConnection：默认实现，不支持连接池</li>
<li>Apache HttpClient：支持连接池</li>
<li>OKHttp：支持连接池</li>
</ul>
<p>因此优化Feign的性能主要包括：</p>
<p>①使用连接池代替默认的URLConnection；</p>
<p>②日志级别，最好别用basic或none</p>
<p>1.引入<strong>HttpClient</strong>依赖</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入HttpClient依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>2.配置连接池</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">	<span class="attr">client:</span></span><br><span class="line">		<span class="attr">config:</span></span><br><span class="line">			<span class="attr">default:</span>  <span class="comment">#default全局的配置</span></span><br><span class="line">				<span class="attr">loggerLevel:</span> <span class="string">BASIC</span>  <span class="comment">#日志级别，BASIC就是基本的请求和相应信息</span></span><br><span class="line">	<span class="attr">httpclient:</span></span><br><span class="line">		<span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启feign对HtppClient的支持</span></span><br><span class="line">		<span class="attr">max-connections:</span> <span class="number">200</span> <span class="comment"># 最大的连接数</span></span><br><span class="line">		<span class="attr">max-connection-per-route:</span> <span class="number">50</span> <span class="comment"># 每个路径的最大连接数</span></span><br></pre></td></tr></table></figure></div>

<p>总结：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904190230828.png" alt="image-20230904190230828"></p>
<h3 id="5-4-3-Feign的最佳实践分析"><a href="#5-4-3-Feign的最佳实践分析" class="headerlink" title="5.4.3 Feign的最佳实践分析"></a>5.4.3 Feign的最佳实践分析</h3><p>（1）方式一【继承】：给消费者的FeignClient和提供者的controller定义统一的父接口作为标准。</p>
<p>以下两个请求必须一样：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904220815355.png" alt="image-20230904220815355"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904220954665.png" alt="image-20230904220954665"></p>
<p>（2）方式二【抽取】：将FeignClient抽取为独立模块，并且把接口有关的POJO、默认的Fegin配置都放到这个模块中，提供给<strong>所有消费者</strong>使用。可降低耦合度</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904222016457.png" alt="image-20230904222016457"></p>
<h3 id="5-4-4-实现Feign最佳实践"><a href="#5-4-4-实现Feign最佳实践" class="headerlink" title="5.4.4 实现Feign最佳实践"></a>5.4.4 实现Feign最佳实践</h3><p>实现步骤二的方式如下：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904222324012.png" alt="image-20230904222324012"></p>
<p>当定义的FeignClient不在SpringBootApplication的扫描包范围时，这些FeignClient无法使用。有两种解决方案：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904223125392.png" alt="image-20230904223125392"></p>
<p>第一种为批量，该包下所有的clients都会扫描；第二种为指定，可以指定多个</p>
<p>总结：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230904223352849.png" alt="image-20230904223352849"></p>
<h2 id="5-5-统一网关Gateway"><a href="#5-5-统一网关Gateway" class="headerlink" title="5.5 统一网关Gateway"></a>5.5 统一网关Gateway</h2><h3 id="5-5-1-网关介绍"><a href="#5-5-1-网关介绍" class="headerlink" title="5.5.1 网关介绍"></a>5.5.1 网关介绍</h3><p>功能：</p>
<ul>
<li>对用户请求做身份认证和权限校验</li>
<li>将用户请求路由到微服务、并实现负载均衡</li>
<li>对用户请求做限流</li>
</ul>
<p>SpringCloud中网关的实现包括两种：</p>
<ul>
<li>gateway</li>
<li>zuul</li>
</ul>
<p>Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateway是基于spring5中提供的WebFlux，属于响应式编程的实现，有更好的性能。</p>
<h3 id="5-5-2-搭建网关"><a href="#5-5-2-搭建网关" class="headerlink" title="5.5.2 搭建网关"></a>5.5.2 搭建网关</h3><p>（1）搭建网关服务</p>
<p>引入Gateway依赖和nacos的服务发现依赖：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 网关依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- nacos服务发现依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>（2）编写路由配置以及nacos地址</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">10010</span> <span class="comment">#网端端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">application:</span></span><br><span class="line">		<span class="attr">name:</span> <span class="string">gateway</span> <span class="comment">#服务名称</span></span><br><span class="line">	<span class="attr">cloud:</span></span><br><span class="line">		<span class="attr">nacos:</span></span><br><span class="line">			<span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># Nacos地址</span></span><br><span class="line">		<span class="attr">gateway:</span></span><br><span class="line">			<span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">				<span class="string">-id:</span> <span class="string">user-service</span> <span class="comment"># 路由id，自定义，只要唯一即可，可以多个id</span></span><br><span class="line">				<span class="attr">uri:</span> <span class="string">lb://userservice</span> <span class="comment">#路由的目标地址 lb就是负载均衡，后面跟服务名称</span></span><br><span class="line">				<span class="attr">predicates:</span> <span class="comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span></span><br><span class="line">				 <span class="string">-Path=/user/**</span> <span class="comment">#这个是按照路径匹配，只要以/user/开头就符合要求</span></span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230905131105194.png" alt="image-20230905131105194"></p>
<p><strong>总结</strong>：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230905131151444.png" alt="image-20230905131151444"></p>
<h3 id="5-5-3-路由断言工厂"><a href="#5-5-3-路由断言工厂" class="headerlink" title="5.5.3 路由断言工厂"></a>5.5.3 路由断言工厂</h3><blockquote>
<p>在配置文件中的断言被Predicate Factory读取并处理，转变为判断的条件</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230905132318523.png" alt="image-20230905132318523"></p>
<p><strong>总结</strong>：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230905132603863.png" alt="image-20230905132603863"></p>
<h3 id="5-5-4-路由过滤器GatewayFilter"><a href="#5-5-4-路由过滤器GatewayFilter" class="headerlink" title="5.5.4 路由过滤器GatewayFilter"></a>5.5.4 路由过滤器GatewayFilter</h3><p>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230912162050095.png" alt="image-20230912162050095"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230912190710241.png" alt="image-20230912190710241"></p>
<p>案例：给所有进入<strong>userservice</strong>的请求添加一个请求头</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">cloud:</span></span><br><span class="line">		<span class="attr">gateway:</span></span><br><span class="line">			<span class="attr">routes:</span> <span class="comment">#网关配置</span></span><br><span class="line">				<span class="string">-id:</span> <span class="string">user-service</span></span><br><span class="line">				<span class="attr">uri:</span> <span class="string">lb://userservice</span></span><br><span class="line">				<span class="attr">predicates:</span></span><br><span class="line">					<span class="string">-Path=/user///</span></span><br><span class="line">				<span class="attr">filters:</span>  <span class="comment">#过滤器</span></span><br><span class="line">					<span class="string">-AddRequestHeader=Truth,Itcast</span> <span class="string">is</span> <span class="string">freaking</span> <span class="string">awsome!</span>  <span class="comment">#添加请求头</span></span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230912191227585.png" alt="image-20230912191227585"></p>
<p>给所有微服务添加请求头：</p>
<p>可以使用默认过滤器</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">default-filters:</span> <span class="string">Truth,Itcast</span> <span class="string">is</span> <span class="string">freaking</span> <span class="string">awsome!</span></span><br></pre></td></tr></table></figure></div>

<p><strong>总结</strong>：</p>
<p>过滤器的作用：</p>
<ul>
<li>对路由的请求或响应做加工处理，比如添加请求头</li>
<li>配置在路由下的过滤器只对当前路由的请求生效</li>
</ul>
<p>defaultFilters的作用：</p>
<ul>
<li>对所有路由都生效</li>
</ul>
<h3 id="5-5-5-全局过滤器GlobalFilter"><a href="#5-5-5-全局过滤器GlobalFilter" class="headerlink" title="5.5.5 全局过滤器GlobalFilter"></a>5.5.5 全局过滤器GlobalFilter</h3><p>可以对进入网关的请求和微服务返回的响应做处理</p>
<p>路由过滤器通过配置定义，处理逻辑是固定的。GlobalFilters的逻辑需要自己写代码实现</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GlobalFilter</span>&#123;</span><br><span class="line">	Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange,GatewayFilterChain chain)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>修改克隆的GitHub项目</title>
    <url>/2023/08/21/%E4%BF%AE%E6%94%B9%E5%85%8B%E9%9A%86%E7%9A%84GitHub%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="一、克隆GitHub项目"><a href="#一、克隆GitHub项目" class="headerlink" title="一、克隆GitHub项目"></a>一、<strong>克隆GitHub项目</strong></h1><h2 id="1-在本地创建一个空文件夹"><a href="#1-在本地创建一个空文件夹" class="headerlink" title="1.在本地创建一个空文件夹"></a><strong>1.在本地创建一个空文件夹</strong></h2><p>文件夹名字根据自身需要即可，右键点击Git Bash，输入命令</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></div>

<p>初始化本地仓库</p>
<p><strong>2.克隆Github项目</strong></p>
<p>以本人的Github为例子展开实验</p>
<p>在刚刚初始化的文件夹里打开git bash，使用命令</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone yourSSH</span><br></pre></td></tr></table></figure></div>

<p>其中 yourSSH 为你需要克隆的项目到SSH密钥</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/%E5%85%8B%E9%9A%86github%E9%A1%B9%E7%9B%AE.png"></p>
<p>上图即为成功克隆到本地</p>
<h1 id="二、修改项目代码"><a href="#二、修改项目代码" class="headerlink" title="二、修改项目代码"></a><strong>二、修改项目代码</strong></h1><h2 id="1-进入到相关目录"><a href="#1-进入到相关目录" class="headerlink" title="1.进入到相关目录"></a><strong>1.进入到相关目录</strong></h2><p>使用命令</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd filename</span><br></pre></td></tr></table></figure></div>

<p>进入到需要修改的文件的目录</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/%E8%BF%9B%E5%85%A5%E5%88%B0%E4%BF%AE%E6%94%B9%E7%9B%AE%E5%BD%95.png"></p>
<p>上图为进入到需要修改文件的目录</p>
<h2 id="2-修改文件"><a href="#2-修改文件" class="headerlink" title="2.修改文件"></a><strong>2.修改文件</strong></h2><h3 id="①Vim命令"><a href="#①Vim命令" class="headerlink" title="①Vim命令"></a>①Vim命令</h3><p>使用命令</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim 文件名</span><br></pre></td></tr></table></figure></div>

<p>进入到编辑器</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/%E8%BF%9B%E5%85%A5%E5%88%B0%E7%BC%96%E8%BE%91%E5%99%A8.png"></p>
<h3 id="②修改文件内容"><a href="#②修改文件内容" class="headerlink" title="②修改文件内容"></a>②修改文件内容</h3><p>本次以添加注释为例</p>
<p>点击键盘 <strong>i</strong> 或者 <strong>insert</strong> 健即可进入修改模式(左下角显示<strong>insert</strong>即可，如下图：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9.png"></p>
<p>修改完毕之后，按住esc健，退出编辑，左下角输入”:wq”退出编辑并且保存</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/%E4%BF%AE%E6%94%B9%E5%AE%8C%E6%AF%95.png"></p>
<h1 id="三、上传项目代码至GitHub"><a href="#三、上传项目代码至GitHub" class="headerlink" title="三、上传项目代码至GitHub"></a>三、上传项目代码至GitHub</h1><h2 id="①将文件上传到暂存区"><a href="#①将文件上传到暂存区" class="headerlink" title="①将文件上传到暂存区"></a><strong>①将文件上传到暂存区</strong></h2><p>使用命令</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></div>

<p>将所有文件上传至暂存区</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/%E4%B8%8A%E4%BC%A0%E6%9A%82%E5%AD%98%E5%99%A8.png"></p>
<h2 id="②将暂存区文件添加到本地仓库"><a href="#②将暂存区文件添加到本地仓库" class="headerlink" title="②将暂存区文件添加到本地仓库"></a><strong>②将暂存区文件添加到本地仓库</strong></h2><p>使用命令</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m “注释”</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/../Resources/%E6%B7%BB%E5%8A%A0%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png"></p>
<h2 id="③将文件上传至GitHub"><a href="#③将文件上传至GitHub" class="headerlink" title="③将文件上传至GitHub"></a>③将文件上传至GitHub</h2><p>使用命令</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></div>

<p>将文件上传至GitHub</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/%E4%B8%8A%E4%BC%A0%E8%87%B3GitHub.png"></p>
<h2 id="④查看GitHub文件是否修改"><a href="#④查看GitHub文件是否修改" class="headerlink" title="④查看GitHub文件是否修改"></a><strong>④查看GitHub文件是否修改</strong></h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/%E6%9F%A5%E7%9C%8B%E4%BF%AE%E6%94%B9.png"></p>
<p>修改成功！！上</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-vue全栈开发之VueX篇</title>
    <url>/2023/08/18/SpringBoot-vue%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B9%8BVueX%E7%AF%87/</url>
    <content><![CDATA[<h1 id="一、VueX的介绍"><a href="#一、VueX的介绍" class="headerlink" title="一、VueX的介绍"></a>一、VueX的介绍</h1><h2 id="1-1-VueX基本概念"><a href="#1-1-VueX基本概念" class="headerlink" title="1.1 VueX基本概念"></a>1.1 VueX基本概念</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/Vuex.png"></p>
<h2 id="1-2-状态管理"><a href="#1-2-状态管理" class="headerlink" title="1.2 状态管理"></a>1.2 状态管理</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86.png"></p>
<p><strong>整体理念</strong>：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../pic/%E6%95%B4%E4%BD%93%E7%90%86%E5%BF%B5.png"></p>
<h3 id="1-2-1-State"><a href="#1-2-1-State" class="headerlink" title="1.2.1 State"></a>1.2.1 State</h3><blockquote>
<p>State用于维护所有应用层的状态，并确保应用只用唯一的数据源</p>
</blockquote>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个新的store实例</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">    <span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            state.<span class="property">count</span>++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>在组件中，直接用this.$store.state.count访问数据，也可以先用mapState辅助函数将其映射下来</p>
</blockquote>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在单独构建的版本中辅助函数为 Vuex.mapState</span></span><br><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">computed</span>:<span class="title function_">mapState</span>(&#123;</span><br><span class="line">        <span class="comment">// 箭头函数可使代码更简练</span></span><br><span class="line">        <span class="attr">count</span>:<span class="function"><span class="params">state</span>=&gt;</span>state.<span class="property">count</span>,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//传字符串参数&#x27;count&#x27;等同于&#x27;state=&gt;state.count&#x27;</span></span><br><span class="line">        <span class="attr">countAlias</span>:<span class="string">&#x27;count&#x27;</span>,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//为了能够使用&#x27;this&#x27;获取局部标志，必须使用常规函数</span></span><br><span class="line">        <span class="title function_">countPlusLocalState</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">count</span>+<span class="variable language_">this</span>.<span class="property">localCount</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-2-2-Mutation"><a href="#1-2-2-Mutation" class="headerlink" title="1.2.2 Mutation"></a>1.2.2 Mutation</h3><blockquote>
<p>Mutation提供修改State状态的方法</p>
</blockquote>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个新的store实例</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">    <span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            state.<span class="property">count</span>++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>在组件中，可以直接使用store.commit来提交mutation</p>
</blockquote>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">incrment</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>也可以先用mapMutation辅助函数将其映射下来</p>
</blockquote>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    ...<span class="title function_">mapMutations</span>([</span><br><span class="line">        <span class="string">&#x27;increment&#x27;</span>, <span class="comment">//将this.increment()映射为this.$store.commit(&#x27;increment&#x27;)</span></span><br><span class="line">        <span class="comment">//mapMutation也支持载荷：</span></span><br><span class="line">        <span class="string">&#x27;incrementBy&#x27;</span> <span class="comment">//将this.incrementBy(amount)映射为this.$store.commit(&#x27;incrementBy&#x27;)</span></span><br><span class="line">    ]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-2-3-Getter"><a href="#1-2-3-Getter" class="headerlink" title="1.2.3 Getter"></a>1.2.3 Getter</h3><blockquote>
<p>维护由State派生的一些状态，这些状态随着State状态的变化而变化</p>
</blockquote>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        <span class="attr">todos</span>:[</span><br><span class="line">            &#123; <span class="attr">id</span>:<span class="number">1</span>,<span class="attr">text</span>:<span class="string">&#x27;...&#x27;</span>,<span class="attr">done</span>:<span class="literal">true</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>:<span class="number">2</span>,<span class="attr">text</span>:<span class="string">&#x27;...&#x27;</span>,<span class="attr">done</span>:<span class="literal">false</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="attr">doneTodos</span>:<span class="function">(<span class="params">state</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span>=&gt;</span>todo.<span class="property">done</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<h3 id="1-2-4-Action"><a href="#1-2-4-Action" class="headerlink" title="1.2.4 Action"></a>1.2.4 Action</h3><blockquote>
<p>Action类似Mutation，不同在于：</p>
<p>Action不能直接修改状态，只能通过提交mutation来修改，Action可以包含异步操作</p>
</blockquote>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            state.<span class="property">count</span>++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">context</span>)&#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>在组件中，可以直接使用this.$store.dispatch(‘xxx’)分发action，或者使用mapActions辅助函数先将其映射下来</p>
</blockquote>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    ...<span class="title function_">mapMutations</span>([</span><br><span class="line">        <span class="string">&#x27;increment&#x27;</span>, <span class="comment">//将this.increment()映射为this.$store.dispatch(&#x27;increment&#x27;)</span></span><br><span class="line">        <span class="comment">//mapAction 也支持载荷：</span></span><br><span class="line">        <span class="string">&#x27;incrementBy&#x27;</span> <span class="comment">//将this.incrementBy(amount)映射为this.$store.dispatch(&#x27;incrementBy&#x27;,amount)</span></span><br><span class="line">    ]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-2-5-Module"><a href="#1-2-5-Module" class="headerlink" title="1.2.5 Module"></a>1.2.5 Module</h3><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: moduleA,</span><br><span class="line">    <span class="attr">b</span>: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.<span class="property">state</span>.<span class="property">a</span> <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.<span class="property">state</span>.<span class="property">b</span> <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure></div>

<h1 id="二、VueX的安装与使用"><a href="#二、VueX的安装与使用" class="headerlink" title="二、VueX的安装与使用"></a>二、VueX的安装与使用</h1><h2 id="2-1-State"><a href="#2-1-State" class="headerlink" title="2.1 State"></a>2.1 State</h2><p>index.js：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 创建一个新的 store 实例</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  state () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></div>

<p>HelloWorld.vue组件：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;&#123;this.$store.state.count&#125;&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;&#123;count&#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>:<span class="string">&#x27;HelloWorld&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">count</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span>+<span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>:<span class="title function_">mapState</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> 		<span class="string">&#x27;count&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">add</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span> = <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span>+<span class="number">1</span> <span class="comment">//可以换另一种写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<p>main.js：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    store : store</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="2-2-Getter"><a href="#2-2-Getter" class="headerlink" title="2.2 Getter"></a>2.2 Getter</h2><p>index.js</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 创建一个新的 store 实例</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  state () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">todos</span>:[</span><br><span class="line">          &#123; <span class="attr">id</span>:<span class="number">1</span>,<span class="attr">text</span>:<span class="string">&#x27;吃饭&#x27;</span>,<span class="attr">done</span>:<span class="literal">true</span> &#125;</span><br><span class="line">          &#123; <span class="attr">id</span>:<span class="number">2</span>,<span class="attr">text</span>:<span class="string">&#x27;睡觉&#x27;</span>,<span class="attr">done</span>:<span class="literal">false</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>:&#123;</span><br><span class="line">      <span class="attr">doneTools</span>:<span class="function"><span class="params">state</span>=&gt;</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> state.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span>=&gt;</span>todo.<span class="property">done</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></div>

<p>HelloWorld.vue组件：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;&#123;this.$store.state.count&#125;&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;&#123;count&#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;todo.id&quot;</span>&gt;</span>&#123;&#123;todo.text&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;mapState,mapGetter&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>:<span class="string">&#x27;HelloWorld&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       ...<span class="title function_">mapState</span>([</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> 			<span class="string">&#x27;count&#x27;</span>,<span class="string">&#x27;todos&#x27;</span> <span class="comment">//先映射才能用todos</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ...<span class="title function_">mapGetters</span>([</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> 			<span class="string">&#x27;doneTools&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">add</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span> = <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span>+<span class="number">1</span> <span class="comment">//可以换另一种写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Vue</category>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>全栈开发</tag>
        <tag>Vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>合同法、著作权、实施条例</title>
    <url>/2023/10/31/%E5%90%88%E5%90%8C%E6%B3%95%E3%80%81%E8%91%97%E4%BD%9C%E6%9D%83%E3%80%81%E5%AE%9E%E6%96%BD%E6%9D%A1%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="一、合同法"><a href="#一、合同法" class="headerlink" title="一、合同法"></a>一、合同法</h1><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231031232530697.png" alt="image-20231031232530697"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231031232541299.png" alt="image-20231031232541299"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231031232554509.png" alt="image-20231031232554509"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231031232603994.png" alt="image-20231031232603994"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231031232613091.png" alt="image-20231031232613091"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231031232623833.png" alt="image-20231031232623833"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231031232632899.png" alt="image-20231031232632899"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231031232641515.png" alt="image-20231031232641515"></p>
<h1 id="二、著作权法"><a href="#二、著作权法" class="headerlink" title="二、著作权法"></a>二、著作权法</h1><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231031232750830.png" alt="image-20231031232750830"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231031232758456.png" alt="image-20231031232758456"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231031232915745.png" alt="image-20231031232915745"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231031233038630.png" alt="image-20231031233038630"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231031233234461.png" alt="image-20231031233234461"></p>
<h1 id="三、招投标法实施条例"><a href="#三、招投标法实施条例" class="headerlink" title="三、招投标法实施条例"></a>三、招投标法实施条例</h1><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231031233434274.png" alt="image-20231031233434274"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231031233544792.png" alt="image-20231031233544792"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231031233702615.png" alt="image-20231031233702615"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231031233727264.png" alt="image-20231031233727264"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231031233942765.png" alt="image-20231031233942765"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231031233954266.png" alt="image-20231031233954266"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231031234022397.png" alt="image-20231031234022397"></p>
<h1 id="四、项目收尾"><a href="#四、项目收尾" class="headerlink" title="四、项目收尾"></a>四、项目收尾</h1><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101131436946.png" alt="image-20231101131436946"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101131550900.png" alt="image-20231101131550900"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101132159946.png" alt="image-20231101132159946"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101132324543.png" alt="image-20231101132324543"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101132526228.png" alt="image-20231101132526228"></p>
]]></content>
      <categories>
        <category>信息系统项目管理师</category>
      </categories>
      <tags>
        <tag>软考</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统大题复习</title>
    <url>/2023/12/17/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%A7%E9%A2%98%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="1-缺页问题"><a href="#1-缺页问题" class="headerlink" title="1.缺页问题"></a>1.缺页问题</h1><h2 id="1-1-FIFO先进先出"><a href="#1-1-FIFO先进先出" class="headerlink" title="1.1 FIFO先进先出"></a>1.1 FIFO先进先出</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217150709846.png" alt="image-20231217150709846"></p>
<p>开局四缺一</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217150759760.png" alt="image-20231217150759760"></p>
<p>此时到5，比长度，谁长替换谁</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217150913957.png" alt="image-20231217150913957"></p>
<p>此时还是缺页，因为没找到5；同理接下来2最长，将2换成1，缺页；</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217151040463.png" alt="image-20231217151040463"></p>
<p>同理将最长的3换成4，因为4在前面的5134里面，所以不缺页，5134照抄</p>
<p>最终，结果如下：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217151331190.png" alt="image-20231217151331190"></p>
<p>缺页率：5&#x2F;6</p>
<h2 id="1-2-OPT最佳置换算法"><a href="#1-2-OPT最佳置换算法" class="headerlink" title="1.2 OPT最佳置换算法"></a>1.2 OPT最佳置换算法</h2><p>被淘汰的页面是在未来最长时间内不再被访问的页面</p>
<p>开局四缺一</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217151526667.png" alt="image-20231217151526667"></p>
<p>对于5来说，5后面的就是未来的，<strong>被淘汰的页面将是在未来的最长时间内不再被访问的页面</strong></p>
<p>现在1234数字里哪个数字离得最远</p>
<p>此时替换掉3，以此类推</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217152523372.png" alt="image-20231217152523372"></p>
<p>最后缺页率为1&#x2F;2</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217152825815.png" alt="image-20231217152825815"></p>
<h2 id="1-3-LRU最近最少使用"><a href="#1-3-LRU最近最少使用" class="headerlink" title="1.3 LRU最近最少使用"></a>1.3 LRU最近最少使用</h2><p>替换最久未使用</p>
<p>开局四缺一</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217152948906.png" alt="image-20231217152948906"></p>
<p>因为1最久没使用（离得最远），所以替换1</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217153052923.png" alt="image-20231217153052923"></p>
<p>变成</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217153303897-170279838508519.png" alt="image-20231217153303897"></p>
<p>因为145都有，所以替换掉3</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217153725059.png" alt="image-20231217153725059"></p>
<p>变成</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217153809202.png" alt="image-20231217153809202"></p>
<p>3替换5，不缺页；5替换1，缺页，最后为</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217153908623.png" alt="image-20231217153908623"></p>
<h1 id="2-计算物理地址"><a href="#2-计算物理地址" class="headerlink" title="2.计算物理地址"></a>2.计算物理地址</h1><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217154118421.png" alt="image-20231217154118421"></p>
<p>（1）求页号</p>
<p>页号&#x3D;逻辑地址 % 每页字节数；页号为2</p>
<p><strong>求余</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217154343096.png" alt="image-20231217154343096"></p>
<p>（2）对页表</p>
<p>页号为2，对应的块号就是6</p>
<p>（3）算地址，块长就是每页字节数</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217154456058.png" alt="image-20231217154456058"></p>
<h1 id="3-银行家算法"><a href="#3-银行家算法" class="headerlink" title="3.银行家算法"></a>3.银行家算法</h1><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217155307541.png" alt="image-20231217155307541"></p>
<h2 id="3-1-判断在T0时刻的安全性"><a href="#3-1-判断在T0时刻的安全性" class="headerlink" title="3.1 判断在T0时刻的安全性"></a>3.1 判断在T0时刻的安全性</h2><p>解决方案：</p>
<p>因为Available为332，所以当前所剩资源（Work）为332</p>
<p>work+allocation：为计算机处理完当前进程后所剩资源</p>
<p>观察Need，哪个满足332，就填哪个，进程P1和P3都可以，先写哪个都行</p>
<p>因为Need &lt; work+allocation，所以P1</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217160025430.png" alt="image-20231217160025430"></p>
<p>接下来是P3和P4</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217160135658.png" alt="image-20231217160135658"></p>
<p>接下来，P2和P0都可以，最后为</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217160253417.png" alt="image-20231217160253417"></p>
<p>所以可以安全执行，进程序列为P1,P3,P4,P2,P0</p>
<p>因为各种资源的数量是10,5,7，如果最后一样则没有做错。</p>
<h2 id="3-2-用算法检查"><a href="#3-2-用算法检查" class="headerlink" title="3.2 用算法检查"></a>3.2 用算法检查</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217160447828.png" alt="image-20231217160447828"></p>
<p>因为Request为（1,0,2），所以Allocation要加上Request，Available要减去Request，Need要减去Request</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217161713754.png" alt="image-20231217161713754"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217161910539.png" alt="image-20231217161910539"></p>
<h1 id="4-磁盘调度"><a href="#4-磁盘调度" class="headerlink" title="4.磁盘调度"></a>4.磁盘调度</h1><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217162116460-170280129719336.png" alt="image-20231217162116460"></p>
<h2 id="4-1-FCFS先来先服务"><a href="#4-1-FCFS先来先服务" class="headerlink" title="4.1 FCFS先来先服务"></a>4.1 FCFS先来先服务</h2><p>按时间顺序到达</p>
<p>先写出磁头移动顺序：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217162246719.png" alt="image-20231217162246719"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217162313294.png" alt="image-20231217162313294"></p>
<h2 id="4-2-SSTF最短寻道时间优先"><a href="#4-2-SSTF最短寻道时间优先" class="headerlink" title="4.2 SSTF最短寻道时间优先"></a>4.2 SSTF最短寻道时间优先</h2><p>先对数字排序</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217162404620.png" alt="image-20231217162404620"></p>
<p>从90开始，离哪个近走哪个</p>
<h2 id="4-3-SCAN扫描算法"><a href="#4-3-SCAN扫描算法" class="headerlink" title="4.3 SCAN扫描算法"></a>4.3 SCAN扫描算法</h2><p>向左向右</p>
<p>  <img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217162728820.png" alt="image-20231217162728820"></p>
<h2 id="4-4-C-SCAN循环扫描算法"><a href="#4-4-C-SCAN循环扫描算法" class="headerlink" title="4.4 C-SCAN循环扫描算法"></a>4.4 C-SCAN循环扫描算法</h2><p>向左向右</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217162833387.png" alt="image-20231217162833387"></p>
<h1 id="5-进程调度"><a href="#5-进程调度" class="headerlink" title="5.进程调度"></a>5.进程调度</h1><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217170533313.png" alt="image-20231217170533313"></p>
<h2 id="5-1-FCFS先来先服务"><a href="#5-1-FCFS先来先服务" class="headerlink" title="5.1 FCFS先来先服务"></a>5.1 FCFS先来先服务</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217191251108.png" alt="image-20231217191251108"></p>
<p>等待时间&#x3D;开始时间-到达时间；</p>
<p>周转时间&#x3D;结束时间-到达时间；</p>
<p>带权周转时间&#x3D;周转时间&#x2F;服务时间；</p>
<p>平均等待时间&#x3D;等待时间&#x2F;进程数量；</p>
<p>平均周转时间&#x3D;周转时间&#x2F;进程数量；</p>
<p>平均带权周转时间&#x3D;带权周转总时间&#x2F;进程数量；</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217191113772.png" alt="image-20231217191113772"></p>
<h2 id="5-2-SJF短作业优先调度算法（非抢占）"><a href="#5-2-SJF短作业优先调度算法（非抢占）" class="headerlink" title="5.2 SJF短作业优先调度算法（非抢占）"></a>5.2 SJF短作业优先调度算法（非抢占）</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217191516133.png" alt="image-20231217191516133"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217191556633.png" alt="image-20231217191556633"></p>
<h3 id="5-2-1-抢占"><a href="#5-2-1-抢占" class="headerlink" title="5.2.1 抢占"></a>5.2.1 抢占</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217191849889.png" alt="image-20231217191849889"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217191905314.png" alt="image-20231217191905314"></p>
<h2 id="5-3-HRRN高响应比优先调度算法（非抢占）"><a href="#5-3-HRRN高响应比优先调度算法（非抢占）" class="headerlink" title="5.3 HRRN高响应比优先调度算法（非抢占）"></a>5.3 HRRN高响应比优先调度算法（非抢占）</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217192710942.png" alt="image-20231217192710942"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217192721953.png" alt="image-20231217192721953"></p>
<h2 id="5-4-HRRN"><a href="#5-4-HRRN" class="headerlink" title="5.4 HRRN"></a>5.4 HRRN</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231218142738810.png" alt="image-20231218142738810"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231218142812182-170288089332912-170288089429014.png" alt="image-20231218142812182"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231218142839126.png" alt="image-20231218142839126"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231218142854690.png" alt="image-20231218142854690"></p>
<h1 id="6-有效访问时间"><a href="#6-有效访问时间" class="headerlink" title="6.有效访问时间"></a>6.有效访问时间</h1><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217192752793.png" alt="image-20231217192752793"></p>
<h1 id="7-动态分区分配算法计算"><a href="#7-动态分区分配算法计算" class="headerlink" title="7.动态分区分配算法计算"></a>7.动态分区分配算法计算</h1><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217220943551.png" alt="image-20231217220943551"></p>
<h2 id="7-1-首次适应算法"><a href="#7-1-首次适应算法" class="headerlink" title="7.1 首次适应算法"></a>7.1 首次适应算法</h2><p>优先利用低地址中的空闲区</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217222032638.png" alt="image-20231217222032638"></p>
<h2 id="7-3-最佳适应算法"><a href="#7-3-最佳适应算法" class="headerlink" title="7.3 最佳适应算法"></a>7.3 最佳适应算法</h2><p>优先分配空闲区（即存储空间递增的方式）</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231217222455833.png" alt="image-20231217222455833"></p>
<h1 id="8-进程同步-PV操作"><a href="#8-进程同步-PV操作" class="headerlink" title="8.进程同步,PV操作"></a>8.进程同步,PV操作</h1><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231218123918301.png" alt="image-20231218123918301"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231218123932303.png" alt="image-20231218123932303"></p>
<h2 id="8-1题型一：利用信号量实现前驱关系"><a href="#8-1题型一：利用信号量实现前驱关系" class="headerlink" title="8.1题型一：利用信号量实现前驱关系"></a>8.1题型一：利用信号量实现前驱关系</h2><blockquote>
<p>有几个前驱就写几个wait(),有几个后驱就写几个signal()</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231218124306119.png" alt="image-20231218124306119"></p>
<h2 id="8-2题型二：利用信号量实现进程同步与互斥"><a href="#8-2题型二：利用信号量实现进程同步与互斥" class="headerlink" title="8.2题型二：利用信号量实现进程同步与互斥"></a>8.2题型二：利用信号量实现进程同步与互斥</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231218125056758-17028750577005.png" alt="image-20231218125056758"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231218125123544.png" alt="image-20231218125123544"></p>
<h1 id="9-生产者和消费者"><a href="#9-生产者和消费者" class="headerlink" title="9.生产者和消费者"></a>9.生产者和消费者</h1><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231218141156538.png" alt="image-20231218141156538"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231218141219710.png" alt="image-20231218141219710"></p>
]]></content>
      <tags>
        <tag>操作系统复习</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot+vue全栈开发之SpringBoot篇</title>
    <url>/2023/08/16/Springboot-vue%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="一、SpringBoot快速上手"><a href="#一、SpringBoot快速上手" class="headerlink" title="一、SpringBoot快速上手"></a>一、SpringBoot快速上手</h1><h2 id="1-1-SpringBoot特点"><a href="#1-1-SpringBoot特点" class="headerlink" title="1.1 SpringBoot特点"></a>1.1 SpringBoot特点</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/SpringBoot%E7%89%B9%E7%82%B9.png"></p>
<h2 id="1-2-SpringBoot入门代码"><a href="#1-2-SpringBoot入门代码" class="headerlink" title="1.2 SpringBoot入门代码"></a>1.2 SpringBoot入门代码</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="comment">//  http://localhost:8080/hello</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="1-3-开发环境热部署"><a href="#1-3-开发环境热部署" class="headerlink" title="1.3 开发环境热部署"></a>1.3 开发环境热部署</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%83%AD%E9%83%A8%E7%BD%B2.png"></p>
<h3 id="1-3-1-依赖"><a href="#1-3-1-依赖" class="headerlink" title="1.3.1 依赖"></a>1.3.1 依赖</h3><p>xml:</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>properties:</p>
<div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.devtools.restart.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.devtools.restart.additional-path</span>=<span class="string">src/main/java</span></span><br></pre></td></tr></table></figure></div>

<h1 id="二、SpringBoot-Controller"><a href="#二、SpringBoot-Controller" class="headerlink" title="二、SpringBoot Controller"></a>二、SpringBoot Controller</h1><h2 id="2-1-Web入门"><a href="#2-1-Web入门" class="headerlink" title="2.1 Web入门"></a>2.1 Web入门</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/web%E5%85%A5%E9%97%A8.png"></p>
<p>依赖：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-1-1-控制器"><a href="#2-1-1-控制器" class="headerlink" title="2.1.1 控制器"></a>2.1.1 控制器</h3><blockquote>
<p>SpringBoot提供了@Controller和@RestController两种注解来标识此类负责接收和处理HTTP请求</p>
<p>如果请求的是页面和数据，使用@Controller即可；如果只是请求数据，则可以使用@RestController。</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/../pic/%E6%8E%A7%E5%88%B6%E5%99%A8.png"></p>
<h3 id="2-1-2-Controller用法"><a href="#2-1-2-Controller用法" class="headerlink" title="2.1.2 @Controller用法"></a>2.1.2 @Controller用法</h3><blockquote>
<p>示例中返回来hello页面和name的数据，在前端页面中可以通过${name}参数获取后台返回的数据并显示</p>
<p>@Controller通常与Thymeleaf模板引擎结合使用</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/../pic/@Controller%E7%94%A8%E6%B3%95.png"></p>
<p><strong>注意</strong>：返回一个“hello”，说明会寻找名叫“hello.html”的页面，用了Thymeleaf并不是前后端分离</p>
<h3 id="2-1-3-RestController用法"><a href="#2-1-3-RestController用法" class="headerlink" title="2.1.3 @RestController用法"></a>2.1.3 @RestController用法</h3><blockquote>
<p>默认情况下，@RestController注解将返回的对象数据转换为<strong>JSON格式</strong></p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/../pic/@RestController%E7%94%A8%E6%B3%95.png"></p>
<h3 id="2-1-4-路由映射"><a href="#2-1-4-路由映射" class="headerlink" title="2.1.4 路由映射"></a>2.1.4 路由映射</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E8%B7%AF%E7%94%B1%E6%98%A0%E5%B0%84.png"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../pic/%E8%B7%AF%E7%94%B1%E6%98%A0%E5%B0%842.png"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../pic/Method%E5%8C%B9%E9%85%8D.png"></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = RequestMethod.GET)</span></span><br><span class="line"> <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="comment">//两种方式一样</span></span><br></pre></td></tr></table></figure></div>

<h3 id="2-1-5-参数传递"><a href="#2-1-5-参数传递" class="headerlink" title="2.1.5 参数传递"></a>2.1.5 参数传递</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E5%8F%82%E6%95%B0%E8%AF%B7%E6%B1%82.png"></p>
<p>例子如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="comment">//  http://localhost:8080/hello</span></span><br><span class="line">    <span class="comment">//  http://localhost:8080/hello?nickname=zhangsan&amp;phone=123</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(String nickname,String phone)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world &quot;</span> + nickname + phone;</span><br><span class="line">        <span class="comment">//浏览器返回：hello world zhangsan 123</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>若需要接收JSON格式的数据，则需要在参数前加上@RequestBody，如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/postTest&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">postTest</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">     System.out.println(user);</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="三、SpringBoot文件上传-拦截器"><a href="#三、SpringBoot文件上传-拦截器" class="headerlink" title="三、SpringBoot文件上传+拦截器"></a>三、SpringBoot文件上传+拦截器</h1><h2 id="3-1-静态资源"><a href="#3-1-静态资源" class="headerlink" title="3.1 静态资源"></a>3.1 静态资源</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90.png"></p>
<p><strong>注意</strong>：如果项目为前后端分离项目，则<strong>static</strong>目录一般不放东西</p>
<h2 id="3-2-文件上传原理"><a href="#3-2-文件上传原理" class="headerlink" title="3.2 文件上传原理"></a>3.2 文件上传原理</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8E%9F%E7%90%86.png"></p>
<h2 id="3-3-SpringBoot实现文件上传功能"><a href="#3-3-SpringBoot实现文件上传功能" class="headerlink" title="3.3 SpringBoot实现文件上传功能"></a>3.3 SpringBoot实现文件上传功能</h2><blockquote>
<p>SpringBoot工程嵌入的tomcat限制了请求的文件的大小，每个文件的配置最大为1MB，单次请求的文件总数不能大于10MB</p>
<p>要更改这个默认值需要在配置文件中加入两个配置如下</p>
</blockquote>
<div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.servlet.multipart.max-file-size</span>=<span class="string">10MB</span></span><br><span class="line"><span class="attr">spring.servlet.multipart.max-request-size</span>=<span class="string">10MB</span></span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/../pic/springboot%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.png"></p>
<p><strong>注意</strong>：MultipartFile 的参数 <strong>f</strong> 要与表单中的  file 的 <strong>name</strong> 的参数一致</p>
<h2 id="3-4-拦截器"><a href="#3-4-拦截器" class="headerlink" title="3.4 拦截器"></a>3.4 拦截器</h2><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E6%8B%A6%E6%88%AA%E5%99%A8.png"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../pic/%E6%8B%A6%E6%88%AA%E5%99%A8%E5%8F%91%E6%94%BE.png"></p>
<h3 id="3-4-1-拦截器定义"><a href="#3-4-1-拦截器定义" class="headerlink" title="3.4.1 拦截器定义"></a>3.4.1 拦截器定义</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9A%E4%B9%89.png"></p>
<h3 id="3-4-2-拦截器注册"><a href="#3-4-2-拦截器注册" class="headerlink" title="3.4.2 拦截器注册"></a>3.4.2 拦截器注册</h3><p><img lazyload src="/images/loading.svg" data-src="/../pic/%E6%8B%A6%E6%88%AA%E5%99%A8%E6%B3%A8%E5%86%8C.png"></p>
]]></content>
      <categories>
        <category>后端开发</category>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>全栈开发</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>计算题</title>
    <url>/2023/11/01/%E6%8C%A3%E5%80%BC%E5%88%86%E6%9E%90%E6%B3%95/</url>
    <content><![CDATA[<h1 id="计算题"><a href="#计算题" class="headerlink" title="计算题"></a>计算题</h1><h2 id="1-1-挣值分析"><a href="#1-1-挣值分析" class="headerlink" title="1.1 挣值分析"></a>1.1 挣值分析</h2><h3 id="1-1-1、基本参数"><a href="#1-1-1、基本参数" class="headerlink" title="1.1.1、基本参数"></a>1.1.1、基本参数</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101205337471.png" alt="image-20231101205337471"></p>
<h3 id="1-1-2、绩效指标"><a href="#1-1-2、绩效指标" class="headerlink" title="1.1.2、绩效指标"></a>1.1.2、绩效指标</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101205626540.png" alt="image-20231101205626540"></p>
<h3 id="1-1-3、预测指标"><a href="#1-1-3、预测指标" class="headerlink" title="1.1.3、预测指标"></a>1.1.3、预测指标</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101205825382.png" alt="image-20231101205825382"></p>
<h2 id="1-2-三点估算与PERT历时估算"><a href="#1-2-三点估算与PERT历时估算" class="headerlink" title="1.2 三点估算与PERT历时估算"></a>1.2 三点估算与PERT历时估算<img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101210501293.png" alt="image-20231101210501293"></h2><h3 id="①期望估算值"><a href="#①期望估算值" class="headerlink" title="①期望估算值"></a>①期望估算值</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101210602613.png" alt="image-20231101210602613"></p>
<h3 id="②标准差"><a href="#②标准差" class="headerlink" title="②标准差"></a>②标准差</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101210613379.png" alt="image-20231101210613379"></p>
<h3 id="③概率和保证率"><a href="#③概率和保证率" class="headerlink" title="③概率和保证率"></a>③概率和保证率</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101211237548.png" alt="image-20231101211237548"></p>
<h3 id="④失败率"><a href="#④失败率" class="headerlink" title="④失败率"></a>④失败率</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101211413100.png" alt="image-20231101211413100"></p>
<h3 id="⑤记忆技巧"><a href="#⑤记忆技巧" class="headerlink" title="⑤记忆技巧"></a>⑤记忆技巧</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101211026468.png" alt="image-20231101211026468"></p>
<h2 id="1-3-关键路径"><a href="#1-3-关键路径" class="headerlink" title="1.3 关键路径"></a>1.3 关键路径</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101212042723.png" alt="image-20231101212042723"></p>
<h3 id="1-3-1-工作节点图"><a href="#1-3-1-工作节点图" class="headerlink" title="1.3.1 工作节点图"></a>1.3.1 工作节点图</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101212609122.png" alt="image-20231101212609122"></p>
<h3 id="1-3-2-顺推法和逆推法"><a href="#1-3-2-顺推法和逆推法" class="headerlink" title="1.3.2 顺推法和逆推法"></a>1.3.2 顺推法和逆推法</h3><p>自左向右为顺推（EF，ES），自右向左为逆推（LF，LS）</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101212722585.png" alt="image-20231101212722585"></p>
<h3 id="1-3-3-总时差"><a href="#1-3-3-总时差" class="headerlink" title="1.3.3 总时差"></a>1.3.3 总时差</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101213106310.png" alt="image-20231101213106310"></p>
<h3 id="1-3-4-自由时差"><a href="#1-3-4-自由时差" class="headerlink" title="1.3.4 自由时差"></a>1.3.4 自由时差</h3><p>紧后活动最早开始时间-最早完成时间。</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101213257683.png" alt="image-20231101213257683"></p>
<h3 id="1-3-5-关键路径上活动的判断"><a href="#1-3-5-关键路径上活动的判断" class="headerlink" title="1.3.5 关键路径上活动的判断"></a>1.3.5 关键路径上活动的判断</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101213411472.png" alt="image-20231101213411472"></p>
<h3 id="1-3-6-例题"><a href="#1-3-6-例题" class="headerlink" title="1.3.6 例题"></a>1.3.6 例题</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101214813095.png" alt="image-20231101214813095"></p>
<h2 id="1-4-最短路径"><a href="#1-4-最短路径" class="headerlink" title="1.4 最短路径"></a>1.4 最短路径</h2><h3 id="1-4-1-Dijkstra"><a href="#1-4-1-Dijkstra" class="headerlink" title="1.4.1 Dijkstra"></a>1.4.1 Dijkstra</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101214930810.png" alt="image-20231101214930810"></p>
<h3 id="1-4-2-例题："><a href="#1-4-2-例题：" class="headerlink" title="1.4.2 例题："></a>1.4.2 例题：</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101215020189.png" alt="image-20231101215020189"></p>
<h3 id="1-4-3-画图"><a href="#1-4-3-画图" class="headerlink" title="1.4.3 画图"></a>1.4.3 画图</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101215213138.png" alt="image-20231101215213138"></p>
<h3 id="1-4-4-表格"><a href="#1-4-4-表格" class="headerlink" title="1.4.4 表格"></a>1.4.4 表格</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101215222804.png" alt="image-20231101215222804"></p>
<h2 id="1-5-决策树"><a href="#1-5-决策树" class="headerlink" title="1.5 决策树"></a>1.5 决策树</h2><p>决策看EMV</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231101215355430.png" alt="image-20231101215355430"></p>
<h2 id="1-6-最小生成树"><a href="#1-6-最小生成树" class="headerlink" title="1.6 最小生成树"></a>1.6 最小生成树</h2><p>例题：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102142804071.png" alt="image-20231102142804071"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102142903968.png" alt="image-20231102142903968"></p>
<h2 id="1-7-网络与最大流量"><a href="#1-7-网络与最大流量" class="headerlink" title="1.7 网络与最大流量"></a>1.7 网络与最大流量</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102143429210.png" alt="image-20231102143429210"></p>
<h2 id="1-8-不确定型决策"><a href="#1-8-不确定型决策" class="headerlink" title="1.8 不确定型决策"></a>1.8 不确定型决策</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102143954895.png" alt="image-20231102143954895"></p>
<p>后悔值矩阵：拿最大的数减去其他数（包括自身）！！！！！</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102144537250.png" alt="image-20231102144537250"></p>
<h2 id="1-9-图解法"><a href="#1-9-图解法" class="headerlink" title="1.9 图解法"></a>1.9 图解法</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102144557986.png" alt="image-20231102144557986"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102145027642.png" alt="image-20231102145027642"></p>
<h2 id="1-10-活动排序"><a href="#1-10-活动排序" class="headerlink" title="1.10 活动排序"></a>1.10 活动排序</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102145315478.png" alt="image-20231102145315478"></p>
<blockquote>
<p>先尽快让铣床跑起来，所以选择车床最短的选C，然后第二个选能尽快接力铣床的D，C铣完闲置一小时就可以开始跑D</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102160105789.png" alt="image-20231102160105789"></p>
<h2 id="1-11-计算性价比"><a href="#1-11-计算性价比" class="headerlink" title="1.11 计算性价比"></a>1.11 计算性价比</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102145857853.png" alt="image-20231102145857853"></p>
<p>①忽悠法（最值问题）：</p>
<p>去掉最大值和最小值，若求的是最大值则选最大的，若是最小值则选最小的….</p>
<p>②正规解法：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102150516227.png" alt="image-20231102150516227"></p>
<p>③练习题：</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102150629903.png" alt="image-20231102150629903"></p>
<p>最一开始买新的，第三次或第四次买新的。</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102161633217.png" alt="image-20231102161633217"></p>
<h2 id="1-12-求最值问题"><a href="#1-12-求最值问题" class="headerlink" title="1.12 求最值问题"></a>1.12 求最值问题</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102151033336.png" alt="image-20231102151033336"></p>
<p>4-0,3-1,2-2,1-1-2</p>
<h2 id="1-13-匈牙利法"><a href="#1-13-匈牙利法" class="headerlink" title="1.13 匈牙利法"></a>1.13 匈牙利法</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102151419545.png" alt="image-20231102151419545"></p>
<p>①步骤一：找出每行的最小值，然后本行数据减去最小值，得到一下表格</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102153318331.png" alt="image-20231102153318331"></p>
<p>②步骤二：找出每列最小值，然后减去最小值得到下列表格</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102153525766.png" alt="image-20231102153525766"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102153630293.png" alt="image-20231102153630293"></p>
<h2 id="1-14-代入法"><a href="#1-14-代入法" class="headerlink" title="1.14 代入法"></a>1.14 代入法</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102153743444.png" alt="image-20231102153743444"></p>
<p>解题：没必要列方程</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102154123168.png" alt="image-20231102154123168"></p>
<h2 id="1-15-伏格尔法"><a href="#1-15-伏格尔法" class="headerlink" title="1.15 伏格尔法"></a>1.15 伏格尔法</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102154506547.png" alt="image-20231102154506547"></p>
<p>解题：</p>
<p>①步骤一：找出各行各列最小元素与次小元素的差额</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102154808496.png" alt="image-20231102154808496"></p>
<p>②步骤二：对行差和列差进行对比，找出最大差额。</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102155000275.png" alt="image-20231102155000275"></p>
<p>③步骤三：继续重复</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231102155139865.png" alt="image-20231102155139865"></p>
<p>以此类推….</p>
]]></content>
      <categories>
        <category>信息系统项目管理师</category>
      </categories>
      <tags>
        <tag>软考</tag>
        <tag>计算题</tag>
      </tags>
  </entry>
  <entry>
    <title>信息系统项目管理师</title>
    <url>/2023/09/19/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B8%88/</url>
    <content><![CDATA[<h1 id="0-考试简介"><a href="#0-考试简介" class="headerlink" title="0.考试简介"></a>0.考试简介</h1><h2 id="0-1-考试要求"><a href="#0-1-考试要求" class="headerlink" title="0.1 考试要求"></a>0.1 考试要求</h2><p>(1)熟悉信息化基础知识，了 解我国信息化发展的相关政策、战略、新模式和新概念;</p>
<p>(2)熟悉信息系统技术的知识及其应用创新:</p>
<p>(3)熟悉信息系统治理与管理的专业知识及主要方法:</p>
<p>(4)掌握信息系统相关工程的建设实施方法和模型:</p>
<p>(5)掌握信息系统项目管理的核心知识;</p>
<p>(6)掌握信息系统大型项目管理、多项目管理、组织级项目管理方面的知识;</p>
<p>(7)了解管理科学、组织通用治理和管理的专业知识;</p>
<p>(8)熟悉信息系统项目管理的相关标准及法律法规;</p>
<p>(9)熟悉信息系统项目管理师相关职业道德要求;</p>
<p>(10)熟练阅读和正确理解相关领域的英文资料。</p>
<h2 id="0-2考试科目设置"><a href="#0-2考试科目设置" class="headerlink" title="0.2考试科目设置"></a>0.2考试科目设置</h2><p>(1)信息系统项目管理综合知识，考试时间为150分钟，笔试，选择题;</p>
<p>(2)信息系统项目管理知识应用分析(案例分析)，考试时间为90分钟，笔试，论述题;</p>
<p>(3)信息系统项目管理知识综合运用论述(论文)，考试时间为120分钟，笔试，作文题。</p>
<h1 id="1-信息化发展"><a href="#1-信息化发展" class="headerlink" title="1.信息化发展"></a>1.信息化发展</h1><h2 id="1-1-信息与信息化"><a href="#1-1-信息与信息化" class="headerlink" title="1.1 信息与信息化"></a>1.1 信息与信息化</h2><h3 id="1-1-1-信息"><a href="#1-1-1-信息" class="headerlink" title="1.1.1 信息"></a>1.1.1 信息</h3><p><strong>1.信息的定义</strong></p>
<p>信息的11个特征：</p>
<blockquote>
<p>①客观性；②普遍性；③无限性；④动态性；⑤相对性；⑥依附性；⑦变换性；⑧传递性；⑨层次性；⑩系统性；⑪转化性</p>
</blockquote>
<p><strong>2.信息的特征与质量</strong></p>
<p>信息的7个质量属性：</p>
<table>
<thead>
<tr>
<th><strong>精确性</strong></th>
<th><strong>对事物状态描述的精准程度</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>完整性</strong></td>
<td><strong>对事物状态描述的全面程度，完整信息包括所有重要事实</strong></td>
</tr>
<tr>
<td><strong>可靠性</strong></td>
<td><strong>指信息的来源、采集方法、传输过程是可以信任的，符合预期</strong></td>
</tr>
<tr>
<td><strong>及时性</strong></td>
<td><strong>指获得信息的时刻与事件发生时刻的间隔长短</strong></td>
</tr>
<tr>
<td><strong>经济性</strong></td>
<td><strong>指信息获取、传输带来的成本在可以接受的范围之内</strong></td>
</tr>
<tr>
<td><strong>可验证性</strong></td>
<td><strong>指信息的主要质量属性可以被证实或者证伪的程度</strong></td>
</tr>
<tr>
<td><strong>安全性</strong></td>
<td><strong>信息可以被非授权访问的可能性，可能性越低，安全性越高</strong></td>
</tr>
</tbody></table>
<h3 id="1-1-2-信息系统"><a href="#1-1-2-信息系统" class="headerlink" title="1.1.2 信息系统"></a><strong>1.1.2 信息系统</strong></h3><p><strong>1.信息系统的生命周期</strong></p>
<p>①系统规划（可行性分析与项目开发计划）； —–立项</p>
<p>②系统分析（需求分析）；                                —–<strong>开发</strong></p>
<p>③系统设计（概要设计、详细设计）；             —–<strong>开发</strong></p>
<p>④系统实施（编码、测试）；                            —–<strong>开发</strong></p>
<p>⑤系统运行和维护                                               —–运维</p>
<p>最后消亡</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230919154417438.png" alt="image-20230919154417438"></p>
<h3 id="1-1-3-信息化"><a href="#1-1-3-信息化" class="headerlink" title="1.1.3 信息化"></a>1.1.3 信息化</h3><p><strong>1.信息化核心</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230919150938701.png" alt="image-20230919150938701"></p>
<p><strong>2.信息化体系</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230919153736351.png" alt="image-20230919153736351"></p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20230919153754704.png" alt="image-20230919153754704"></p>
<h2 id="1-2-现代化基础设施"><a href="#1-2-现代化基础设施" class="headerlink" title="1.2 现代化基础设施"></a>1.2 现代化基础设施</h2><h3 id="1-2-1-新型基础设施建设"><a href="#1-2-1-新型基础设施建设" class="headerlink" title="1.2.1 新型基础设施建设"></a>1.2.1 新型基础设施建设</h3><p><strong>1.新型基础设施的三个方面</strong>，书本P7</p>
<p>①信息基础设施（<strong>技术</strong>新）</p>
<p>②融合基础设施（<strong>应用</strong>新）</p>
<p>③创新基础设施（<strong>平台</strong>新）</p>
<p><strong>2.新型基础设施发展重点</strong>，书本P8</p>
<h3 id="1-2-2-工业互联网"><a href="#1-2-2-工业互联网" class="headerlink" title="1.2.2 工业互联网"></a>1.2.2 工业互联网</h3><p><strong>1.内涵和外延</strong></p>
<p>①从工业经济发展角度看，工业互联网为制造强国建设提供关键支撑。</p>
<blockquote>
<p>一、推动传统工业转型升级</p>
<p>二、加快新兴产业培育壮大</p>
</blockquote>
<p>②从网络设施发展角度看，工业互联网是网络强国建设的重要内容。</p>
<blockquote>
<p>一、加速网络演进升级</p>
<p>二、拓展数字经济空间</p>
</blockquote>
<p><strong>2.平台体系</strong></p>
<p>工业互联网平台体系具有四大层级：</p>
<p>①网络为基础</p>
<p>②平台为中枢：（1）数据汇聚；（2）建模分析；（3）知识复用；（4）应用创新</p>
<p>③数据为要素：（1）重要性；（2）专业性；（3）复杂性</p>
<p>④安全为保障：（1）涉及范围广；（2）造成影响大；（3）企业防护基础弱</p>
<p><strong>3.融合应用</strong></p>
<p><strong>六大</strong>典型的应用模式：P10</p>
<p>1.平台化设计；2.智能化制造；3.网络化协同；4.个性化定制；5.服务化延伸；6.数字化管理</p>
<h3 id="1-2-3-车联网"><a href="#1-2-3-车联网" class="headerlink" title="1.2.3 车联网"></a>1.2.3 车联网</h3><p><strong>1.体系框架</strong></p>
<p>（1）端系统；（2）管系统；（3）云系统</p>
<p><strong>2.链接方式</strong></p>
<p>（1）车与车；（2）车与云；（3）车与路；（4）车与人；（5）车内设备之间</p>
<h2 id="1-3-现代化创新发展"><a href="#1-3-现代化创新发展" class="headerlink" title="1.3 现代化创新发展"></a>1.3 现代化创新发展</h2><h3 id="1-3-1-农业农村现代化"><a href="#1-3-1-农业农村现代化" class="headerlink" title="1.3.1 农业农村现代化"></a>1.3.1 农业农村现代化</h3><p><strong>1.乡村振兴战略</strong></p>
<p>（1）建设基础设施；（2）发展智慧农业；（3）建设数字乡村</p>
<p><strong>2.农业现代化</strong>，P12</p>
<h3 id="1-3-2-两化融合与智能制造"><a href="#1-3-2-两化融合与智能制造" class="headerlink" title="1.3.2 两化融合与智能制造"></a>1.3.2 两化融合与智能制造</h3><p><strong>1.两化融合</strong></p>
<p>定义：以信息化带动工业化、以工业化促进信息化，走新型工业化道路。</p>
<p>核心：信息化支持，追求可持续发展模式。</p>
<p>信息化与工业化主要在技术、产品、业务、产业这四个方面进行融合。</p>
<table>
<thead>
<tr>
<th><strong>技术融合</strong></th>
<th><strong>工业技术与信息技术融合</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>产品融合</strong></td>
<td><strong>电子信息技术或产品渗透到产品汇中，增加产品的技术含量</strong></td>
</tr>
<tr>
<td><strong>业务融合</strong></td>
<td><strong>信息技术应用到企业研发设计、生产制造、经营管理。市场营销各个环节，推动企业业务创新和管理升级</strong></td>
</tr>
<tr>
<td><strong>产业衍生</strong></td>
<td><strong>两化融合可以催生出的新产业，形成一些新兴业态</strong>。如工业电子、工业软件、工业信息服务业</td>
</tr>
</tbody></table>
<p><strong>2.智能制造</strong>，P15</p>
<p>智能制造能力成熟等级：一级（规划级）、二级（规范级）、三级（集成级）、四级（优化级）、五级（引领级）</p>
<h3 id="1-3-3-消费互联网"><a href="#1-3-3-消费互联网" class="headerlink" title="1.3.3 消费互联网"></a>1.3.3 消费互联网</h3><p><strong>1.基本属性</strong></p>
<ul>
<li>媒体属性：由自媒体、社会媒体以及资讯为主的门户网站</li>
<li>产业属性：由在线旅行和为消费者提供生活服务的电子商务等其他组成</li>
</ul>
<p><strong>2.应用新格局</strong></p>
<h2 id="1-4-数字中国"><a href="#1-4-数字中国" class="headerlink" title="1.4 数字中国"></a>1.4 数字中国</h2><h3 id="1-4-1-数字经济"><a href="#1-4-1-数字经济" class="headerlink" title="1.4.1 数字经济"></a>1.4.1 数字经济</h3><p><strong>1.新技术经济范式</strong></p>
<p><strong>2.主要内容构成</strong></p>
<p>数字经济具体分类：数字产业化、产业数字化。</p>
<blockquote>
<p>数字产业化：数字产品制造业、数字产品服务业、数字技术应用业、数字要素驱动业</p>
<p>产业数字化：数字化效率提升业</p>
</blockquote>
<p>从整体构成上看：</p>
<p>数字经济包括：数字产业化、产业数字化、数字化治理、数据价值化</p>
<p>（1）数字产业化发展重点：云计算、大数据、物联网、工业互联网、区块链、人工智能、虚拟现实和增强现实；</p>
<p>（2）产业数字化的典型特征：以数字科技变革生产工具、以数据资源为关键生产要素、以数字内容重构产品结构、以信息网络为市场配置纽带、以服务平台为产业生态载体、以数字善治为发展机制条件；</p>
<p>（3）数字化治理内涵：对数据的治理、运用数据进行治理、对数字融合空间进行治理</p>
<p>（4）数据价值化的三个框架：数据资源化、数据资产化、数据资本化</p>
<h3 id="1-4-2-数字政府"><a href="#1-4-2-数字政府" class="headerlink" title="1.4.2 数字政府"></a>1.4.2 数字政府</h3><p><strong>1.数字新特征</strong>，P21</p>
<p>数字政府的<strong>特征</strong>：协同化、云端化、智能化、数据化、动态化</p>
<p>数字政府建设<strong>关键词</strong>：共享（提升政务服务效能的重要抓手）、互通（实现更大范围的系统互联互通）、便利（更好地服务企业和群众）</p>
<p><strong>2.主要内容</strong></p>
<p>（1）一网通办：线下转线上服务平台，网上办理业务；</p>
<p>（2）跨省通办：申请人在办理地之外的省市提出申请或在本地提出办理其他省市事项申请，办理模式通常可分为全程网办、代收代办和多地联办等。</p>
<p>（3）一网统管：围绕城市治理水平的提升，主要针对各类民生诉求和城市事件，以最小的成本解决最突出的问题。</p>
<h3 id="1-4-3-数字社会"><a href="#1-4-3-数字社会" class="headerlink" title="1.4.3 数字社会"></a>1.4.3 数字社会</h3><p><strong>1.数字民生</strong></p>
<p>数字民生建设重点通常强调以下三点：</p>
<ul>
<li>普惠：解决民生资源配置不均衡等问题</li>
<li>赋能：促进民生保障实效指数式增长</li>
<li>利民：推动数字技术全面融入社会交往和日常生活新趋势，使民生服务日趋智慧化、便利化和人性化</li>
</ul>
<p><strong>2.智慧城市</strong></p>
<p>（1）基本原理：P24</p>
<p>（2）五个核心能力：P25</p>
<p>（3）成熟等级：一级（规划级）、二级（管理级）、三级（协同级）、四级（优化级）、五级（引领级）</p>
<p><strong>3.数字乡村</strong></p>
<p>加快信息化发展，整体带动和提升农业农村现代化发展。</p>
<p><strong>4.数字生活</strong></p>
<p>（1）生活工具数字化</p>
<p>（2）生活方式数字化</p>
<p>（3）生活内容数字化</p>
<h3 id="1-4-4-数字生态"><a href="#1-4-4-数字生态" class="headerlink" title="1.4.4 数字生态"></a><strong>1.4.4 数字生态</strong></h3><p><strong>1.数据要素市场</strong></p>
<p>概念：将尚未完全由市场配置的数据要素转向由市场配置的动态过程。</p>
<p>目的：形成以市场为根本调配机制，实现数据流动的价值或者数据在流动中产生价值。</p>
<p><strong>2.数字营商环境</strong></p>
<p>全球数字营商环境评价指标体系的5个一级指标：P27</p>
<p><strong>3.网络安全保护</strong></p>
<p>强大的网络安全产业实力是保障网络空间安全的<strong>根本</strong>和<strong>基石</strong></p>
<h2 id="1-5-数字化转型与元宇宙"><a href="#1-5-数字化转型与元宇宙" class="headerlink" title="1.5 数字化转型与元宇宙"></a>1.5 数字化转型与元宇宙</h2><h3 id="1-5-1-数字化转型"><a href="#1-5-1-数字化转型" class="headerlink" title="1.5.1 数字化转型"></a><strong>1.5.1 数字化转型</strong></h3><p><strong>1.驱动因素</strong></p>
<p>（1）生产力飞升：第四次科技革命</p>
<p>（2）生产要素变化：数据要素的诞生</p>
<p>（3）信息传播效率突破：社会互联网新格局</p>
<p>（4）社会“智慧主体”规模：快速复制与“智能+”</p>
<p><strong>2.基本原理</strong></p>
<p>传统发展视角下的竞争力与竞争优势的保持和增强等方法，越来越难以支撑组织的发展需求，主要体现在：</p>
<p>决策瓶颈、变革制约、知识资产流失、需求响应延迟。</p>
<p><strong>3.智慧转移</strong>，P32</p>
<p>①智慧—数据过程（信息化过程）；②数据—智慧过程（智慧化工程）</p>
<p><strong>4.持续迭代</strong></p>
<p>针对能力因子的持续迭代可以从任何一项活动开始实施四项活动：</p>
<p>（1）信息物理世界建设</p>
<p>（2）决策能力边际化部署</p>
<p>（3）科学物理赛博机制构筑</p>
<p>（4）数据框架与信息调制设计</p>
<h3 id="1-5-2-元宇宙"><a href="#1-5-2-元宇宙" class="headerlink" title="1.5.2 元宇宙"></a>1.5.2 元宇宙</h3><p><strong>1.主要特征</strong></p>
<ul>
<li>沉浸式体验</li>
<li>虚拟身份</li>
<li>虚拟经济</li>
<li>虚拟社会治理</li>
</ul>
<p><strong>2.发展演进</strong></p>
]]></content>
      <categories>
        <category>信息系统项目管理师</category>
      </categories>
      <tags>
        <tag>软考</tag>
      </tags>
  </entry>
  <entry>
    <title>用Git将项目上传至Github</title>
    <url>/2023/08/16/%E7%94%A8Git%E5%B0%86%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E8%87%B3Github/</url>
    <content><![CDATA[<h1 id="一、克隆GitHub项目"><a href="#一、克隆GitHub项目" class="headerlink" title="一、克隆GitHub项目"></a>一、克隆GitHub项目</h1><h2 id="1-在本地创建一个空文件夹"><a href="#1-在本地创建一个空文件夹" class="headerlink" title="1.在本地创建一个空文件夹"></a>1.<strong>在本地创建一个空文件夹</strong></h2><p>文件夹名字根据自身需要即可，右键点击Git Bash，输入命令</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></div>

<p>初始化本地仓库</p>
<h2 id="2-克隆Github项目"><a href="#2-克隆Github项目" class="headerlink" title="2.克隆Github项目"></a><strong>2.克隆Github项目</strong></h2><p>以本人的Github为例子展开实验</p>
<p>在刚刚初始化的文件夹里打开git bash，使用命令</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">git clone yourSSH</span><br></pre></td></tr></table></figure></div>

<p>其中 yourSSH 为你需要克隆的项目到SSH密钥</p>
<p><img lazyload src="/images/loading.svg" data-src="/../../pic/%E5%85%8B%E9%9A%86%E5%88%B0%E6%9C%AC%E5%9C%B0.png"></p>
<p>上图即为成功克隆到本地</p>
<h1 id="二、修改项目代码"><a href="#二、修改项目代码" class="headerlink" title="二、修改项目代码"></a><strong>二、修改项目代码</strong></h1><h2 id="1-进入到相关目录"><a href="#1-进入到相关目录" class="headerlink" title="1.进入到相关目录"></a><strong>1.进入到相关目录</strong></h2><p>使用命令</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">cd filename</span><br></pre></td></tr></table></figure></div>

<p>进入到需要修改的目录下</p>
<p><img lazyload src="/images/loading.svg" data-src="/../../pic/%E8%BF%9B%E5%85%A5%E5%88%B0%E4%BF%AE%E6%94%B9%E7%9B%AE%E5%BD%95.png"></p>
<p>上图为进入到需要修改文件的目录</p>
<h2 id="2-修改文件"><a href="#2-修改文件" class="headerlink" title="2.修改文件"></a><strong>2.修改文件</strong></h2><h3 id="①Vim命令"><a href="#①Vim命令" class="headerlink" title="①Vim命令"></a>①Vim命令</h3><p>使用命令</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">vim 文件命令</span><br></pre></td></tr></table></figure></div>

<p>进入到编辑器</p>
<p><img lazyload src="/images/loading.svg" data-src="/../../pic/%E8%BF%9B%E5%85%A5%E5%88%B0%E7%BC%96%E8%BE%91%E5%99%A8.png"></p>
<p>上两图分别为命令以及编辑状态</p>
<h3 id="②修改文件内容"><a href="#②修改文件内容" class="headerlink" title="②修改文件内容"></a>②修改文件内容</h3><p>本次以添加注释为例</p>
<p>点击键盘i或者insert健即可进入修改模式(左下角显示<strong>insert</strong>即可)，如下图:</p>
<p><img lazyload src="/images/loading.svg" data-src="/../../pic/%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9.png"></p>
<p>修改完毕之后，按住esc健，退出编辑，左下角输入”:wq”退出编辑并且保存</p>
<p><img lazyload src="/images/loading.svg" data-src="/../../pic/%E4%BF%9D%E5%AD%98%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9.png"></p>
<h1 id="三、上传项目代码至GitHub"><a href="#三、上传项目代码至GitHub" class="headerlink" title="三、上传项目代码至GitHub"></a>三、上传项目代码至GitHub</h1><h2 id="1-将文件上传到暂存区"><a href="#1-将文件上传到暂存区" class="headerlink" title="1.将文件上传到暂存区"></a><strong>1.将文件上传到暂存区</strong></h2><p>使用命令</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></div>

<p>将所有文件上传至暂存区</p>
<p><img lazyload src="/images/loading.svg" data-src="/../../pic/%E4%B8%8A%E4%BC%A0%E5%88%B0%E6%9A%82%E5%AD%98%E5%8C%BA.png"></p>
<h2 id="2-将暂存区文件添加到本地仓库"><a href="#2-将暂存区文件添加到本地仓库" class="headerlink" title="2.将暂存区文件添加到本地仓库"></a><strong>2.将暂存区文件添加到本地仓库</strong></h2><p>使用命令</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">git commit -m “注释”</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="/../../pic/%E6%B7%BB%E5%8A%A0%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png"></p>
<h2 id="3-将文件上传至GitHub"><a href="#3-将文件上传至GitHub" class="headerlink" title="3.将文件上传至GitHub"></a>3.将文件上传至GitHub</h2><p>使用命令</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></div>

<p>将文件上传至GitHub</p>
<p><img lazyload src="/images/loading.svg" data-src="/../../pic/%E4%B8%8A%E4%BC%A0%E5%88%B0GitHub.png"></p>
<h2 id="4-查看GitHub文件是否修改"><a href="#4-查看GitHub文件是否修改" class="headerlink" title="4.查看GitHub文件是否修改"></a>4.查看GitHub文件是否修改</h2><p><img lazyload src="/images/loading.svg" data-src="/../../pic/%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E4%BF%AE%E6%94%B9.png"></p>
<p>修改成功！！</p>
]]></content>
      <categories>
        <category>Git</category>
        <category>GitHub</category>
      </categories>
  </entry>
  <entry>
    <title>论文</title>
    <url>/2023/10/15/%E8%AE%BA%E6%96%87/</url>
    <content><![CDATA[<h1 id="10-论文"><a href="#10-论文" class="headerlink" title="10.论文"></a>10.论文</h1><p>论文两部分：摘要和正文</p>
<h2 id="10-1摘要"><a href="#10-1摘要" class="headerlink" title="10.1摘要"></a>10.1摘要</h2><p>字数：200~400</p>
<h2 id="10-2正文"><a href="#10-2正文" class="headerlink" title="10.2正文"></a>10.2正文</h2><p>字数：2500左右</p>
<ul>
<li>不可出现图表、公式，尽量转化成文字；</li>
<li>避免军工类等涉密项目；</li>
<li>要写某公司或者某单位项目；</li>
<li>多写实例，少写道理；</li>
<li>卷面工整、字迹规范。</li>
</ul>
<h2 id="10-3结束语"><a href="#10-3结束语" class="headerlink" title="10.3结束语"></a>10.3结束语</h2><p>字数：200左右</p>
<h2 id="10-4解答步骤"><a href="#10-4解答步骤" class="headerlink" title="10.4解答步骤"></a>10.4解答步骤</h2><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231015210748876.png" alt="image-20231015210748876"></p>
<p>（1）选择试题：有把握的</p>
<p>（2）论文构思：</p>
<ul>
<li>构思论点、下过功夫的</li>
<li>项目内容与论点相结合</li>
<li>决定摘要内容</li>
<li>划分章节（草稿纸）</li>
</ul>
<p>（3）摘要：</p>
<ul>
<li>用简介、明快、阐清自己的论点为上策</li>
</ul>
<p>（4）正文撰写</p>
<ul>
<li>按草稿构思、追忆项目素材</li>
<li>控制好内容篇幅</li>
<li>不要有前后矛盾</li>
</ul>
<p>（5）检查修正</p>
<ul>
<li>卷面整洁</li>
<li>写完论文</li>
</ul>
<h2 id="10-5写作技巧"><a href="#10-5写作技巧" class="headerlink" title="10.5写作技巧"></a>10.5写作技巧</h2><h3 id="10-5-1-摘要"><a href="#10-5-1-摘要" class="headerlink" title="10.5.1 摘要"></a>10.5.1 摘要</h3><p>特点：简明扼要的说明研究工作的目的，研究方法和最终结论，重点是<strong>结论</strong></p>
<p>注意事项：</p>
<ul>
<li><p>不可分段，切忌采用条例式书写法</p>
</li>
<li><p>内容必须完整，不可把论文中所阐述的主要内容或观点遗漏，应该写成一篇可以独立使用的短文</p>
</li>
<li><p>不可列数据，文字简介，删除不必要的字眼，不宜展开论证说明</p>
</li>
<li><p>不要照搬论文正文中的小标题或论文结论部分的文字</p>
</li>
</ul>
<h3 id="10-5-2-正文"><a href="#10-5-2-正文" class="headerlink" title="10.5.2 正文"></a>10.5.2 正文</h3><blockquote>
<p>站在高级工程师的角度，同时也是项目管理者的角度，要有自己的主见</p>
</blockquote>
<p>主体：论点、论据、论证过程和结论。</p>
<ul>
<li>提出问题——论点</li>
<li>分析问题——论据和论证</li>
<li>解决问题——论证方法与步骤</li>
</ul>
<p>注意事项：</p>
<ul>
<li>正文规范。层次分明、脉络清晰。论文层次不宜超过5级。(一个逻辑包含几个逻辑段，一个小逻辑段可以包含几个段)</li>
<li>论文末尾应该留有致谢，表示论文完成期间得到的帮助表示感谢</li>
</ul>
<p>项目管理各知识领域出题次数如下图所示:</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231015210805977.png" alt="image-20231015210805977"></p>
<h2 id="10-6-项目的五大过程组和九大知识领域"><a href="#10-6-项目的五大过程组和九大知识领域" class="headerlink" title="10.6 项目的五大过程组和九大知识领域"></a>10.6 项目的五大过程组和九大知识领域</h2><p>五大过程组：</p>
<p>（1）启动过程组；（2）规划过程组；（3）执行过程组；（4）监控过程组；（5）收尾过程组</p>
<p>九大知识领域：</p>
<p>项目整体管理、项目范围管理、项目时间管理、项目成本管理、项目质量管理、人力资源管理、项目沟通管理、项目风险管理、项目采购管理</p>
<h3 id="10-6-1-项目整体管理"><a href="#10-6-1-项目整体管理" class="headerlink" title="10.6.1 项目整体管理"></a>10.6.1 项目整体管理</h3><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231015210520260.png" alt="image-20231015210520260"></p>
<p>项目整体管理过程：书本P240</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231015210555697.png" alt="image-20231015210555697"></p>
<h4 id="1-生命周期"><a href="#1-生命周期" class="headerlink" title="1.生命周期"></a>1.生命周期</h4><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231015210607131.png" alt="image-20231015210607131"></p>
<h4 id="2-信息系统项目阶段"><a href="#2-信息系统项目阶段" class="headerlink" title="2.信息系统项目阶段"></a>2.信息系统项目阶段</h4><p>（1）<strong>可行性分析阶段</strong>主要从技术可行性经济可行性和操作可行性等方面对项目的可行性做出判断,并提出可行性方案。信息系统项目是一项耗资多、耗时长、风险性大的工程项目,因此,在进行大规模系统开发之前,要从有益性、可能性和必要性三个方面对未来系统的经济效益、社会效益进行初步分析,以避免盲目投资，减少不必要的损失。可行性分析阶段的总结性成果是可行性报告。</p>
<p>（2） <strong>业务流程优化阶段</strong>主要是从企事业单位的业务流程组织机构进行改良或改造,重新组织,以适应企事业单位信息化的要求,并对业务流程进行规范化、优化,使信息系统能够促进企业业务的发展。</p>
<p>（3）<strong>计划阶段</strong>的任务是要站在全局的角度,对所开发的系统进行统一的总体的考虑，从总体的角度来规划系统应该由哪些部分组成和它们之间的关系如何,并根据系统需求提出解决方案。在系统开发之前要确定开发顺序,合理安排<strong>人力、物力和财力</strong>,制定项目计划。计划阶段的总结性成果是系统规划报告。</p>
<p>（4）<strong>需求分析阶段</strong>是分析获取信息化建设的需求,包括软件系统的需求分析和硬件(网络)系统的需求分析,其任务是按照整体计划的要求,逐一对系统计划中所确定的各组成部分进行项目的分析</p>
<p>（5）<strong>系统设计阶段</strong>包括软件系统的设计硬件(网络)系统的设计软件基础平台与软件硬件集成设计。进行系统设计前,应进行系统分析。</p>
<p>（6）<strong>系统实现阶段</strong>一方面是指软件系统的编码与实现另一方面是系统硬件设备的购置与安装</p>
<p>（7）<strong>系统测试阶段</strong>是在软件系统的测试和硬件系统的测试等的基础上进行的,其中软件系统测试指单元测试、集成测试和确认测试。系统测试是从总体出发,测试系统应用软件的整体表现及系统各个组成部分的功能完成情况，测试系统的运行效率和可靠性等。</p>
<p>（8）<strong>系统验收阶段</strong>指软件系统的安装、调试和验收,数据准备及加载,系统试运行与工程收尾。</p>
<p>（9）<strong>系统运营与维护阶段</strong>指信息系统投入运营后的日常维护工作以及系统的备份、数据库的恢复、运行日志的建立、系统功能的修改与增加等。运营与维护阶段是信息系统最重要的一个阶段，一般不包含在信息系统项目的生命周期中。</p>
<h4 id="3-各个阶段要提交的交付物"><a href="#3-各个阶段要提交的交付物" class="headerlink" title="3.各个阶段要提交的交付物"></a>3.各个阶段要提交的交付物</h4><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231015210621441.png" alt="image-20231015210621441"></p>
<h4 id="4-各个阶段参与人员的种类"><a href="#4-各个阶段参与人员的种类" class="headerlink" title="4.各个阶段参与人员的种类"></a>4.各个阶段参与人员的种类</h4><p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231015205152818.png" alt="image-20231015205152818"></p>
<h4 id="5-项目实施阶段的过程"><a href="#5-项目实施阶段的过程" class="headerlink" title="5.项目实施阶段的过程"></a>5.项目实施阶段的过程</h4><p>（1）<strong>系统需求分析</strong>。确定系统应该具有什么功能,主要涉及如何获得用户的需求、描述需求和评审需求。</p>
<p>（2）<strong>系统设计</strong>。一般系统设计是在需求分析之后实施的,其中的系统分析则主要明确应该解决什么问题,重点在于理解问题并对理解的结果加以分析;系统设计则是通过某种特定的平台,达到完成整体软件的功能,又主要包括概要设计和项目设计。</p>
<p>（3）<strong>系统实现</strong>。重点在于明确所要解决的问题并采用什么技术和手段来实现上述的设计方案以满足用户的需求。</p>
<p>（4）<strong>系统测试</strong>。该阶段主要是通过各种测试思想、方法和工具的具体应用,从而找出系统中所隐藏的各种缺陷,最后使得软件的 Bug 数量降到最低。一般包括单元测试和集成测试等形式。</p>
<p>（5）<strong>软件系统的安装调试</strong>。需要得到程序员或者技术支持人员的支持。</p>
<p>（6）<strong>数据准备及加载</strong>。需要得到程序员或者技术人员的支持。</p>
<p>（7）<strong>系统试运行</strong>。需要得到程序员或者技术人员的支持。</p>
<p>（8）<strong>项目验收</strong>。</p>
<p>（9）<strong>项目收尾</strong>。</p>
<h4 id="6-大型、复杂项目管理的特征"><a href="#6-大型、复杂项目管理的特征" class="headerlink" title="6.大型、复杂项目管理的特征"></a>6.大型、复杂项目管理的特征</h4><p><strong>6.1 大型、复杂项目管理的特点：</strong></p>
<p>（1）<strong>项目周期较长</strong>。此类型项目往往从所交付产品的早期(如概念阶段)就开始了。如何在一个相对较长的周期内,保持项目运作的完整性和一致性就成了关键性的问题。</p>
<p>（2）<strong>项目规模较大,目标构成复杂</strong>。在这种情况下都会把项目分解成一个个目标相关联的小项目,形成项目群进行管理。这种意义上的项目经理往往称为项目群经理或是大项目经理。</p>
<p>（3）<strong>项目团队构成复杂</strong>。不仅包括项目内部所形成的项目管理体系,也包括合作方,有时甚至有多单位参与。这种复杂的团队构成会导致团队之间的协作、沟通和冲突解决所需要的成本大幅度上升所以如何降低协作成本就成了提高整体项目效率的关键。</p>
<p>（4）<strong>大型项目经理的日常职责将更集中于管理职责</strong>。在大型及复杂项目的状况下,将需要更明确而专一的分工机制,管理所体现的效率因素将更直接地影响项目的目标实现同时,由于大型项目大多数是以项目群的方式进行,所以大型项目经理面临更多的是“间接管理”的挑战。</p>
<p><strong>6.2 大型、复杂项目过程管理的特点：</strong></p>
<p>（1）<strong>计划过程</strong>。建立项目组织所需要的各个过程文件,支撑过程实施的操作指南、文档模板和检查表。</p>
<p>（2）<strong>执行过程</strong>。按照预定义的过程实施项目。</p>
<p>（3）<strong>监督过程</strong>。由独立的组织检查项目组织实施预定义过程的符合度。</p>
<h1 id="论述：10大管理的要求"><a href="#论述：10大管理的要求" class="headerlink" title="论述：10大管理的要求"></a>论述：10大管理的要求</h1><p>1、<strong>按照顺序熟练背诵</strong>每个管理的过程，且能用自己的话描述出来；(论文)</p>
<p>2、每个过程<strong>至少掌握一个</strong>工具或方法；</p>
<p>3、每个管理有<strong>什么问题</strong>；</p>
<p>4、掌握与其他各大管理之间<strong>联系</strong>。</p>
<p><img lazyload src="/images/loading.svg" data-src="/../Resources/image-20231028154609829.png" alt="image-20231028154609829"></p>
]]></content>
      <categories>
        <category>信息系统项目管理师</category>
      </categories>
      <tags>
        <tag>软考</tag>
      </tags>
  </entry>
</search>
